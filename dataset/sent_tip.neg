2	none of these is true in this scenario, so you are good here.
3	but if the situation were different, you could consider using the values of the array as keys on another array so that you can check with an amortized cost of o(1) instead of o(n) :
4	in this case, the encoding of the data on the wire is not json .
5	it is 'application/x-www-form-urlencoded' as per the default used by jquery's ajax function.
6	(all on one line) therefore it does not make sense to call json_decode within php - there was never any json involved.
7	php decodes the url-encoded post body automatically.
8	if you want to encode with json, then you can use json.stringify() directly.
9	this may require json2.js on the browser side.
10	to use json, then you would need something like this in the browser:
11	you don't necessarily have to use get method to retain the sort order.
12	you can also use the cookie to store the sort order.in that way your code will look more cleaner.
13	call the setcookie() function when you sort the order and pass the sort order as parameter.
14	and when the page loads for the first time or refreshes, call the same sort function and call getcookie() to get the cookie value and set that as your sort order before sorting.
15	if you want to use get, this will also do the work when page refreshes , i hope you call this function tablesort() when document is ready.
16	you can either do a strtotime function or do an explode and do a mktime of the exploded elements.
17	as was mentioned in a reply, you will want to santize the variables when printing them out, and maybe protect it going in (more than an addslashes)
20	first of all, you will need to keep a cookie on the client-side called hash (a randomized string), whenever a user logs in.
21	along with this cookie, you must create a row in a table ( sessions ) within your database with the value of the hash , and the corresponding logged in user id.
22	whenever a user visits the website, you need to check if the cookie value has been set, and if it has, check if the value matches any within the database.
23	assuming it finds one, grab the user id that matches with the corresponding value, and log that specific user in.
24	same thing goes for when the user logs out; delete the hash from the client-side and the database table, every time (for security purposes).
25	hopefully, this gives you an idea of what you need to do to achieve this.
26	if you want a more in depth explanation on how to do this, i highly suggest reading these:
27	the definitive guide to form-based website authentication what is the best way to implement “remember me” for a website?
28	sidenote : i've noticed you're still using the deprecated mysql_* extension.
34	you don't need to use match everywhere.
35	the where condition is where you determine which rows are retrieved from the table.
36	right after select is where you choose which columns from those rows are displayed.
37	order by determines which column and direction the rows are sorted by.
39	you're right that sessions cannot be shared in this way.
40	however, you can use secure cookies to share user data across subdomains:
41	make sure the domain parameter when you set the cookie is something like
42	then you'll be able to access the cookie from any subdomain of mysite.org
44	regardless of the value of $count at this point, your script will send a location header.
45	in other words, the browser is receiving a redirect either way, whether $count is equal to 1 or not.
46	in combination with this line, your loop is defined.
47	this evaluates to true if the user has these cookies defined, which happens when they are logging in for the first time, or have already logged in.
48	if they are logged in, their username and password must be valid, and $count will end up as 1, because they are in the database.
49	to fix this, you'll want to stop header("location:logged.php?type=".$type); from running every time protect.php is run.
50	this is the essence of your problem.
51	you can fix this however you like, but i would do it with sessions.
52	you already have three cookies: username , password , and typeofuser .
53	the system you have works fine, but most authentication scripts use sessions, accessible like cookies ($_cookie['foo']), but with the $_session variable instead.
54	the advantage to using session is that the values you store in them are not available to anyone but scripts on your server/site, to view, or to edit.
55	in general, the less information you expose to the user, the better.
56	if you need clarification, check out this stackoverflow post or the basic examples on the php website .
57	one more thing to point out is in your script, if(isset($_cookie["username"])&amp;&amp;isset($_cookie["password"])){ has no else statement.
58	if one or both of these cookies are not defined, no code will be executed, and what i am assuming is a protected page will be displayed publicly.
59	you may want to add an else statement, something along the lines of:
60	two problems, one closing ) and a missing semicolon after str_replace, also you should know your str_replace won't do anything in your code so i added $text = ... :)
61	if the string you want to replace is not found in the haystack, str_replace won't do anything.
62	so it is safe to run the function unconditionally.
63	in the original version, you'd also have to surround the regex pattern for preg_match with delimiters (see: http://www.php.net/manual/en/regexp.reference.delimiters.php ).
64	(in this case, strpos would do the job, too.)
65	you are sending it via get.
66	in php, try print_r($_get) instead of $_post and check if you see the right value.
67	there is a very handy built in way in javascript, window.location.hash .
68	installing bootstrap shouldn't play any effect onto how you process forms, since bootstrap is simply a template of css and javascript.
69	i would place some checks in your insert.php such as issets and see if there is actually any information in the posts.
70	you can also check this in the chrome developer console.
72	either $dbh or $con , depending on which variable you are using.
74	you can query m.success to get the equivalent value (i.e., true if the match succeeds and false if it fails).
75	the original expression is case-sensitive (e.g., [a-z] will not match lowercase letters.
76	if you want the search to be case-insensitive, change the line:
77	if you're using jquery, try using .serializearray() instead of stringify.
78	also, when receiving the $_post['contries'] variables, you need to implode it.
79	you are using the mysql_fetch_assoc() function (part of the deprecated mysql_* extensions) with mysqli , which are not compatible.
80	the @ before this method call is hiding the error that you would normally see from the incorrect fetch of the data as an associative array.
82	if you want to prevent counting all the pages just use arrays and array_search
83	databases are fast, maybe they are not as fast as basic string operations in php, but if there is a lot of data, databases will probably be faster.
84	a basic select query takes (on my current default desktop hardware) about 15ms, cached less than 1ms, and this is pretty much independend of the number of names in your table, if the indexes are correct.
85	so your site will always be fast.
86	databases won't cause a stackoverflow or an out of memory error and crash your site (this is very depending on your php-settings and hardware) databases are more flexible, imagine you want to add / remove / edit names after creating the first data-set.
87	it's very simple with "insert into", "delete from" and "update" to modify the data, better than editing a string somewhere in your code with about 100.000 entries.
88	you definitly need to use mysqli or pdo instead, code maybe like this:
90	i would print_r sessions to see what got registered.
91	why do you have issues with default session path?
92	i wouldn't try to alter it and make sure that works first.
93	this is altering the main functionality of hybridauth.
94	if you have shell access make sure the web server user has write access to the directory; that should take care of the issue.
95	instead of using all those conditionals, you could simply do:
96	you can't actually stick to your two helper methods - sometimes you need to use raw pdo instance.
97	nobody asks you everytime open a connection, perform 3 lines of code and close it.
98	even with raw pdo connection is opened only once.
99	there is indeed no point in storing database credentials as class properties.
100	they needed in constructor only and nowhere else why not to create a connection right in the constructor, without the need for extra method?
101	public function getone() would be indispensable addition to your set.
102	you need to make $connection public - at least until you make all the methods available from both pdo and pdostatement
103	there are some possible benefits of doing something like this.
104	for example, you can embed query profiling and application logging into the class.
105	and, as you point out, you have the option of structuring the queries in a way thats easiest for you to work with and maintain.
106	on the other hand, the code will be less portable if it relies on your wrapper class.
107	you cant then take that code and use it with code that relies on pdo.
108	you might get around some of those limitations by extending the pdo class, rather than creating a wrapper for it.
109	must have a name attribute in order to return a value.
110	secondly, you are accessing the $_post superglobal even when viewing the page normally i.e.
111	one solution to that is to wrap your existing if statement thusly:
112	the php function isset returns a bool value, which you are testing against.
113	it is a boolean and not integer.
114	instead, you can do this way:
115	i don't know if this is the problem, i always use prepare and execute .
116	it could just be for performance reasons.
120	there is no need to modify their individual apache configuration; just create a symlink .
121	this is my code to save the result of a select query into a text file as insert statement.i first extend the pdostatement class to add the custom method saveresultasinsertstatement :
122	then i extend the pdo class to set the attribute pdo::attr_statement_class
123	you use isset() on the $_cookie variable, so you must know how that works for checking the existence of a variable.
124	just apply that to $_session['id'] and so on and the errors will stop.
125	in your first run, $_session['id'] and $_session['rememberme'] won't be set.you have to check if they're set (just as you did with your cookie)
126	you need to also make sure you know what id was submitted:
127	of course, you're wide open to attacks like this as everyone else is saying.
129	also make sure your database connection is also in utf-8 charset.
130	your collecations in database/fields should also be set to utf-8, however if they are not this would probably not cause this sort of error.
131	this is bit of hacky, but will solve your issue.
132	considering you have encoded your object to json in $json variable you can use str_replace() method to replace the unwanted /u0000 i.e.
133	it is possible to re-write your function using a combination of:
134	are you looking at the source code when you have $_post['name'] set?
135	it looks like you are printing invalid username at the very top of the document, above the &lt;html&gt; tag, which is why it will not show up in the browser (because it's not valid html).
136	you should be storing the error message and printing it inside your html, or move the logic inside your html (surrounded by &lt;?php and ?&gt; tags)
137	this code uses alternate syntax for encapsulating html code.
138	i believe it is easier to read...
139	your posted dates are in invalid format for db use.
140	you need to convert them before use in db.
141	if the passed parameter is truly a null value, then the result of the case expression should be 0 because null will not be equal with any of the field values, so the else branch have to kick in.
142	there is no need to escape null values.
143	in order to appropriately pass null value from php to mysql using pdo see this so topic
144	if you want to use print_r() inside and echo, you have to tell print_r() to defer its output like this
145	the server will try to delete the database row using php and mysqli.
146	if successful or unsuccessful php echo and die a useful response for jquery to interpret.
147	this could simply be true and false
148	the ajax waits for that response and when it arrives would leave the checkbox as is, or switch it to what it was if the deletion failed.
149	you might like to confirm the action was successful.
150	so isn't here for people to write your code, you need to dig into this.
151	for a seasoned developer it's easy but if you don't try you won't learn.
152	feel free to ask further questions if you hit problems with programming.
153	add the the end of your code:
154	there are several errors in your code.
155	besides that "ton\ino\" is not a valid string and [^&lt;&gt;?=/\]+ is not a valid regular expression, you have probably some logical misunderstanding.
156	your regular expression [^&lt;&gt;?=/\\]+ (here corrected) will match if there is at least one character that is not &lt; , &gt; , ?
157	, = , / and \ .
158	so if there is at least one such character, preg_match returns 1 .
159	ton\ino" and ton?asd=3 do both contain at least one such character (the match is in both cases ton ).
160	a fix for this is to either use assertions for the start and end of the string ( ^ and $ ) to only allow legal characters for the whole string:
161	or to use a positive character class [&lt;&gt;?=/\\]+ to match the illegal characters and negate the returned expression of preg_match :
162	but it would be certainly better to use a whitelist instead of a blacklist.
164	please check this answer hope it will helps you.
165	there are a lot of mistakes in your code.
166	some of them are already noted.
167	you should use "===" and it's good to trip line-ending symbols.
168	but main problem as i see is that you check in for loop, but exiting after very first string that does not contain correct name instead of processing all of them.
169	you should check all logins and exit only if none of them matches.
170	so it should be something like that
171	next problem as i can see is that strpos is not good function to check if name exist as it's enough if entered string is only part of full string.for exapmle if i'm an evil student and entered (for example) just "e".
172	letter e contained in some of your students names, so it would be consedered fine.you should prevent that by comparing full string of extracting name part of string and comparing that part
173	the issue is that you are selecting from the database users where they have admin access already ie
174	the correct way to access the table data will be using either
175	so, this "works" the same way that hammering a screw in does.
176	it will get in there, but not really the way you want to do things.
177	don't use a script tag to trigger a php page .
178	your page will trigger, but it is the wrong tool to get the job done.
179	ajax was specifically made for this purpose while a script tag was meant for running scripts on the page.
180	it will try to fetch the contents of addtofavorites.php but it will expect javascript as the return.
181	and you won't be able to use $_post since you have no way to post data to the request.
182	if you are already using a javascript library, then it will have a nice ajax wrapper for you (i don't know of a single library off the top of my head that doesn't).
183	you can check out the api documentation for you given library for documentation on how to use the ajax functionality ( jquery , prototype.js , mootools , etc.
184	as an example, i will use jquery, because it is one of the most popular ones.
185	here is a request using jquery to your page (and what looks to be expected variables)
187	and the 3rd line is missing an opening bracket { though i'm not sure if that is just an artifact of your copy paste or not.
189	the events api for jquery will let you listen for events on objects.
190	if your mysql database is on the same server as your php script, then the usual logical approach is that your host is localhost .
191	the same as you used on your local computer -- because they're on the same machine.
192	however, if your mysql database is on another server seperate from your php scripts the you will need to access that server using a web address for your php to connect to yout mysql.
193	we can't tell you what that is, and your server hosts (of your mysql server) will be able to tell you and provide you with the correct login credentials.
194	i believe it would be more usual for mysql and php to be on the same disk, especially for non-professional systems as your appears to be, so then the issue would be:
206	references to $_files['file'] should have been $_files['userfile'] (this may be specific to your server, i'm not sure, but you initially use $_files['userfile'] ) $newfilename needed the $file_ext added to it added a check for move_uploaded_file() success changed $_request superglobal to $_post (you should not use $_request unless you have to) i took into account @lars' answer
207	if you would like to see the code behind, use the following link:
208	you must use the second parameter to true in your case, because you are handling the decoded json as an associative array rather than a php object.
210	by assigning the result to $num , you are not assigning the object $prep , but rather only the return value of the method call to execute() ( true ).
211	beyond that, your sql should execute correctly and the one column it returns should contain the count you need.
212	in this case (especially since you are calling fetchcolumn() with no argument) it doesn't matter, but for future readers, it is advisable to name the count() aggregate with an alias that can then be used in an associative or object fetch:
213	in your comment above that line, you say you want to set the variable to false, to "cancel the query" (which im interpretting as meaning to make the if statement here get skipped:
214	however, as the error message says, you cannot pass a boolean (instead of an array) to in_array , yet you set the value to false in order to skip it?
215	instead of using false in your ternary operator, use an empty array array() instead, since its empty, the value will not exist in it, and the condition will skip as expected, and it will be the correct data type.
216	if you really must use false in that variable, you need to check if its false first, something like this:
217	i think you are mixing up where to use single and double quotes..generally, for arrays/objects like $row, you get the value from the array with either no quotes, or single quotes, echo $row['klass']
218	if you want to copy over every individual field from $_post to $_session , you could use something like this:
219	for one thing, sql injections and html injections can (should) be protected in another way.
222	working with them will be a hell later.
223	other than these two injection attacks, what will your method do?
224	well, it can do some regexps for stuff like numbers, phone numbers, emails, names and dates.
225	unfortunately that's just a part of all the validations you will have to do.
226	other common cases that you cannot validate there are cross-checking of inputs (start date before end date), and checking that a value is in a list of allowed predefined values (say, for a &lt;select&gt; element).
227	and there are an infinite number of custom validation steps that you will have in your application as well.
228	is it worth to split up all validation in "generic type validation" and "custom rule validation"?
229	or perhaps this will just make a bigger mess.
230	remove the action and the method from the form.
231	use client-side ajax for the request.
232	note : you need to start session at top of file users.php as well.
233	here, you're evaluating an expression fine (although you really should use &amp;&amp; , not and ) and executing a sql query right, but you need to loop through the results of $query , you can't just set $_session['user'] = mysql_fetch_assoc($query); .
234	if you're having trouble validating whether people are submitting nothing for username and password, add this if statement to the top of your script:
235	there's nothing wrong with that code, but i'm not sure what its function is.
240	and your login.php ( if you use prepared statement and if the code is fixed, it would look like this ):
241	$student_name is undefined in your code to check the number of rows affected by the last sql statement we use rowcount()
242	if both fields empty then you write check for individual fields.if both fields empty then it will goes inside that condition.
243	and also you want to keep value if error in form then change $po to $_post['po'] and $address to $_post['address']
244	you still need to check $result to ensure query was successful, as well as $row to ensure there's entry for that user to get password's salf from, but i intentionally left it as your homework :)
245	i think you have it covered, just a simple change, remove the single quotes in the sql from around the sort and order variables
247	no if/else spaghetti easy to add more options in the future no need for mysql_real_escape_string due to pdo prepared statements checks that only allowed variables are accepted from $_post
248	but take into account that you can't explicitly destroy an object.
249	it will stay there, however if you unset the object and your script pushes php to the memory limits the objects not needed will be garbage collected.
250	i would go with unset() (as opposed to setting it to null) as it seams to have better performance (not tested but documented on one of the comments from the php official manual).
251	that said do keep in mind that php always destroys the objects as soon as the page is served.
252	so this should only be needed on really long loops and/or heavy intensive pages.
253	it is safer to use first one because you do more checks.
254	most of the time you can find the ip in remote_addr or http_x_forwarded_for if it's going throw proxy, but sometimes you can have in other variables because there is no standard for this.
255	personally i usually go with second approach because it's more clean, but if you want to make sure you have the ip use the first one.
256	also you don't need to use getenv() .
257	you can check directly in $_server
258	i think you have declared the url in wrong way check the below code
259	or if array_column is available, you could use it too:
261	then when they successfully log in, you can do this:
262	this will save the username to the session so you can then access the username of the user across your php pages for the duration of their session.
263	start up a php session for the logged in user carry the users id across the mini application so that it can later be inserted in another form and into the database without the user having to type it in themselves
269	you might want to also take a look at this related question php user authentication with sessions
270	you're passing in dates in 14 april, 2014 format, which corresponds to the php date() format code of d f, y .
271	you then build dates internally in your code in y-m-d format.
272	that means your in_array() call is literally trying to do
273	you are misunderstanding how in_array works.
274	you want to check the keys.
275	you can either use isset , or you can use array_key_exists (returns true if item exists with a value of null ).
276	if you want to show the exact message as fetched from the database, use &lt;pre&gt; tag!
278	it will save your script from sql injection too!
279	don't create sql statements by conca3.
280	you tenating string from user input.
281	it is vunerable to sql injection.
282	if you want more detailed review of your code you can post on codereview .
283	what are advantages of this approach?
284	you have all your roles listed in one table and because of foreign key you will preserve data integrity.
285	in column role of user table you will be able to store only role which is also stored in role table.
286	if you would try to remove role which is assigned still assigned to any user database wouldn't allow it.
287	this answer assumes your user could have only one role.
288	if you want to be able to assing multiple roles to your user, you would have to learn how to map many-to-many relationship in database.
289	something@something is not a valid email.
290	the function is working correctly, the email you've input is invalid.
291	echo $email_address = $_post['email']; you are using this value in your function.
292	in if condition you are using $_post['contact_email'] , please note : one is email and other is contact_email
293	you're checking to see if $_post['contact_email'] is empty but passing the value of $_post['email'] to $email_address , i'm assuming that contact_email is the one you want since that is the one you're checking to see if its empty or not.
294	so email will either be empty or something@something none of which is a valid email.
295	you have to add the comma to the date format and then use only first part of exploded array, so part of code is:
296	moreover you don't need this row, is useless.
297	delete it and use only variable $t.
298	when your app matures, you will separate your db layer from input processing level.
299	means db code will never know which variable intended to be int and which is not.
300	see - there is no trace nor of pdo, nor of sql.
301	all db interaction is done behind the scenes.
302	and obviously this db layer should be able to handle data properly regardless any prior validations.
303	which makes the latter just useless, if they done only for db.
304	frankly, it's db layer's business, how to format values, not programmer's
305	you can make your code as simple as
306	if you have your values already in array why bother with inserting variables directly at all?
307	you are apparently doing multiple inserts.
308	with placeholders for all values you can prepare your query once and then only execute it with new portions of data - so, actually use this neat side effect of prepared statements:
309	the first is that you're setting the value of $x to be the value in the key-value pair.
310	then you're unsetting a key that doesn't exist.
311	the value of $x is then changed to "eins" in the line $x=$arr[$x].
312	then you try to unset $x (which is invalid because you don't have an array entry with the key "eins"
313	then you can call this function to get the values (and remove the pair from the array) however you want.
314	the result of this is the array called translate array being an array with elements("eins","drei");
315	so, you can fix this problem just by adding single quotes
316	however, there is much bigger problem in this code.
318	just think what would happen if your password contains a single quote, such as test'123:
319	in ajax you should use $val = $_post["soc"] .
320	you can use ajax request as
321	you will just want to have the in the file you are linking too $projectid = $_get['projectid'];
322	all the other answers suggest explode and splitting lines, this is generally really slow.
323	you should use strpos and loop through the results.
324	then you can store the $json string to your member table.
325	when you want to fetch it from the database later, you have to json_decode it and put the function result in $_session['cart'] again.
326	as you see, i have put your $cart variable into the $_session .
327	thus you do not need to retrieve it again from the database when the user navigates on your site.
328	this will reduce load on the database as well as speed up your script.
330	to add a new product or to increase the quantity of an existing position simply do this:
331	you can also use empty($var) function, to test for empty values, just pay attention that empty will return true for values like :
332	isset($var) returns true if the variable is defined, regardless of the value (except null ).
333	in your case, it is defined but contains an empty string.
334	you'd want to use empty($var) which does not throw an exception if the variable is not defined and tests for actual content.
335	a lot of people here are saying the value of a $_get['para1'] is null but that is not the case.
336	there is a comment on the php.net $_get docs that provides a useful script to test this.
337	even though it does not appear para1 has a value set, it actually does.
338	the value is an empty string ( "" ).
339	even though this value is falsy, it is still a value and as such, isset() returns true.
340	you can use !empty() to return false on empty strings.
341	see a comparison of isset() empty() and is_null() here .
342	the value exists in the $_get array but his value is null,the function isset only evaluate if the value is initialized, not if the value is truthy.
343	if you want to know if the value is truthy, you can compare the array index with the == operator, like this var_dump($_get['para1'] == true)
345	if you explode the string with explode($delimiter, $string, [$limit]) , being in the case you had as an example "times" as the $delimiter, you can get an array with 5 and 8 as values.
346	sorry if i'm a little bit off base; i'm trying to understand how the variables are being used (as their initialization is not shown).
347	so $this->unreadthreadslist is an array where the indices (if value set to 1).
348	looking at what you're doing, here is an idea i had.
349	it does the same thing but just does some extra checking on $this->unreadthreadslist and it accesses the variable directly.
350	for the result of "fetchthreadssincedata($since)" and an array structure of
351	for the $this->unreadthreadslist where the first index is the board and the second index is the thread id.
352	as mentioned by kenb, we need to see the php code that you are using to process the form input.
353	if you are doing that in your code, don't .
354	this is not the proper way to process form input.
356	if you are using an older version of php where magic_quotes_gpc is on by default, then you should fix that.
357	read about 'disabling magic quotes' .
358	if you have no control over the code that is adding the slashes, then you can remove them with a simple php function called stripslashes .
359	what you want is to replace a literal \\n with a literal \n .
360	note that to specify a literal backslash it must be doubled; hence the triple backslash you see below.
361	...it could have been written differently.
362	the following code is easier to read, saves you having to escape the literal " , and doesn't require php to interpret the string.
363	i've given the above code as examples to explain how php interprets escapes sequences, but don't use them.
364	either avoid adding the slashes in the first place or strip them using the proper function, as explained in the first part of this answer.
365	i'm not sure what you are doing to add the literal \n between the lines.
366	we'd need to see your code.
367	but to remove it after the fact, you could try the following
368	of course, then you'd likely need to correct other c++ end-of-line sequences.
369	so it is better to not add it in the first place.
370	the form of the array is up to you, but 2 main ways are possible.
371	1) if the id is the same when the url is the same, just use id as the an array key when you store the link.
372	that way repeated links just overwrite themselves.
373	2) if you don't like that, and you know that the urls will be identical, use array_unique($links) to process the array you get from json_decode()
374	you could also save the $files variable in the $_session array.
375	then check the size of the $files and create links based on the size you want.
376	you will still have to use th bind_result after that, and forget about fetch_assoc .
377	a mysqli_stmt only has a fetch method:
378	also, for consistency, change mysqli_connection_error() to if ($mysqli-&gt;connect_error) or something.
380	according to the docs, you can't use this, as yourcommonsense pointed out to me, because it was broken until php 5.2.9 and 5.3.0. it's recommended to keep the procedural check to ensure compatibility.
381	what happens if you use the htmlentities(); method?
382	give the following code a try:
383	this is probably because those special characters, (in this one, the a with the roof ) aren't printed correctly when you print them as plain text.
384	you should print them as html entity.
385	the method used bellow does this automatically.
386	a very basic way is that you can declare a variable (for example $pattern )and store regular expressions (like patterns used commonly in attacks) in it, then use preg_match($pattern, $valuefromyourform) method to see if any of the passed values matches any of those expressions and then you can stop the execution.
387	you have to first get all the order id(s), then you have to loop it to get the desired total, or tax or discount.
388	all dates are in yyyy-mm-dd format.
389	print_r(array_keys(wc_get_order_statuses())); will output something like this:
390	you are using mysqli_connect and querying the table with mysql_query .
391	in order to avoid the warning, you need to change if(isset($_post["submit"])) to if(isset($_files['file']['tmp_name']))
392	your form looks ok and the uploads work for me just fine.
393	make sure you have enabled error reporting and that you have uploads enabled in your php.ini
394	when u use variables you can need to keep the quotes away so the second is the right one.
395	you dont need to use explode anymore cause you already have an array.
396	in your example it would be:
397	i understand you want to explode the response variable and assign each value to the corresponding variable.
398	you can achieve it this way instead of using list:
399	ok, first of all, you don't need to compare one by one record to find out the result you want, just use mysql where to condition your result.
400	other problem is about the structure, you can't add a &lt;p&gt; element into the &lt;table&gt; .
401	so, what i do is check is $_post['id'] set, and then check is this variable is an array.
402	then i escaped all values of $_post['id'] and after that implode the array to the sql.
403	note: in the sql, i selected only the field that your code requested.
404	first create a string of all the ids and use in(string of ids) in your query and store all the data corresponding to id in an array.
406	you are posting a comma separated list (i'd post an array but what the hell), so we're going to simply parse the string into integers and stick it in mysql's in clause
407	note: i didn't test the code so don't copy paste it, it most likely contains errors.
408	i wrote the answer to show how easy it is to use pdo and retrieve results easily, in one liner.
409	that happens by outputting $value .
410	so you should encode dangerous characters with htmlspecialchars :
411	(if you use a strange charset you need to specify the charset as parameter to htmlspecialchars .
412	but with common charsets such as utf-8 and most single byte ansi charsets this is not required)
413	you need to have a mysqli or pdo object somewhere to do databsse calls.
414	moreover, you should add some validation, if you use $model-&gt;attributes=$_post['contentform']; .
415	another variant is to use unsecure $model-&gt;setattributes($_post[contentform], false) where false tells yii to set all attributes, not only that are considered safe.
416	also, you don't need three redirects.
417	this is http redirect to other page.
418	this time, you just should just specify route to model view action and its parameter that is id, for example.
419	i hope this time i get what you want.
420	consider each line is a subarray, each book name is an index, you can use preg_match to split by 2 or more space, the first item of the returned array is the book name (the index), the other is the values in the subarray.
421	that is, you can write something like this:
422	and, remember that the code above is not written to be used in real life.
423	add error checking everywhere you can, never assume that the input file is always valid (as i had assumed in the code above).
424	maybe on some lines there are 8, 9, or more items, and on other ones there are only 6, 5 or less items.
425	in these case the code above will malfunction.
426	there is no secret or special query for junction tables.
427	the trick is efficiently determining which values to insert; for that, use mysql's last_insert_id() function, which you can access via the mysqli api as mysqli::$insert_id .
428	you must get the id immediately following the insert statement that generated it, in the same session.
429	you can save it in a user variable, perform the next insert, and then use the insert id from the second table along with the id saved from the first table as the parameters for your insert to the junction table.
431	you'll need to restructure you code to use either, and i recommend reading up a bit on them first.
432	see http://php.net/manual/en/mysqli.query.php and http://php.net/manual/en/class.pdo.php for further instructions on how to use them.
434	one thing both methods push heavily is prepared queries.
437	if you are selling only in the states as your question update is confirming:
438	manipulating an access database from php via odbc has some serious limitations that affect both pdo and the older odbc_exec methods.
439	if you are using a windows server and you absolutely must use an access database back-end (which is strongly discouraged ) i would recommend that you use ado under com_dotnet like this:
440	now as you said you've tried explode function then its been used on string and not an array.
441	what you can try over here is you can use array_column if php version &gt;= 5.5 like as
442	or for lower version you can simply use array_map like as
443	you should be getting a fatal error: can't use function return value in write context ... but you probably did something wrong with turning on error reporting and you're not getting any errors.
445	try $_server['http_host'] instead, it is set always as long as you force http 1.1
446	use "and" if you need all of conditions, not "or"
447	you shouldn't use $_server['php_self'] in that way.
448	then php_self print the complete url to your page.
449	its possible to inject code over your page to your site.
450	if you want to use it please escape all your output.
451	in your case its enough to use only ?page or write the complete url before the parameters.
452	$_cookie is populated with the data sent from the browser to the server.
454	simply use jquery and replace your php code with this :
455	content of showcookie.php will be your var_dump and the page will do exactly what you want, except that you have called an additional page with jquery.
456	warning: mysql_ finctions are deprecated as of php 5.5.0, and will be removed in the future.
457	instead, the mysqli or pdo_mysql extension should be used.
458	you are not checking if the mysql_query was successful or not.
459	if the query was unsuccessful mysql_query returns false.
460	try specifying the / path when you use the setcookie() function.
461	you should just put it into csv format, and make the first token the key and the second token the value.
463	each value in the array is the corresponding line in the file.
464	explode each line into an array based on the space delimiter.
465	this is the code you might be looking for:
466	now check this $_session["loggedin"]="success" on all your other pages to check whether the user is genuine.
467	that way you tell phpstorm, that the following variable (property) is of type pdo .
468	note that private here depends on your code, this is here just an example.
469	take a look at this to learn more about php documentation comments in phpstorm.
470	it seem's that's not the only thing you have to add in your source :
472	the &amp; is a special character in html which is used to escape special characters (for example to print &lt; in a html page you'd have to write &amp;lt;.
473	it also has a special meaning in urls as a separator for request variables (e.g.
474	http://example.com?foo=bar&amp;braz=omfg ) and thus appears a lot in websites.
475	the correct way to write an &amp; within html is &amp;amp;.
476	otherwise you'd have to fix the html somehow.
477	just running it through htmlentities as mentioned above will not work since it'll also escape all tag markers etc.
478	no it is not possible in php to add functionality to existing native classes.
479	unset() has nothing to do with autoloading, and will not interfer with it.
480	once the class is loaded using an autoloader, unset() ing an instance will not cause it to not be available any longer.
481	running the following demonstrates that unset should work ok with autoload.the test class didn't use __contruct().so it looks like something in marketplacewebservice_client mws is upsetting the apple cart.
482	first, you need to add a name attribute to the input box, as such:
483	second, you are setting the value of $username before anything has been posted.
484	this will result in an error, undefined variable: username , because $_post['username'] does not exist when you first load the page.
485	not until after you submit the form will it have a value.
486	so, you need to check if the form has been submitted first:
487	here is a complete and working version of your program:
488	i presume that the default will be a valid value, rather than something like "select product".
489	if this is so, then you can just run the function immediately and it will pick up the values currently on the page.
490	you can do this with trigger('change') or the shorthand form change() :
491	you should know what is exactly raw post data: $_post can be said as and outcome after splitting the $http_raw_post_data , php splits the raw post data and formats in the way we see it in the $_post
492	most probably you include some other things (elements) from the post in your *.jpg data.
493	make sure you include only raw and valid *.jpg picture information, not other elements.
494	also keep in mind that $http_raw_post_data is not available with form's type enctype="multipart/form-data" .
497	you dont have too keep an eye on the right field order every field value becomes ' around them you have less code to write field count and order can change
498	if you want to add the ampersand, you can use array_pop($array) which will remove the last element.
499	just check that the array is at least 3 in length.
500	it's actually returning a value of true for array_walk_recursive .
501	if you look at the function's documentation , you'll see that what this method is doing is calling the function _output for each item and key in the object.
502	you should also have some code that looks similar to this, i would imagine, to get it to work correctly:
503	where _output is called because that is the stringified name that you gave in the array_walk_recursive function.
504	that should print your values to the screen.
505	it seems that i'm not actually answering what you were originally wanting to do, though.
506	if you're wanting to apply a function to every element of an array, i would suggest that you look at array_map .
507	you can use array_map like this:
508	ultimately, if the recursion is something that you desire, you could probably do something like this:
509	if you problem is that you have trouble finding out which checkboxes have been checked, and which one have not, here are two solutions :
510	once the form has been submitted, in your php code, you can do :
511	the variable $checked will be true if the user checked the checkbox check1 .
512	(beware, it does not mean that its value is value1 )
513	you can also add a hidden field named just like your checkbox, that will act as a default value :
516	array_pluck works with an array of arrays, an array of objects, or even a laravel collection (like the results of a database query).
517	in the end, your code can probably boil down to something like:
518	however the switch is not really adapted to your code as you have multiple conditions in your if .
519	since the second condition seems to be always the same, you could simply put the switch in the if of the second condition or use the clause inside each case but this would be redundant code.
520	there's your problem - you're trying to do two sql statements with one call, and mysql_query won't let you do that.
521	it should work if you do two separate queries.
524	pdo handles this for you fantastically well by allowing you to use placeholders:
525	using pdo, your final code needs to prepare the query, bind a parameter to it, execute it and then get the result (checking if there actually is a result using pdo::rowcount() ) something like this:
526	it's not clear how much of the above you currently have as you only give one or two line snippets here and there, but this should give a good outline of what you need to do.
527	add $database-&gt;setattribute(pdo::attr_errmode, pdo::errmode_exception); right after the connection is opened, including, and at the top of your file(s):
529	change to mysqli or pdo and make sure your safely escaped!
530	in order to make it work, you must add $conn = database::getinstance() into your selectguildinfo (assuming $conn from your working example is instance of database).
532	here is a way to use the laravel query builder for making the query, but to then use the underlying pdo fetch to loop over the record set which i believe will solve your problem - running one query and looping the record set so you don't run out of memory on 30k records.
533	this approach will use all the config stuff you setup in laravel so you don't have to config pdo separately.
535	you are messing up with single quotes and double quotes and missing them in many places.also, as i already pointed out in the comments, it is hard to debug by guessing.
536	you should echo the mysql error you get when running the query.
537	what you echo by now is that the after running the query you don't get an array of results: but this is caused by the query to have an issue.
538	many times it is just a matter of reading the error provided to understand what is going wrong.
539	finally: you can get this also because you don't have any error but you are just retrieving an empty set of results from the query (no record satisfy your query)change this query to this:
541	also consider moving to pdo instead of mysqli.
542	upon failure, mysqli_query will return false rather than a mysqli_result and, if you then attempt to use that boolean false value in something like mysqli_num_rows , that's exactly the error you'll see.
543	as a first point, you should always check the return value of functions that can fail, that's just good practice.
544	continuing blindly and hoping for the best is not really a way to produce robust code.
545	having said that, you then have to move on to why the query has failed.
546	a large proportion of sql problems become obvious if you just print out the query before trying to execute it.
547	it looks like you've eventually done this since one of your comments states that your query is:
548	this is not a valid sql statement, hence the problem.
549	now, despite the fact it appears to be using a different table name (an earlier edit of your question did have a matching table name), it corresponds closely to your $sql3 variable 1 :
550	that's where you need to concentrate your effort, to find out exactly why they aren't set.
551	for a start, it seems rather unwise to be using $row[anything] after the loop processing the rows has finished.
552	it may well be that you need to move that code to within the loop to get it working but, without more information and context, that's really just conjecture (though educated conjecture).
553	and the problem is clearly in get and post .
554	in this particular case , i would recommend , using $_request in place of all post and get.
555	so your query gets all params , and your code goes perfect.
570	so if your color.choices file has these options below.
571	then your array will start at 0,1,2 as i used above for your colors e.g.
572	$contents[0] would be the colors line.
573	$content[1] would be the shape line.
574	and then you would still have to explode them into a new var.
575	what i would do is make it an ini file.
576	you are already using the file in the form of an ini so why not make it easier to work with the values?
577	using an ini file is better because then you can use the key name without having to know what order they are in the file.
578	once parsed, it's already in the form of an array so you can just call $attr["color"] or $attr["shape"] etc and it doesn't matter what order they are in the color_choice.ini file.
579	you can add as many attributes as you want.
580	notice also the form variable changes as well for $color .
581	old question but you can get the get variables the same way before with $_get, but you have to still match the route.
582	i.e., if the route isn't matched your script doesn't proceed.
583	would be (you can use just get or post if you like) :
584	after you can do &lt;?php echo $_get['redirect'] ?&gt; and get:
585	that's a very good question, but there is one wrong premise at the very beginning: you are taking error reporting for pdo separated from site-wide error reporting.
586	which makes very little sense: pdo errors in every way are the same as other errors - filesystem errors, http errors, and so on.
587	thus, there is no reason in establishing pdo-only error reporting.
588	all you need is to properly set site-wide error reporting.
589	there is also one wrong assumption regarding php.ini inaccessibility: you can always set any configuration directive using ini_set() function.
590	thus, here is not a single reason in setting error_reporting to disastrous level of 0.
591	to answer the rest of your questions all you need is a little common sense.
592	a custom error screen is a very different matter and your code is especially bad with it.
593	neither it should be a 404 error nor an http redirect have to be used (thats very bad for seo).
594	to create a custom error page you have to use either your web-server features (preferred) or an error handler in php script.
595	when encountering a fatal error (and uncaught exception is one), php responds not with 200 ok http status but with 5xx status.
596	and every web-server can catch this status and show an according error page.
597	or you can set up a custom error handler in php which would handle all php errors as well, an example can be seen in the article i wrote on the matter: the (im)proper use of try..catch.
598	you want to use a get variable.
599	please note, though, that this code is vulnerable to sql injection.
600	as magnus eriksson noted in the comments, you can negate this by either typecasting $_get['id'] to the int type, or by using prepared statements:
602	so $_post['monday'] is just an array of all the checked boxes.
603	the indexes of these parameters won't match up with the text boxes.
604	when you add a new row, you need to increment the index.
605	in the php, you then need to check whether the parameter is set.
606	well a php return won't actually return to the jquery.
607	it would be lovely if it did, but what's really happening is that the jquery is asking your server for a page, and php is making that page.
608	what you should do is return a json object with true or false by printing that to the page.
609	then the jquery can look for that and react.
610	you only run urldecode over data is url encoded.
611	php will have decoded it before populating $_post , so you certainly shouldn't be using that.
612	(you might have to if you are dealing with double-encoded data, but the right solution there should be to not double encode the data).
614	it is useful if you have a free form input in which rogue spaces might be typed.
615	you will need to do further sanity checking afterwards.
616	and as amal already said update your code to pdo or mysqli
617	"back in the day, many many moons ago, wordpress blindly followed php in accepting that all of the superglobal values should be slashed.php later did a reversal on the idea to something more sane which you see today, but the damage was done, wordpress as an application had existed for long enough, and there were enough existing plugins and themes relying upon wordpress creating a sane single environment that wordpress also changing would cause irreparable damage to those sites - introduce security vulnerabilities, mangle content, and a bunch of other fun things.
618	https://core.trac.wordpress.org/ticket/18322 is our ticket for tracking this and getting to something more sane - in the shortterm (and longer term) we'd request that if you're accessing $_post variables you do it as such: $myvar = wp_unslash( $_post['variable'] ); so that one day, we'll be able to have $_post as an unslashed array.
619	i should also add - i expect you're doing this because you're trying to use an api endpoint for something, i'd highly suggest switching to using the rest api introduced with wordpress 4.7 instead, as it allows us to offer much more consistent experience to developers. "
621	if you read the $mysqli->escape_string description you will learn that his function has nothing to do with security risks.
622	neither trim is security related stripslashes makes no sense at all and may rathe spoil your data than do anything useful doing strip_tags and htmlspecialchars at the same time makes no sense.
623	choose one if you skip strip_tags but keep htmlspecialchars when trying to display html you'll be surprised
624	if your ultimate goal is to prevent security risks and adopt best practices, then definitly you should have a look to php data objects (pdo) .
625	there are multiple advantages when using pdo.
626	first you do not need to escape your parameters or your full sql query because, with pdo, you will be using prepared statements.
627	if that's not what you want you need to enclose what you want done first in () e.g.
628	$count : 0) is probably what you need.
629	i am still not completely sure what you would like to archive but i wrote this little script that does what you named in your examples:
630	you may use a global variable .
631	add global $targetmessage; at the beginning of both functions.
632	take care of side-effects: that variable will be also accessible from everywhere else.
633	you should actually use a parameter instead of a global variable: function func_readmsg($targetmessage) and function func_delmsg($targetmessage) , then pass the value of $targetmessage as a parameter when you call the functions.
639	in order to sort by date, you can use the php_function array_multisort() .
640	there is a good example on that page that i think shows what you need.
641	i'll try to provide a better example using your data.
642	suppose after looping through your albums you end up with an array $myalbums that looks like this:
643	in order to sort this by date, you could do the following (taken from the example on the php page)
644	then you can print_r($myalbums); and you should see that it is sorted.
645	you might have to change the sort_desc flag depending on what formate your dates are in.
646	i can't really explain how this works, because i'm still trying to figure it out myself... but i think it is what you need.
648	the browser sends the value of radio buttons only when they are checked.
649	also, each radio button must have the same name (if you want to user to be able to check only one of them).
650	you could use raii or a factory class+reference counting to manage the statements.
651	that way you don't need to explicitly check when it's time to close anything.
652	without seeing the details of how you're using your wrapper, it's hard to go into detail.
653	objective-c's accessor pattern may also be of use, which would look something like:
655	to solve this follow the below things :
656	you are mixing pdo and mysql extension.
657	you don't need to do the select because you already have the username, and you should be checking for the $_session['username'] not if a submit button is set.
658	and your open to sql injection for usernames that are actually sql query's, or at minimum a username with a ' in it will break your query.
660	they are no longer maintained and are officially deprecated .
661	learn about prepared statements instead, and use pdo or mysqli - this article will help you decide which.
662	if you choose pdo, here is a good tutorial .
663	one caveat of this approach is if any of the ten node items are missing, it waits for next corresponding item to complete its 10 batch set, and hence misaligning rows (e.g., 115ok, 115iok, 116fr, 115value).
664	additional logic on the keys can help in this case.
665	what is the ';' at the end of your statement?
666	you are giving mysqli an invalid query and so it is not creating an object for you.
667	the problem is not the fetch_object, but the prepare statement.remove the ';' and try again.
668	it should work like a charm.
669	you can give a name and a value to each of your buttons.
670	it will then show up under $_post['submit']
671	echo $_post['submit_btn']; will give you the value of which submit button is clicked
673	then you wouldn't need to loop
674	if you echo $_get['act'] you will get vw - it does not work in the other way.
675	if the test for isset($_post['submit']) is failing it either means that the submit param is not provided, or it's present with a null value.
676	this is a hazard of using isset rather than a more accurate check like array_key_exists('submit', $_post) .
677	also why check for the presence of that param so late?
678	check it earlier so you can skip all that other phpmailer code that's not going to be used.
679	:$str1) is actually attempting to match 'hello' in the string.
680	:) is a non-capturing subpattern, which doesn't mean that anything in the result doesn't get returned (which seems to be how you're trying to use it), but that the subpattern does not return as its own entry in the array of matches.
681	\w+\d+\w+ means "one or more word characters, followed by one or more digit, followed by one or more word character", where a 'word' character is a letter, a number or an underscore.
682	this is not what you say you're trying to match.
683	note that i've replaced $str1 with ' ' in the string rather than removing it, since if $str was, for example, "applehellobanana", you would want to return 'apple' and 'banana' as separate matches, rather than just matching 'applebanana'.
684	if you want to return the whole thing as a single string, which appears to be your intention then you'll need to implode your matches with something along the lines of
685	then if you wanted to replace that, you could do this using preg_replace :
686	i am sure the regex could be refined to avoid having to add spaces before and after " restaurant " like i do in this example, but this is the basic concept i believe you are looking for.
687	i don't see what's wrong with your code.
689	even if you use a dynamic ip, it should not change between two requests (it usually changes when you unplug your network cable or disconnect your wifi card).
690	try using mysql_real_escape_string() instead of addslashes() .
691	for debugging, you might calculate the md5() of the string before inserting into db and then after retrieving it.
692	i bet you're going to get different hashes, meaning you're not inserting it correctly and your binary data gets corrupted when inserted into the db.
693	in order to create the mysql, mysqli and pdo extensions, php must be compiled against a mysql interface library.
694	you can't simply swap out that underlying library.
695	in order to use another library, like the one provided by mysql, you have to recompile php against it.
696	the reason for the switch to the native library is that the mysql-provided library is released under the gpl.
697	the php license is not compatible with the gpl, so distributing php binaries compiled against gpl code is pretty high up on the thou shalt not list.
698	you can thank and/or curse the mysql folks for this bit of utter stupidity.
699	only idiots and evil people release library code under the gpl.
700	if you can't recompile, you're probably out of luck.
701	keep in mind that microsoft offers vc9 (visual studio 2008) at no cost , so you should be able to perform the recompile, if needed.
702	you might want to explore other options for a secure connection to your mysql server.
703	you should also consider openvpn , a vpn solution built on top of ssl/tls.
704	you can use this to establish a secure connection between the two machines without needing to worry about protocol-level security.
705	for this situation, if you need to insert values for undefined fields, use empty() .
707	there are many questions about this, for example look here .
708	2) don't use the @ before file_get_contents this will suppress error (warning in this case) when your file request fails.
709	because of that - json_encode will omit the keys in the first array (and keep it as array object), while in the second array - the json_encode will look at your array as object and will keep the keys.
711	if you want to decode html entities you could first use php's built-in html_​entity_​decode() function in autocomplete.php :
712	take a look at jqueryui's doc , you can use this to build your own &lt;li&gt; element, so that would be something like :
713	the php code you put in your files is not executed at javascript run time, it is executed even before the page gets sent to the client.
714	so you can't access $_session from anywhere within your content , you need to do that from wordpress's code .
715	usually this is done via a plugin .
716	you need to pass your javascript variables to a server side php .
717	as @grasshopper said, the best (or at least most maintainable way) is through ajax:
718	on the server, you need to create a specific file to accept the incoming variables (it would be best if you did this from a plugin, in order not to add files outside the installation: such practices are frowned upon by security scanners such as wordfence).
719	this here below is a butcher's solution.
720	an even more butcherful solution is to add the function definition above within wp-config.php itself .
721	then it will be available everywhere in wordpress.
722	provided you have access to wp-config.php .
723	also, backup wp-config first and use a full ftp client to do it; do not use a wordpress plugin to edit it , since if wp-config crashes, the plugin may crash too... and you'll find yourself in a my-can-opener-is-locked-within-a-can situation.
724	if you don't feel comfortable with some of the above, it's best if you do nothing.
725	or practice first on an expendable wordpress installation that you can reinstall easily.
726	yes pdo can fetch two (or more) rowsets, as long as the database you are using supports it.
727	i think ms sql server and mysql both support this functionality, but at the time of writing sqlite does not.
728	use parenthesis for a criterion, so if(...) you should use $_get["agm"] instead of ["agm"]
729	1st parameter of array_diff : the trimmed version of $my_array .
730	using array_map , surrounding whitespace is trimmed from every element via the trim function.
731	it is good to use the trimmed version in case an element contains a string that is nothing but whitespace (i.e.
732	tabs, spaces), which i assume would also want to be removed.
733	you could just as easily use $my_array for the 1st parameter if you don't want to trim the elements.
734	2nd parameter of array_diff : an array of items that you would like to remove from $my_array .
735	output: an array of elements that are contained in the 1st array that are not also contained in the 2nd array.
736	in this case, because '' , null , and false are within the 2nd array, they can never be returned by array_diff .
737	it turns out you don't need to have null and false in the 2nd array.
738	instead you can just have '' , and it will work the same way:
739	if you are going to use all those fields you should test that they all exist rather than just the first one.
740	remember isset() can test more than one field at a time, like this :
741	the mapping can be done by iterating over the items within the xml and storing the values into the appropriate place in the new array (i named it $build ):
742	the array_map call is done at the end to convert the item/title keys into numerical ones.
743	you don't need json encode after the loop as things are.
744	your array values are already json strings, which means that using json_encode will only escape the strings!
745	and the end of the loop would look like this instead:
746	however, to be quite honest, cakephp uses the $_session object internally and just overrides the default session handlers.
747	the only thing -&gt;write does is parse a dot notated set path (which would look like foo.bar.x ) which you are not doing.
748	and echo debug information if you are watching particular values.
749	it shouldn't hurt if you modify $_session directly.
750	your are overwriting the last product in the cart.
751	if you need multiple conditions, just separate them with and :
752	no need to use where again.
753	just like you wouldn't need to use if() more than once if you were writing a complex condition in php.
754	ps: this isn't directly related to your question, but you should get into the habit of not putting $_post or $_get variables directly into your sql queries.
755	it's a good way to get hacked!
756	ask your tutor about "sql injection," or read my presentation sql injection myths and fallacies .
757	here's how i would write your query using mysqli.
762	you have an anchor tag on which you have an onclick event.
763	onclick event when fired will send an ajax request to testajax.php?
764	however since you haven't prevented default behaviour of clicking an anchor tag, as soon as this ajax request is sent, page will redirect to ?process and where ofcourse you will have nothing to receive as $_get parameters.
765	assuming you have your ajax going right, add return false; at the end of your go() function.
766	also since on server side you have a clause like if(isset($_get['process'])) { , you should also update your ajax url to something like: testajax.php?process
767	create an array of the exploded values and array_unique() that:
768	explode returns an array, so $line is an array, not an element of the array $line = explode(...) gets executed again and again every time the while condition is evaluated, meaning on every single loop iteration you're exploding the string again and assigning a fresh array to $line
769	removing the &amp; sign alone would generate notice: undefined offset: 4 in what i think you should do is remove the &amp; and suppress any e_notice error with @ ;
770	lastly you can just override php isset function on your own see override_function
771	first, you are mixing your procedural and your object oriented mysqli.
772	second, you have no error checking.
773	without knowing what your variables contain i suggest you try something like this:
775	the issue was within the sha1 talking to the database, where by sha1 is a (40) strong and the database was set to (20).
776	an annoying issue but it has not been resolved.
777	var_dump was used to talk to the database to prove that the information being entered was correct, it did however show that the password held in the database was (20) and the password entered for login was (40).
778	first, it would be easier to use an array for specifying multiple ids in the url:
779	this way, in your php code $_get['var'] will be an array and will contain all values specified in the url.
780	next, you have to make sure all array items (the ids) are numeric.
781	there are many solutions for this, for example skipping non-numeric values:
782	finally, you have to use where in in your query (and verify of course if there are actually some values in the $ids array before executing the sql query):
783	this won't affect the entities involved in the markup ( * and ` ), and you can also set the double_encode flag to false ensure that already-encoded content (e.g.
784	&amp; characters in links) does not get encoded twice -- see the php manual for the settings :
785	on another note, you don't need to use preg_replace_callback for your substitutions; you can use the captured text in the replacement expression.
786	here's an example from the code formatting regex:
787	as noted in my comment, &lt;b&gt; and &lt;i&gt; are deprecated; if you are using them to place emphasis on text, you could replace them with &lt;strong&gt; and &lt;em&gt; respectively; if the markup is solely for presentation, it is better to enclose the text in a &lt;span&gt; element and give it a class which has bold or italic formatting.
788	a quick explanation of how preg_replace works: when you use parentheses in a regular expression, you capture the matter within those parentheses to the special variables $1, $2, $3, etc.
789	the contents of the first set of parentheses are in $1 , the contents of the second set in $2 , and so on.
790	for example, take this regular expression:
791	and the input string bread and butter , bread matches the expression in the first set of parens and butter matches the expression in the second set; $1 would be set to bread and $2 to butter.
792	this becomes useful when we do preg_replace , as we can use $1 and $2 in the replacement string:
793	in the replacements in your code, the text between the delimiters ( * and ` ) needs to be kept, so it is captured in parentheses; the delimiters themselves are not needed, so they aren't in parentheses.
800	this request is very weak and can be subject to sql injection.
801	here how to pass variables to your query:
802	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i wouldn't use `mysql_` methods, their getting deprecated.it its advisable to use pdo or mysqli.also i would be careful with your '$sql' variable there , its very vulnerable to injection, imagine if some one enters this :" ' or 1 = '1 " (without the double quotes) in your password field.
803	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;you can check this post for sql injection prevention : how to prevent sql injection in php?
805	you might also want to check the manuals for pdo and mysqli:
806	if you are sending plain text mails, there is no escaping for plain text.
807	you are using a custom mail header from .
808	from is used in spam filters.
809	if i would enter my mail address, and you are sending this mail with from: my@mail , you are impersonating my own email server.
810	spam used to use this to hide the real source, and to redirect complaints and error feedback to the unhappy guy behind that mail address.
811	because of this today there are mechanisms that will prevent such abuse.
812	so just do not pretend i am sending this mail - you do.
813	if you want to be able to answer me with a click on the reply button, use the reply-to header, but always use from: dont-answer@yourwebsite.example .
814	additionally, these custom headers are the entry point for bad things.
815	make sure you are only adding mail addresses.
816	make sure you do not add any line feed characters.
817	these would make the mailserver think that there is a new header coming up, and this might lead to mail header injection.
818	as you can read from array_multisort documentation, only associative (string) keys are preserved.
821	:)and as others also said; you should get familiar with how to prevent sql injections.
822	the differences between isset and empty are subtle but important.
823	they are most relevant when used alone.
824	if you are checking that a variable exists and is a truethy value (e.g.
825	any string that is not all spaces or 0s) you can use either interchangeably.
829	avoid writing code that issues notices/warnings that you are ignoring.
830	there is no case where one will act differently than the other, neither will issue a notice if the variable is undefined, and no measurable difference in performance between the two.
831	$_post['f_child_cat'] is not defined check if the value is present first before using it.
833	it means that $_post['f_child_cat'] is not defined (doesn't exist).
835	since this is part of your query, i would recommend that you wrap your query like so:
836	or you can group your related fields directly by changing the structure:
837	firstly, for signing in a user, you are going to want to use the post action method as it hides the information from the url.
838	the get method contains the information in the url and can be easy copied and hacked.
839	what is happening is that your value v is not the same as the implied value of $_post['v'] .
840	as stated by tim, there is no $v = statement so in effect your echo output is outputting nothing multiplied by 2.
841	i have used is_numeric as you are using the echo to produce a value x 2 so makes more sense to check v is a number rather than a string.
842	ok, first stop then is to see what is on line 11?
843	if so then you can work back to the source of the cause - replace the line 11 (comment it out, don't delete it) with something like:
844	if you do not see a value for 'v' (and i guess you probably won't) then that means this value wasn't set in the previous html page so go back and check that your form submits an input such as:
845	can you confirm your post is as intended, and that you do want post which means you need to submit the form rather than get or another method, such as index.php?v=10 ?
846	php does have notice statements but they're only notices, they are not errors or even warnings, it's just php telling you what's going on.
847	this will not break your code, but it could be nice to add this line above your if statement:
848	what's actually happening with that error is that your variable $v isn't being initialized because the code has not enter the if condition.
849	you're assuming that the condition is_numeric($_post..) is true but it might not be, which means that the variable $v is never initialized.
850	therefore is pretty normal the error you are having.
851	the above code might be improved.
852	a better code/logic would be you to set up the default value of the variable in case the is_numeric returns false.
853	i would like to thank everybody who participated this question, the answer is the following: in reality memcache (not memcache d ) as session handler supports comma separated servers as the session.save_path , moreover it supports failover.
854	the error mentioned above session start failed.
855	original message: session_start(): server 10.0.10.111 (tcp 11211) failed with: connection refused (111) had only 8th (notice) level.
856	in fact engine just informs you about the fact that one of the servers is unavailable (which is logical, as otherwise how will you know?)
857	and then successfully connects to the second server and using it.
858	i suggest ditching all of that and using prepared statements in combination with pdo.
859	your code, as it stands, is vulnerable to a sql-injection attack.
860	you probably have a newline ( \n or \r\n ) at the end of your file ( $myfile ).
861	so myarray[1] actually looks like "1000\n" .
862	this way, every html line has it's separate $htmlarr[] value.
863	moreover, if you need your html to be "pretty print", you can simply have some sort of method that will indent your html by prepending whitespaces at the beginning of every array elements depending on somme rule set.
864	for example, if we have :
865	after the question edit by felix kling, i realize that this has nothing to do with the question.
866	sorry about that :) thanks though for the clarification.
867	because you get an error when decoding a json based message ive posted an way to throw an exception when it happens so you can handle the error on a better way.
869	in order to delete an index in an array you use the unset() function.because you have so few values you could just loop through the array and look for the array key for an item id:
870	you could also run a urlencode() after all of your functions to the final product just to be on the safe side since you're trying to use dashes instead of %20 for spaces
871	data (d=) is exploded on the slashes and passed as an array to every controller method.autoloading (via spl_autoload_register()) is used to call the class (c=) and then the method in that class (m=).
872	also, it sounds like you're either not setting the action on your form or you're deliberately setting the action to get.
873	as a general rule, action should be post to keep the urls sane.
874	those can be get with various advantages.
875	the problem is that your &lt;?php echo $_session['xnombre'];?&gt; code is generated on the server before the javascript even gets sent to your browser.
876	the code inbetween the php &lt;?
877	and ?&gt; tags never even get sent to the client at all - it's completely processed by the server.
878	however, the javascript is of course processed on the client.
879	if you view the webpage source and look at your javascript, you'll see what i mean.
880	the problem is you are using the post method to submit the form values so when ever you tries to refresh the browser asks you whether to send the form information or not it is the default behavior of the browser to tackle the posted information, the alternate solution for your problem is you can use the get method like in form attribute method='get' what it does it will append all the information of form in the url which we call the query string and in php code you are accessing the form values in $_post but when using get method the form values will now appear in the $_get method these methods are called request method and are php's global variables, now when you try to refresh it will not ask you to resend information because the information now resides in the url
881	instead of using array_unique() you can build a unique array straight away:
882	the + operator adds new values to the array if their corresponding keys don't already exist.
883	in the end, you can find the answer by observing the array keys:
884	in general, there is nothing essentially special in calling stored procedures with pdo.
885	the only issue may affect only following queries, but not the current one.
886	so, your problem is not related to stored procedures, but to the basic pdo syntax only: you are using wrong code to get the records.
887	in case it is not the issue but a copy/paste problem, and to help further visitors, here is a short check-list for the pdo debugging:
888	step 2. make sure that you can see all php errors.
889	step 4. run your query without prepared statements, using pdo::query() , with values written by hand:
890	step 5. run with a prepared statement but in a simplified form, to eliminate all possible spelling issues:
891	so you're basically looking for something like this.
892	the reason i don't use stristr is because it returns the part of the string following the part you were looking for.
893	in this case, you don't want it.
894	so why force the parser to make a copy of the string, cut it in parts, give it back to you... for you to just... throw it away without even looking at it.
895	instead, it's easier to use strpos , which returns the position where it found the string.
896	if it didn't find it, it returns false .
897	so a quick check for "is not false", is enough.
898	in case you really really need a case-insensitive check, you can use stripos .
899	prepare is a pdo method, not a method in your dbengine class.
900	you can define the method like this:
901	you might want to use mysqli or pdo 's prepared queries for what you want to do.
902	try this hope it will help you out.
903	here we are using array_map for gathering locations.
904	you can use an create_function or an anonymous function (php 5.3 >=)
905	most languages provide these types of functions (look for packages like collection, iterator, or enumeration/enumerable)...some provide more functions than others and you will commonly see that the functions are named differently across languages (i.e.
906	collect == map, reduce == fold).
907	if a function doesn't exist in your language, you can create it from the ones that do exist.
908	as for your test case...we can use array_reduce to implement pluck .
909	the first version i posted relied on array_map ; however, i agree with @salathe that array_reduce is more succinct for this task; array_map is an ok option, but you end up having to do more work in the end.
910	array_reduce can look a bit odd at first, but if the callback is neatly organized, all is well.
911	a less naive pluck would also check to see if it can "call" (a function/method) on the iterated value.
912	in the naive implementation below, we assume the structure to be a hash (associative array).
913	here we choose a version of "pluck" to call based on the version of php we are running.
914	if you run the entire script, you should get the correct answer no matter what version you are on.
915	notice there is no ending '?>'.
916	that is because it isn't needed.
917	more good can come of leaving it off than from keeping it around.
918	fwiw, it looks like this is being added to php 5.5 as array_column .
919	where is lisp when you need it?
920	actually in php it is pretty easy to manage too.
921	just use the array_map function as illustrated below.
922	if you have dynamic columns for which you are substituting $x , do not enclose $x in quotes:
923	the proper way to parse a query string in php is with parse_str() , rather than attempting to explode() on the &amp; .
924	however, since you are grabbing the whole query string, and not filtering any specific variables, why not just use $_get ?
925	to help you understand why your code isn't working, i'll modify it here.
926	however, this is not the preferred method of performing this task.
927	using foreach($_get) as above is much better.
928	indenting the loop properly will help reveal the problem:
929	you are getting back multiple results.
930	the result of the select as well as the result of the call.
931	you can use filter_var and sanitize the string to only include integers.
932	you can use a regular expression to match only integers.
933	the output of from_addr will be there if you are receiving results from your query.
934	it appears that you are using this field for email, so i would not recommend saving to the database with htmlspecialchars , as you want the emails to send properly.
935	if the above didn't answer your question fully, and you wish to query the database for an email rather than the "send name", i would recommend using like :
936	you should validate $_get['paxid'] and then you can access the element in the array by simply calling:
937	just remember to validate and filter $_get['paxid'] and to check if the key exists in the array.
938	it is a perfectly valid query (in the sense that mysql will interpret and execute it perfectly) but this will lead to a "cannot access empty property" fatal error when pdo tries to fetch the data and fetchmode is set to pdo::fetch_obj.
939	it looks like things have changed in the current version of codeigniter (2.0.0)...
940	the semi-colon in the following is making your loop stop and is an end of statement character.
941	also the quoted zero is interpreted as a string, so you need to remove it.
942	add error reporting to the top of your file(s) right after your opening php tag for example &lt;?php error_reporting(e_all); ini_set('display_errors', 1); then the rest of your code, to see if it yields anything, as well as or die(mysqli_error($con)) to mysqli_query() .
943	you need to use isset() or !empty() against your post arrays.
944	you also didn't include a submit button and is unknown if you are using one.
945	do not use header('location: ./user'); in your ajax.
946	you have some duplicated code, like $result = mysqli_query($conn, "select * from users where username = '$user'"); why do not you call it only once?
948	you are set the $username from $_post and after that you've checked ths isset($_post) , why is it?
949	anyway, you need to echo a success / failed, or a json object with error and message keys.
950	seems like you just haven't pdo extension because syntax is right.on ubuntu/debian you should be able to install the necessary pdo parts from apt using
951	if $db in your code snippet is an instance of pdo, then you could use debugdumpparams() to see the sql
953	your $uploadpriv_ass array's last key is 4, and you're passing the value of 5 to array_key_exists .
954	since $uploadpriv_ass[5] is not set, you're not getting the "t".
955	read the php documentation on strings .
957	btw, i recommend you refactor your session variable.
958	instead of having separate arrays for each property like firstname , lastname , departureseat , make it an array of associative arrays.
959	this will allow you to use foreach ($_session['passengers'] as $p) .
960	i think i've got a more complete solution for youthis is a single page php script it will do the following;
961	show the form for submission if the user request value isn't present (with the embedded user id value) parse and output the ratings from the form accepts the userid value as a variable when calling the displayform function
962	i've not done much formatting or anything to pretty it up and bear in mind you should wrap these requests in filters or htmlentities or both to prevent attacks
963	now, assuming i have done everything correctly (including counting out the plethora of post data you have), the query should execute, and you should get the message:
964	if anything goes wrong, or you get any errors, leave it in the comments.
965	to find out more about prepared statements and mysqli itself, have a look at the php manual: http://php.net/manual/en/mysqli.prepare.php
966	the error you're getting is because $_files['uploadfilefield'] is not set.
967	therefore $uploadtmp is never set on your code, and when you get to this line: if(!$uploadtmp) - it fails ( $uploadtmp is indeed undefined at this point).
968	you may want to change it to if (!isset($uploadtmp)) .
970	your last condition (empty($_get['lang']) || !isset($_get['lang'])) is redundant itself, since empty already checks if the function is set, as you can read here .
971	also, it is redundant with the first condition.
972	moreover, you are lacking a condition to determine if in the case the var is set in session or cookie, it actually is not empty (it could be set as an empty string, for example)
973	first of all, you can do all of the bad word replacements with one (dynamically generated) regex, like this:
974	now, you have the problem of people adding periods in between the word, which you can search for with another regex and replace them as well.
975	however, you must keep in mind that .
976	matches any character in a regex, and must be escaped (with preg_quote() or a backslash).
977	now, you can use this new $bad_words array just like the above one to replace these obfuscated ones.
978	hint: you can make this array_map() call "better" in the sense that it can be smarter to catch more obfuscations.
979	for example, if you wanted to catch a bad word separated with either a period or a whitespace character or a comma, you can do:
980	if you use preg_match_all there is no need for explode or to build the matches yourself.
981	note that the resulting two-dimensional array will have its dimensions switched, but that is often desirable.
982	there will also be a $matches[4] but it does not really have a meaning and is only used inside the regular expression.
983	first, a few things you did wrong in your attempt:
984	(.+) will consume as much as possible, and any character.
985	so if you have something inside a string value that looks like in 13 then your first repetition might consume everything until there and return it as the column.
986	it also allows whitespace and = inside column names.
987	there are two ways around this.
988	either making the repetition "ungreedy" by appending ?
989	or, even better, restrict the allowed characters, so you cannot go past the desired delimiter.
990	in my regex i only allow letters, digits and underscores ( \w ) for column identifiers.
991	[\t| ] this mixes up two concepts: alternation and character classes.
992	what this does is "match a tab, a pipe or a space".
993	in character classes you simply write all characters without delimiting them.
994	alternatively you could have written (\t| ) which would be equivalent in this case.
995	[.+] i don't know what you were trying to accomplish with this, but it matches either a literal .
996	and again it might be useful to restrict the allowed characters, and to check for correct matching of quotes (to avoid 'some string" )
997	now for an explanation of my own regex (you can copy this into your code, as well, it will work just fine; plus you have the explanation as comments in your code):
998	this makes use of pcre's recursion feature where you can reuse a subpattern (or the whole regular expression) with (?n) (where n is just the number you would also use for a backreference).
999	it does not allow for floating-point numbers it does not allow for escaped quotes (if your value is 'don\'t do this' , i would only captur 'don\' ).
1000	this can be solved using a negative lookbehind .
1001	it does not allow for empty arrays as values (this could be easily solved by wrapping all parameters in a subpattern and making it optional with ? )
1002	and since you said your regex'ing is horrible... while regular expressions seem like a lot of black magic due to their uncommon syntax, they are not that hard to understand, if you take the time once to get your head around their basic concepts.
1003	i can recommend this tutorial .
1004	it really takes you all the way through!
1005	you probably have echo print_r($view) .
1006	and... what need do you have to parse its output?
1007	there are certainly much better ways to solve your problem.
1008	print_r called with one argument (or with its second argument set to false), will echo the representation of its parameter to stdout.
1009	if it does this, it returns true .
1010	thus if you echo print_r($foo) you will print the contents of foo, followed by a string representation of the return value (which is 1).
1011	i'm not sure if this is the only problem in your code, but it's definitely one: the currency value inside the data that is passed to php has no key.
1012	the correct data to pass would then be:
1013	with this, php should now be able to access $_post['currency'] to get the currency value unless there are other problems.
1014	let's assume you have an array containing the lines to insert :
1016	you can of course combine the two first loops, i only separated for the sake of explanation :
1017	really you should be using parameter placeholders ( ? )
1018	for the values and prepare the statement with pdo or equivalent.
1019	you'll be wise to learn to use join statements in sql.
1020	this will allow you to use just one sql query to fetch all the results you need.
1021	in the meantime, if you are nesting some sql queries inside others, the outside query (in your case select * from appointments ) needs a separate database connection (in your case $mysqli ) from the rest of the queries.
1022	issuing a new query from the connection resets the rest of the queries.
1024	instead give a list of columns you need.
1025	your software will be more robust and easier to understand if you do that.
1026	the implementation of array_values can be found in the php source code here in ext/standard/array.c starting on line 2968.
1027	the implementation is non-destructive, meaning it will create a new array of values based on the given argument array, discarding the keys.
1028	the equivalent implementation of this function in php would look something like this...
1029	though what you might notice from this implementation is that it doesn't necesarily change the order of your elements in the array at all.
1030	it merely recreates the array using number keys starting from 0.
1031	notice that baz still comes last even though the key is now 2 instead of 0 .
1032	this may not necessarily be what you want if i understand your requirements correctly.
1033	1) you dont seem to be assigning any value to $_session['logged_in'], hence your first assertion mighr be returning true.
1034	why not check if the 'current_user' is set instead?
1035	2) you are using an exact equality operator (read: !==) at this line: $_session['logged-in'] !== trueif it is not (of type boolean and true) or ($_session does not exist) the assertion will always be true, leading to the login page.
1036	when getting a card from the array with all cards add it to the second array and remove it from the fist array (unset) so you can't pick it again...
1037	i've slightly re written this for my own mind to process it, but my initial thought is that for oo programming you're using a procedural way of entering data into the database, how about this:
1038	i think it would be wise to add in if statments checkin the mysql executed successfully.
1040	however, if you use php $_session variable, it will persist.
1044	here is a post with some helpful ajax beginner info -- it links to another post containing some simple ajax examples.
1045	i think the best way to handle this would be to use the filter_input() function.
1046	that would strip everything from $_post['amount'] that isn't a numerical digit.
1047	of course it requires the use of php5.2 or greater.
1048	well, obviously $row = mysqli_fetch_array($link, $useridquery) fetches an array of results.
1049	print_r($row) is then printing that array to the output stream and returns true which is concatenated to the string as 1 .
1050	the remaining two errors are things that you should deal with by actually looking, yourself, at the difference between mysql_connect() and mysqli_connect() .
1051	mysql_connect() ’s first argument, $server , can be formatted like hostname:port whereas with mysqli_connect() you would pass only hostname to its first argument and pass port as an optional fifth parameter.
1052	also, mysqli would have you specify the database in the mysqli_connect() call instead of having a separate function analogous to mysql_select_db() .
1053	i suggest that, if you need, you use the converter tool to convert all of your sourcecode from mysql to mysqli except for these lines with the warnings in them.
1054	only you know what format "$localhost" comes in: if it might contain port information, you must separate the port information out.
1055	you should probably set the database to use in mysqli_connect() instead of using the converter’s automatic use $db shim.
1056	this is exactly what the converter is trying to tell you :-).
1057	the above suggests that the php code generated by the converter is, itself, throwing php warnings and errors at runtime (not that the converter is complaining about your original code or informing you that you need to actually do some manual conversion as i discussed above).
1058	that is why we were looking for errors like the once-missing semicolon which you corrected.
1060	to prevent any javascript, you could use strip_tags in concert with htmlspecialchars .
1061	alternatively, if you were storing a $_get or $_post value into an integer column of a mysql database, for example, you could simply pass the value into intval() before storing it in the database.
1062	if you need to store plain text, just pass it through mysql_real_escape_string() before storing it.
1063	you can also use preg_match() or preg_replace() to make sure you are only storing valid values (different patterns for different uses, e.g.
1064	most people create a wrapper class around the pdo object to record the queries as they are sent to the database.
1065	hardly anyone uses a direct pdo object since you can add extra helper methods by wrapping, or extending pdo .
1066	looks like $this-&gt;updates is not empty but its not an array.
1067	you can use the is_array test before you use it in foreach :
1068	1- replace empty() with !is_array() to check if $this-&gt;updates is valid or not.
1069	if it's empty, it doesn't matter, the foreach will simply do nothing...
1070	or if the foreach is not the only processing you do :
1071	the data you are posting to register.php from your ajax call needs to be a single json like this (notice the added {} around the fields):
1072	from this change you wil be able to access the fields inside the $_post associative array.
1073	which should address the php error.
1074	and within the loop you can evaluate whether each key found by the loop matches your criteria.
1075	i'm not 100% sure what is actually real and what is just a placeholder in your question though.
1076	maybe i took something for solid fact that actually isn't.
1077	you might need to explain your wishes in more detail.
1078	you would do well to read up on mysqli , which is a safer way to carry out mysql queries.
1079	you can find the excellent documentation here: http://php.net/manual/en/book.mysqli.php and there is also a very useful tutorial here which covers simple queries like yours: http://www.phphaven.com/article.php?id=65
1080	i'm only looking at your pdo code.
1081	it seems your missing some code how do you want to get your mysql data.
1082	i created a similar script for you that works a little different.
1083	test it in your own server and check it that is working.
1084	i'm not sure why think that.
1085	$myarray1 + $myarray2 is and always has been a union in php.
1086	a union and array_merge do two very different things, however.
1087	$myarray1 + $myarray2 will add elements to $myarray1 from $myarra2 who's keys do not already exist in $myarray1 .
1088	array_merge($myarray1, $myarray2) will merge all elements together if the keys are numeric and overwrite string keys.
1089	if you want to send the parameters via post , have a look at the send() method.
1090	when you read from $_post , you should pass your arguments in the http body instead of using the querystring.
1091	you would need to send your arguments as in the following example:
1092	in your case, you are adding the query string to the url, which means that it is being passed as a get variable.
1093	even if it is a post request, php can still access any get variables added on as a query string.
1094	based on your code, i don't think you are telling the request what info should be included in the post section of the request, which would explain why you are not seeing anything with $_post['var'] .
1095	but since $_request['var'] looks for request variables in get and post and any cookies passed in the request, you see the variable as it was passed via the query string.
1096	if you want to use post the right way, you need to not point the request to a url that has a query string and instead define that query string as the post data.
1097	though, there is other problems, your query has 0 protection from injection.
1099	also, while the headers are fine, you need to check on the admin page to make sure they are an administrator.
1100	and make sure to hash their password and compare against the hash.
1102	you can use filter_var filter_var('http://example.com', filter_validate_url); for validating your urls.here you can find all types of validation types you can use.if you want to require the http(s) you can add use this.
1105	your logic is correct.but you actual problem is that while you explode the string into start and end time for example, 09 : 00-12 : 31
1106	this is not the intermediary result you required for proceeding in the right way.so you need to remove all spaces in between them.for this purpose use str_replace() function..accroding to your code use :
1107	use setcookie() for setting cookie on server (must be done before anything is printed/echoed), $_cookie for reading them on server, document.cookie for reading and writing them in browser (javascript).
1108	cookies are like "variables" that are generally invisible to user and that are accessible between requests, i.e., you can set it in one page request and read in another.
1111	you could extract the relevant informations (the 'num' items) from $a1 :
1112	edit after the comment : well, considering the result you want, now, i would go with another approach.
1113	note : i used an anonymous function, which only exist with php >= 5.3 ; if you are using php &lt; 5.3, this code can be re-worked to suppress the closure.
1114	note the keys are not corresponding to anything useful -- if you want them removed , just use the array_values() function on that $result :
1115	it is escaping the string, so here\'s the text is the expected output.
1116	this is nothing to do with magic quotes, which would already have escaped the string, giving you here\\'s the text as the result after calling mysql_real_escape_string .
1118	consider using mysqli or pdo instead, along with prepared statements.
1119	it sounds to me like you need to have some fairly basic tuition on these subjects.
1120	you've clearly been reading up on the internet and following examples, but without actually understanding why the examples are doing what they're doing, or how they work.
1121	copying examples without understanding them is not a good thing.
1132	the actual query is... select * from tbl_name where col_name = :col_name; .
1133	firstly, you send query to the database, later you send query parameters.
1134	pdo doesn't merge query and parameters.
1135	query and data being sent to the database se-pa-ra-te-ly .
1136	which means that data never being added to the query.
1137	so, no harm could be done.
1138	the query being sent to the database as is, with ?
1139	marks (but no named placeholders which being replaced by pdo with ?
1140	pdo do make an old-style query, by substituting placeholders with binded variables depends on variable name.
1141	strings being quoted/escaped, the rest being cast to it's type.
1142	the real danger begins when you have a variable identifier ...
1143	the [] array convention dynamically creates the next index, so if you have:
1144	the hidden and checkbox inputs with the same name that need to hold the checked and unchecked value need to have the same index, so specify like:
1145	also, i have no idea what you are doing with the implode() and explode() .
1146	if you are just trying to reindex the numeric keys then use array_values($_post['acts']) .
1147	after submitting your login details, $_server['http_referer'] is going to be the url of your login page, since the last page the user saw was the form for them to login.
1148	consider storing the 'redirect to' url in the php session before you redirect to the login page.
1149	you could also pass it as a parameter when you redirect to the login page, but i can see that approach having potential security flaws (such as redirecting users to another site, adding fake http headers etc)
1151	what you're looking for is the strpos() function:
1152	note that if it doesn't find what it's looking for in your string, it'll return false on its own, so all you have to do is check whether it returns a result or not to meet your conditions.
1154	or you could explode it into an array then use in_array() :
1155	but i would recommend the first solution, as it is cleaner and more efficient.
1156	i'm not sure about the code (will review later) but you could try refactoring your tables so you have a separate table that contains user attributes, this allows you to be dynamic with your attributes so you don't have to create a different table every time you have a different type of user.
1157	edit:try: var_dump(mysql_num_rows($result2)) if this shows the return value is false something is wrong with the query, otherwise it doesn't match any rows.
1158	the reason you are encountering invalid sequences is because the encoding for your php-file is incorrect.
1159	note that if you are using utf-8 properly, you do not need to use htmlentities.
1161	remember that $hear_about is an array, and must be treated like one throughout your code (e.g.
1162	just using $hear_about won't work, it needs to be $hear_about[0] , $hear_about[1] , etc).
1163	$_post['hear_about'] is an array of values.
1164	you are handling it as a simple string!
1166	so you can just concatenate selected "how did you hear about us?"
1167	options with a comma and then use the resulting string as the other data.
1168	from php 5.3, the json_hex options allow you to ensure all html-special characters are encoded as javascript string literal escapes, so you don't have to html-encode on top of json-encoding, which means you can use the same output function in both event handler attributes and &lt;script&gt; blocks (which, being cdata, have no html-escaping).
1169	also consider breaking out the onclick handler and assigning it from &lt;script&gt; instead of using inline event handler attributes.
1170	this tends to be more readable.
1171	stripslashes and htmlspecialchars are unnecessary in this context.
1172	after all, you are not outputting any html that contain the posted values.
1173	if you don't need them to be what they say the are, you can omit this.
1174	other than that it looks okay.
1175	do you have multiple versions of php installed?
1176	i'm only vaguely familiar with the eclipse pdt so i'm not sure how it invokes php.
1177	but if you have multiple versions installed on your system, you may want to check the output of a call to phpversion to make sure the proper version of php is being executed.
1178	does the configure options line in the phpinfo output show '--with-mysqli=mysqlnd'?
1179	it should since the screenshot you posted shows mysqli enabled, but at this point it couldn't hurt to check.
1180	last suggestions, which you may have already done, verify the libraries the extension depends on are installed and your configuration in php.ini.
1181	this is an old post which you may have already seen, but it has some details on that: fatal error: class 'mysqli' not found
1182	then again i am not sure it that is supposed to be done by package manager, or do i need to do it myself each time.
1183	internally, php does not store the actual value but only a reference to the variable holding the value.
1184	and the actual value is only fetched when the prepared statement is executed.
1185	that’s why you can’t bind values but only variables.
1186	however, due to this, it is possible to do the following:
1187	if $_server['http_referer'] variable doesn't seems to work, then you can either use google analytics or addthis analytics .
1188	stick with get, but hit a redirecting script/function, store the value in $_session and redirect back to page without the data on the url.
1189	post a form use cookies instead of $_session(blech)
1190	note: the var_dump at the bottom will be showing $_get on a page that doesn't have any url params.
1191	a second reload of the script will show that $_get has been emptied.
1192	if you don't want this, remove the $_session['__get'] = array(); in the elseif block.
1193	if you're using php 7+ then you can use the null coalescing operator, ??
1194	- it doesn't raise notices about unset variables.
1195	it also explicitly checks for null rather than empty variables - ?
1196	: won't work intuitively for zero or an empty string, etc.
1198	use var_dump or print_r instead of echo (they are functions, not constructs like echo is).
1200	if you want to print out a value in your array try:
1201	be careful because if the array is empty you will get an error.
1203	it will tell you the type of the object and its content.
1204	to get user id form query you need to fetch it as
1205	you script is open for sql injection read how can i prevent sql injection in php?
1206	this is nothing to do with pdo, but the underlying database.
1207	pdo is quite a light wrapper, and doesn't do complex re-mapping of queries to handle differences in the sql accepted by different flavours of dbms.
1208	the easiest solution is just to name all your postgres tables and columns in lower-case.
1209	the downside is that results from queries like select id from users where ... will come back with lower-case keys in the results, which may break assumptions further down your php code.
1210	as a compromise, you can fix your select clauses to use the uppercase form as an alias, as in select id as "id" from users where ...
1212	even then you would only use htmlspecialchars() when writing to the web-page to be seen by users.
1213	when you want &lt;br /&gt; to be seen by people reading your web-page .)
1214	by providing the search_value as second parameter to array_keys.
1215	the function will return only the keys of the array containing the value.
1217	it accepts an optional second parameter, search , that allows you to stipulate that you wish to have only those keys returned whose value corresponds to your search.
1218	this removes slashes at the start of the string and at the end.
1219	if i get you correctly, your code is working but appends the data instead of overwriting the file.
1220	this is because you are doing:
1221	which will open the file in append mode.
1222	to overwrite it, you'd need to open it in write mode, e.g.
1223	however, you are using the $mysqli variable in your get_data function, but the variable is not defined in that scope, so it should not work at all.
1224	make sure to pass the variable to the function, e.g.
1227	but since we make sure the ids are numeric, it's okay in this case.
1228	also, mysqli does not allow easy binding of values in where … in queries .
1229	the documentation states that the html should be well formatted, i understand this that it should be well formed, complete elements from the opening tag until the closing tag.
1230	my experiments showed similar errors, if i didn't do that.
1231	this code should never see production.
1232	use pdo or mysqli with parameterized prepared statements instead as tadman said in his comment.
1233	you want to only run the query if $searchtext is not null.
1234	keep in mind that as you have this now, your begging for an sql injection attack.
1235	please use pdo and bind the values.
1237	mysql_ is with php 5.5 deprecated and won't be supported by php >= 5.5.in addition to this i should mention, that your script is vulnerable for mysql injections.
1239	my code example contains the function mysql_real_escape_string which is like i told you deprecated.
1240	if you stick to mysql_* this is the least you can do to secure your application.
1241	so you can get your value1 using $_post['field1] , value2 with $_post['field2']
1242	the comments say it all but i'll sum up.
1243	php as a server side language is evaluated before the code reaches your browser - on the other hand javascript as a client side language executes only after your browser has received the information from the server.
1244	to use javascript to call a php function you'll need to make an asynchronous request (if you don't want your page to reload at least).
1245	an example ajax request (from http://www.w3schools.com/php/php_ajax_php.asp ):
1246	php warning notices must have been turned off on your live server.
1247	well, you can enable it like
1248	try checking those files for session_start(); occurence.. if so.. comment it off , since you have already started in the beginning of your code.
1249	a possible workaround for you may be to pass the $foo variable to your next script as a $_get argument in the location header like this:
1251	the problem is that a "foreach foreachelse" can be included in a simple "foreach" and vice-versa.
1252	so whatever the order you choose to make the two kinds of replacement, the problem stay the same.an other thing, the preg_match tests are useless, if you want to stop the replacements when there are no more replacements to do, use the "count" parameter of preg_replace and use a do...while loop to test it.
1253	note that writing two consecutive preg_replace can be shorten if you use an array of patterns and an array of replacements as parameters for a single preg_replace statement.
1254	most of the time you don't need to capture the content between markers in a template system, i will show you an example for the fake replacement you use in your question, but you can expand the same idea to your real case:
1255	i think your core problem is that you're only clearing things in the outer loop.
1256	$c = new curl for instance is going to allocate memory to the heap for each iteration of the inner loop, but you're only unset ing the last instance.
1257	i'd unset any stuff you can ( $c , $data ) at the end of the inner loop.
1258	is it possible to instantiate curl once outside the loop, and then inside keep reusing the same instance.
1259	you could reset all fields to null in the loop if you wanted.
1260	you might want to change and use this code instead if you are just going to send or $_get['username'] an value from your previous session.
1263	in your code example, you never assign these post values to these session values.
1265	note that this will yield true even if the property is null .
1266	to check whether a property exists and that it's not null you use isset() :
1267	following on from @shawnmehan 's and @jigar 's comments and from my own - i have not been able to test this where i am but it might serve to point you in a direction for what you need.
1268	not sure how many rows of arrays you have in each file, so i have used a loop but if there is only one line, you will only need the fgets() .
1269	i have assumed that your arrays in the text files are comma delimited, but if they are tab delimited you would need to explode them by "\t".
1271	if, at any point in your data, there is one or more single quotes your query will fail and trigger the die() statement.
1272	you can either scrub every variable to remove or replace these characters, or you can move away from the deprecated mysql_* functions and use parameterized queries with mysqli or pdo.
1273	you won't have to scrub special characters out of your input.
1274	your code will be less susceptible to sql injection.
1275	your code will not generate e_deprecated messages in recent versions of php.
1276	your code will not break in future versions of php when these functions are removed.
1277	most importantly, peopel will stop endlessly harping on you about the functions you use while ignoring your actual question.
1279	i have had a similar issue before, though i needed to make sure that the values are not duplicated, and if there is a duplicate then a page should show me a notification.
1280	the method i am using is different.
1281	i have a simple form to upload a csv file, a page to analyze the uploaded file, and once i am ok with the analysis, the file is uploaded to the database.
1282	might not be exactly what you are looking for, but i hope it helps.
1283	because you are using application/json content type header in your request, php does not populate the posted data into $_post .
1284	this is only done for form-based content types.
1285	you must instead read from php raw input.
1286	any time you find yourself manually building json strings, you should ask yourself if you should really be doing that.
1287	json is a serialization format and should not be created manually in most cases.
1288	you have some syntax issues in your code, your else statements were not lined up properly, so your page was not working.
1289	(for example, you had an } else { lined up with another } else { ).
1290	i went through all of the code and formatted it so i could see what the issue was, remember , some sensible code indentation would be a good idea.
1291	it helps us read the code and more importantly it will help you debug your code .
1292	take a quick look at a coding standard for your own benefit.
1293	you may be asked to amend this code in a few weeks/months and you will thank me in the end.
1294	i also suggest, for really complex, nested structures, to comment what each ending bracket goes to like i did in your code.
1295	i put comments so that i could see exactly what the } was ending.
1297	these are sql statements that are sent to and parsed by the database server separately from any parameters.
1298	this way it is impossible for an attacker to inject malicious sql.
1299	since you ask about insertion here is the method to prevent sql injection by using this method attacker will have no chance for it.
1300	a simple way would be to use a php framework like codeigniter or laravel which have in-built features like filtering and active-record, so that you don't have to worry about these nuances.
1302	on controller echo $this->uri->segment(3) make sure you are getting correct
1303	the big problem came in your attempt to modify the current array.
1304	this will prove more difficult than it is worth, when you can just create a new array and set the key/value combos based on the exploded value from the initial array.
1305	also, notice my shortcut with the use of list() .
1306	in windows for example, the line break is \r\n , meaning your explode() will leave the \r in the data.
1307	alternatively, you can also use the file() function with the file_ignore_new_lines parameter.
1308	because you are trying to print the array as if automagically transforms itself into javascript array, that is, a string of its values separated by a comma (that is what it needs to output to the html, something the browser understands).
1309	it takes every element in the array and puts $glue string between every one of them.
1310	the end result looks like this:
1311	sqlite doesn't support the values (...), (...), (...) syntax (see the docs ).
1312	so you need to do only one row per insert query...
1313	the reason for the error itself is that since there's a query error, pdo::prepare() returns false .
1314	you should check it to make sure the -&gt;prepare() call worked:
1315	i'm guessing 'accept_proof' is the name of your submit button, so, because it's being disabled before the form is submitted, its value is not set in the post to the server; isset($_post['accept_proof']) is returning false, and your code inside the if isn't executing.
1316	you'll need to check for the posted form some other way, e.g.
1317	isset() on a different field in the form.
1318	it is clear you are having problems, but you have to be more specific on yr issues, in order to get quick and specific answers.
1319	from a quick glance, inside your model, you shouldn't use "$this->uri->segment(3)", make it as input for the model &amp; it also should be in the controller.
1320	@moulali , i can't complete the task for you, you have to do them yourself.
1321	i can help to guide you to it.
1322	also by dublication you mean html duplication or that the form still contain same comment ?cause if so you can add attr autocomplete="false" to you inputs that submit comments to avoid that.
1323	a good idea is to put uniqure key on both username,post_id,comment so that a user cannot say exact same comment on same post twice.
1324	according to you current situation, this uniqure key will fire error when ever ur code try to resubmit the same comment twice, and u will be able to id when that happens.
1325	or maybe you don't need jason_decode() and the $_post['themestack'] object is what you want.
1326	you can treat it as an array and access it like $_post['themestack'][0] .
1327	shameless plug: i do this exact thing in a project i have on github .
1328	feel free to use the classes for whatever you like; they are mostly copy-pastable.
1329	the error call to a member function ... on a non-object in ... means that $db is not an object, which means that it was not instantiated to an object.
1330	bind_param(string $format, mixed &amp;*vars); uses pass-by-reference and if this fails, it throws an error.try it yourself by sticking this in there:
1331	in addition, in the first query you do it is probably not a good idea to be adding the overhead of a prepare for a single query that only checks row count without user input.
1332	you could check to see if any of the keys in $_get intersect with $active_links :
1333	if array_key_diff returns an empty array, all those keys exist in the $_get array.
1334	this is not an issue of zf2.
1335	there is a serialized object in your session which php tries to unserialize when session_start is called.
1336	but because php can't find the class (which is not declared), it uses __php_incomplete_class instead.
1337	the best way to fix: register an autoloader to load missing classes.
1338	you can dump the class name this way:
1339	you are using json_decode() to display the data inside var_dump but do not save the decoded array to a variable you can use later on.
1340	have you checked to see if a cookie is being set?
1341	session_start() should only ever be called once.
1342	it would probably make sense to shove it into a bootstrap file, and include that from each of your pages.
1343	so, ok. assume that's a login page.
1344	but in a real-word scenarion, the profile page of the user would use a database as well.according to your code, you would have to implement the same database handler twice or even more... (see comments below)
1345	basically, you should never trust client-side validation, because anyone could just simply disable javascript in a browser.
1346	and then he can easily send "invalid" data to the php script.
1347	always do server-side validation!but it does not mean that you should never use client-side validation at all.
1348	instead you should handle a situation when they come from browsers that do not have js enabled/support.you can try it yourself, just disable javascript in your browser and then enter your site...
1349	mistake #4 not to mention the code duplication, the code itself isn't well structured.
1350	this is how this should not be.here i'm saying about both javascript and php codes...
1351	i'm not sure if you are going to follow above advices (in case you don't have a time or a will), so that let me answer your original question first.
1352	in short: this is a php variable !
1353	and thus should be set in phpand it soulds like to me, even if you set $logged_in to true once a user logs in, you've missed somewhere session_start() .howewer, don't use this variable at all!
1354	instead define a function, like, is_user_logged() because it's more reliable and "catchable" if something goes wrong.ok, next,
1355	you should encapsulate all profile related logic into a class.it should be similar to this one:
1356	your question isn't clear still i'm answering it.
1357	it is straightforward to begin and commit a transaction.
1358	in pdo, do something like this:
1359	first of all, you start a transaction next, you query database if result is okay, commit the transaction if result is not okay, rollback and the query will not execute
1361	by default, pdo auto-commits each query.
1363	in general scenario, you should not turn it off.
1364	when you need to execute an important query, i.e multi-part queries that depend on each other for their final result like an amount transfer between two accounts (where you need to deduct amount from one table and to add it to another table), simply begin a transaction.
1365	pdo will not execute any query until you commit the transaction.
1366	if something goes wrong, everything will be rolled back to its previous state.
1367	lastly, there isn't any big difference between turning off auto-commit and beginning a transaction.
1368	by beginning transactions, you can simplify the tasks otherwise you will need to manually commit each query regardless of its nature.
1391	the error message explains exactly what the issue is.
1392	the name variable is not set when you first load the page, because nothing has been posted yet.
1393	so of course, $_post['name'] does not exist.
1394	that's what the php error is telling you.
1395	you'll need to replace all of your $_post inside the form with this: &lt;?php if (isset($_post['name'])){ echo htmlspecialchars($_post['name']); } ?&gt; so you won't see those errors anymore.
1396	also, you should be using $_post, not $_post.
1398	however, it's not reccomended because if there is a real error you won't know what it is until you remove that line.
1399	if you move the array_pop to outside the if you should be ok.
1400	just find the place in your code which does htmlspecialchars/htmlentities on the data intended for database and get rid of it.
1401	note that your query is improperly formatted.
1402	you have to format it, either by formatting every literal separately, or by using prepared statements.
1403	it is irrelevant to your li&amp;gt problem, but it's relevant to your application errors and vulnerability
1404	mysql won't sanitize your html like this, as far as i know, so something in your code is passing your $_post['omschrijving'] through htmlentities() or htmlspecialchars() .
1405	either of these functions would produce the out put that your are seeing in your database.
1406	if you have any other doubts just do a print_r($_server); to actually see how the array is composed
1407	it is normally better to show the success message on the redirected page but you can solve this two ways:
1408	store the previous url (or know it) and redirect to it with header("location: old_page.php"); make the target of the form an iframe.
1409	this means the main page itself will not redirect and you can just bubble a response from upload_file.php (which will load in the iframe) making seamless uploading for your app.
1410	also this is not the best way to get a file extension:
1411	even though this is a tiny usage of in_array i still would recommend taking that out and using a more practical method of searching arrays: http://php.net/manual/en/function.array-search.php
1412	here is a working form with some checkboxes that will allow you to test and get the sql you intended.
1413	you can simply check the textbox to make sure it isn't empty and then append to a sql string:
1415	you are not defining $date - although its not even necessary in your example.
1416	the date() function will default to today if no second parameter is passed in.
1417	(also isset can take a comma separated list of variables to be cleaner)
1418	also, as mentioned in the comments, you have a typo in your switch statement that would prevent a match on 'sat'.
1419	if they all have their own static ip, store the ip in the session, and compare every time the page loads.
1420	if $_server['remote_addr'] != $_session['ip'] , somebody's trying to steal a session.
1421	this checks if the submit button was clicked if(isset($_post['submit'])) then it checks for user match database records and then if it is correct it logs the user in also remember to set session variables
1422	you could use $_session[] to store values so that you can use it again until you done.
1423	what you are looking for is called persistent data.
1424	you need some data to exist over a longer period of time than just an http request (a page load).
1425	in order to do that, you have to store the data somewhere more permanent.
1426	you can store the data in a database.
1427	you can store the data in a file.
1428	you can store the data in a cookie/session.
1429	using cookies/sessions is very similar to just creating a variable and storing the value you need in it, except that php saves this data onto a file (either on the client's machine or your server) and loads the data into the variables for you automatically before the script starts, so you don't have to think much about how to handle the file that's created.
1430	this creates a cookie (a small file) on the client's machine, names it "testcookie", stores the contents of $value in the file, and saves the file.
1431	php will automatically load that file into a global array named $_cookie , which you can use on any script in that domain e.g.
1432	www.domain.com for the next 24 hours.
1434	your problem is that you're using var_dump in your php.
1435	that literally returns the string: "bool(true)" .
1437	if you just want to return the posted value, do this:
1438	just keep in mind that you need to pass the data to the post , correctly:
1439	since you are overriding the constructor function of the mysqli class you need to call it manually like so:
1440	if i'm understanding this correctly, you just don't know how to call another file.
1441	i would suggest turning it into a function, including, and then calling it.
1444	(just google it, plenty is out there) this will also allow you to use prepared statements, which is one of the biggest things the mysql_* functions are missing.
1445	since you're using your post data multiple times, place them into local variables to start.
1446	it will make your code short, cleaner, easier to read, and if you ever change the name of a field, must easier to update in the future.
1447	place all errors into a single string.
1448	that way if it's successful, you only have to check one thing, and if it fails, you only have to send one thing back to the user.
1450	you can use preg_replace_callback and change all the keys without to loop on each using array_keys and array_combine :
1451	you can modify the second function to deal with multidimensional arrays:
1452	i can quickly spot two separate tasks.
1453	one is to convert strings to camel-case format, and the other is to map the keys of a multi-dimensional array.
1454	these tasks have nothing to do with the other, and so it is best to implement them as separate functions.
1455	lets start with a higher-order function maparraykeys .
1456	it will accept a mapping function and apply this function to each key of the array, producing a new array.
1457	we must expect the mapping function to be injective (one-to-one).
1458	there are a few fiddly bits that i do not consider so important.
1459	you may not want to do type hinting on the parameters, okay fine.
1460	maybe you'd rather if/then/else instead of a ternary operator, okay fine.
1461	what is important is that with maparraykeys you can apply any (injective) mapping function to array keys.
1462	the second task is to convert strings to camel-case.
1463	you might use pcre functions for this, that's fine.
1464	i am going to use explode to do the splitting.
1465	the function undertocamel is not necessarily injective, so you have to take special care.
1466	you have to assume that for all x_y and all xy (where y is the capitalized version of y) that exactly one of x_y , xy , x_y is an underscore format (same follows more more underscores).
1467	first it should be noted that nested functions are not actually as abnormal as you'd think.
1468	this is an expression that uses a lot of nested functions: +, -, *, / .
1469	if you pretend you haven't had bedmas (or equivalent) embedded into your subconscious, this is actually a complicated expression to understand -- there are implicit rules you are subconsciously applying to know that first you do the stuff in parentheses, then the multiplications, and so on.
1470	none of this seems complicated because you have learned how to read such expressions and it is now part of your repertoire.
1471	the same goes for reading expressions like the one i used.
1472	lastly i can write it to read right-to-left or inside-to-out (if you consider the parentheses), which is how it was originally written.
1473	all of these versions use a simple pattern called function composition , which is another reason it is easy to read and understand.
1474	with function composition you can build up a sequence of functions where each function feeds from the output of the previous function.
1475	make sure you have proper indentation, or else you are going to get lost quickly.
1476	i have cleaned up most of your code.
1477	you were hard coding "str" in your url instead of concatenating the variable:
1478	also note that you are first doing a post request to maps_append.php which will have both $_post['cmdview'] and $_post['cmd'] set to the options you sent, then once that script has returned a response, you make a get request by using the load() method, which will then replace the html in #append .
1479	not sure why there is that last change() at the end.
1480	from what i can tell, it sounds more like you're trying to do something more like this:
1481	i believe that what you're are trying to accomplish can be resolved with much simpler code.
1482	try replacing your existing javascript with this:
1483	this code is simply saying, when you change #cmdview load the contents of the file maps_append.php?cmd= with the value of #cmdview appended to the url.
1484	this should make it so you can access the value of #cmdview in your php code with $_get['cmd'] .
1485	you can edit your code to include preg_match("/^envelop-to: (.
1486	the problem is that you're always using $layout['content'] as the subject in str_replace , rather than the updated $pages[$layout['name']] .
1487	so you're not merging all the replacements, you're overwriting the old replacement with a new replacement.
1488	you can solve this by doing all the replacements at once, by giving arrays of search and replacement strings to str_replace() .
1489	echo $_cookie['foo'] gives you the content of the cookie with the name 'foo'.
1490	do not use a single cookie for every value you need.
1491	instead think about storing the data as json in one single data cookie.
1492	to get around this, you could use a hidden input in your form:
1493	then you can replace isset($_post['submit']) with isset($_post['id']) and set $newappid = $_post['id'] to get the row number to be changed.
1494	database/mysql: if you're using set names and e.g.
1495	php/mysql you're leaving mysql_real_escape_string() in the dark about the change in character encoding.
1496	this may lead to wrong results.
1497	so, if you're relying on an escape function like mysql_real_escape_string (because you're not using prepared statements) set names is a suboptimal solution.that's why mysql_set_charset() has been introduced or why gentoo applies a patch that adds the config parameter mysql.connect_charset for both php/mysql and php/mysqli.
1498	the client usually doesn't indicate the encoding of the parameters it sends.
1499	if you expect utf-8 encoded data and treat it as such there may be encoding errors (byte sequences that are invalid in utf-8).
1500	so the data may not display as expected or a parser may abort the parsing.
1501	but at least the user input cannot "escape" and do more harm e.g.
1502	in an inline sql statement or html output.
1503	take the script (saved as iso-8859-1 or utf-8, doesn't matter)
1504	e4f6fc is not a valid utf-8 byte sequence, therefore htmlspecialchars returns an empty string.
1505	but at least they will not "mistake" a character as a malicious control character - as long as they all stick to the "proper" encoding (utf-8 in this case).
1506	one possible alternative would be to hide and show the "vid" text input instead of trying to overwrite it with a hidden input.
1507	to do that, you would change your php to write the text input version of the "ivaovid" row, then change your javascript to this:
1508	another option would be to hide and show the text input without modifying the value and ignore the value in your php post handler depending on the value of $_post['ivao'] .
1509	you need to implode the array.
1510	this will put it into a string for you.
1511	above all depends on how you are setting the date on the page.
1512	aslong as the date have date[] in the name it will populate the input::get('date');
1513	if your only using a single input and separating the date with a , all you have to do is;
1514	if you do echo json_encode(array($json)) then you will get your whole json wrapped in an array, something like this
1515	first check the $_post['name'] in select query if it is exsits update in the query if not then insert into database
1516	(i'll do a new answer because i misunderstood the question in the other one.)
1518	this could explain #2. for example, if your table is really called "table" and you didn't quote it with backticks ( table is a reserved keyword).
1519	turn on error reporting to see if this is the case (see below).
1520	your problem is that you are attempting to use a loop within string concatenation, which is not possible.
1521	you can get around that by using implode and range instead to generate the same string:
1522	however the resulting code is still hard to read.
1523	if you are sending json data, it would make much more sense to just send the raw data and build the html client side with javascript.
1526	first of all if those fields are inputs then isset() will always return true.
1527	what you probably want to check is if they are not empty.
1528	so you should use empty() function for that.
1529	the reason why your code isn't working is not because of your boolean logic, but because of your use of isset() .
1531	use $_post['fieldname'] != '' instead to determine if the user has entered a value.
1533	okay, in all seriousness, it's not so much bad as it is silly .
1534	you're wrapping pdo in another class.
1535	if you want to add more functionality to pdo, you should be extending it instead.
1536	pdo already does this during day to day operations.
1537	when you prepare a query, it returns a pdostatement object.
1538	you can configure it to return another object ( via pdo::attr_statement_class ) that extends pdostatement instead.
1539	if you want to pre-process the query using your parser, you'll need to override the exec , query and prepare methods in your class that extends pdo.
1540	once you've processed the query, you can call the parent method and return your extended statement class.
1541	if you're worried about people invoking the statement class without going through exec / query / prepare , just keep in mind that no queries can be executed unless the statement knows how to access the database, and it won't be able to do that without the parent pdo object.
1542	this is downright absurd given the circumstances.
1543	you have a pdo object here, there's no reason not to use prepared statements and placeholders here.
1544	if you don't want to bind one variable at a time (and i don't blame you), that's what execute 's optional array argument is for.
1545	i'm guessing $_post['cat'] is an array in itself.
1546	(i'm guessing this because of the [] following cat in your example.)
1547	if this is the case, then in your example, you're setting $_session['cat[]'] equal to a variable name that doesn't exist.
1548	try setting $_session['cat'] equal to $_post['cat'] .
1549	i.e., 'cat' is the index of the _post array, and the element that it refers to is another array.
1550	but it is a little bit different that i needed.
1551	i wanted to execute sql queries from the model.
1552	after spending more time testing and experimenting i think i figured it out.
1553	just in case if someone has the same need to be able execute mysql queries from the model, here the way i figured it out.
1554	i'm not sure if impacts the performance, but it works.
1555	i also figured out one more thing that might be interesting to someone who wants to use mysql queries (pdo) in phalcon.
1556	i always use fetch_assoc when fetching data, and to make life easier you can set up fetch_assoc by default at the connection this way you don't need to setattribute every time fetching data.
1557	here is how i have done it.
1558	at the bootstrap, when setting di class for the database connection, you can include the options....
1561	so, in your script which do the job you can directly use the value in your $_get entry.
1569	since you are checking if the session is set without starting the sessions, your code will fail.
1570	you said that you called session_start() at the top of your login page, but you did not mention your other pages.
1571	session_start() needs to be called at the top of every page in your application.
1572	i generally put my session_start() logic, along with a snippet of code for logging the user out after a period of inactivity, in an include file and then include it at the top of every page.
1574	if the index is not set, running isset() on that index within $_get returns false.
1576	first of all turn on error reporting (find it in php.ini in xamp/php/bin)
1577	the problem is most likely the fact that you're doing:
1578	if you have multiple rows, you can loop over them with
1579	first off, if this is returning only one row, you don't need a foreach .
1580	second, you are over-complicating adding the new ip address to the array.
1581	use implode(',', $ipsource) to turn the array into a comma-separated string)
1582	i'm not really sure what you trying to accomplish, but if you want to write some data to a file (for example), you could try something like this:
1583	will expand variable in place (1), if a variable $dbuser exists, because you are using double quotes.with single quotes you will need string concatenation operator .
1585	if $get or $post exist on the same line as a query string, you need to escape it like this one:
1586	better yet, you're already using mysqli, so use a prepared statement instead.
1587	if you're using mysqli, you may be using innodb, and it maybe that transactions are implicitly on, and auto-commit for the connection is off, so you may not be committing the transaction, at least if one is in effect.
1588	try adding mysqli_commit() before the close, and see if it helps.
1590	if the query fails, it may not show up on the page output, but it may show up in the error log.
1591	your form method is post so you need to add hidden field to embed/save the id (value from $_get) so when you submit this form you will get value from textarea as well as correct id value using $_post['id'] .
1593	and $this-&gt;input-&gt;post('username') is equal to $_post['username'] .
1594	this is what i advise you to use (it requires modification of your html though)
1595	from my understanding you want to pass _get variables for the error codes, right?
1596	as i see you are using _post variables for the form as you should.
1597	as you are working with codeigniter, you can use the uri structure of the framework and instead of working with _get work with the mvc structure.
1598	then in your controller for the login, in the error method:
1599	if you still need to work with _get variables, that is possible as well.
1600	go to the main application config file of the framework /aplication/config/config.php and have a look on the enable query strings section
1601	by adding ?goto=xyz to a url, you are adding the goto parameter (with the value xyz ) to the http get request.
1602	php is capable of understanding these parameters.
1603	the only thing you have to do in order to access it's value is to read the corresponding value of php's built-in $_get array like so:
1604	your while is not executing, probably because you don't have any returned values from database.
1605	you may use var_dump($result-&gt;fetch_assoc()) to see if the query has some results.
1607	if (isset($_session['user'])!="" ) { this is not how isset() works.
1608	and it will tell you what the error is so people on stack overflow don't have to guess..
1609	if you want to get hacked, that's cool.
1610	if not, maybe look into pdo instead.
1611	name the array something other than $search.
1612	it probably isn't the problem, but it looks odd to have the array created by explode() carry the name of the string being exploded.
1613	try something like $searched = explode(" ", $search); and then use $searched in the subsequent foreach() loop.
1614	what if the user only puts in one search term?
1615	if there is no space in $text_field then explode will return an empty array, which should thoroughly jack up your query.
1616	you should at least verify that there is a space in $text_field before exploding $search.
1617	likewise, what if the user enters two search terms, but one of the terms is two words separated by a space?
1618	again you are going to get "funny results" because you will get results that you don't want along with duplicated results as the query extends itself to both of the words in a term individually.
1619	you could use both get_result() and fetch(), but for just a single variable the latter takes less code to write, though it indeed looks unnatural:
1620	assuming you already have an email and you are looking just for a flag to see whether there is such a user or not, the code will be
1621	note that you should avoid unnecessary loops that suggested in the other answer, as it will complicate the code with no reason.
1622	1) as said in comments, sql injection is a major worry.
1623	you're using htmlentities to escape $email but that function is only good to prevent you from injecting html into the site.
1624	as for preventing something from messing up with your db?
1625	it assumes iso-8859 , etc... you should always use htmlentities when writing content to the user.
1626	not when getting content from the user.
1627	take a look into prepared statements to escape sql properly.
1628	2) after validating the user you're sending the md5'ed password back and forth as a cookie.
1629	non salted md5 is easlly decrypted using one of the many rainbow tables out there.
1630	just see how easy it is to crack a non-salted password.
1631	and this isn't a good enough session key.
1632	if you want to take sessions out of the server and the database for massive scalling see what laravel/php, play framework/java and others are doing inspired on ror/ruby - encrypted cookies.
1633	you might consider to make your code a bit more readable:
1634	using in_array seems to be easier to maintain and better to read than a long logical expression.
1635	also note that the loop is only necessary if the position of the value 7:1 isn't determined.
1636	you referenced to your $value and $value1 , and then unset them.
1637	do not use references, instead of that, update the value like this:
1639	no need to use nested foreach() .
1640	it looks like you're passing $value to the onclick event.
1641	since that's outside of the php loop, it will end up always being the last $value .
1642	to fix this, use javascript to get the selected value from the radio and append that to the onclick redirect.
1643	better yet, your load.php file should just simple check the 'files' key in your $_post and use that, instead of using get.
1644	that's the point of submitting the radio button, after all.
1646	strip_tags is sufficient to get rid of xss issues.
1647	but using a single regex is not, as you need to cleanse and whitelist all html attributes and tags.
1648	browsers are extremely forgiving and allow even malformed html that's not standards-compliant (also ie bugs).
1649	that's why it is pretty much unfeasible to use a regex for that.
1650	(despite the silly so meme it is possible to match html with a contemporary regex language, just way too much effort.)
1651	your $datospost is overwritten inside the while loop in every iteration, try adding an array at the begining of your code like $myarr = array(); and after you fill $datospost add it to $myarr with array_push($myarr, $datospost) ( you can do this after the if statement,
1652	also try var_dump($datospost ); inside the while loop to see if it's actually getting updated,
1653	you can add echo 'here'; inside if ($x['deprecated_nodeid'] == $data[0]) to see if your code actually gets into the if statement,
1654	you were pulling a query statement in the middle of a while whereyou're still retrieving the previous statement.
1655	this would requirepulling the data into multiple arrays and then processing.
1656	you should be using something like pdo or mysqli for this, but here's anexample with your current methods.
1657	also you were using isset on post... if post has anything in it, it will return as set.
1658	referencing a post variable that is not set will cause an error, so i'm checking to make sure that country is set then i'm provided a null answer to the switch.
1659	%5b and %5d are uri-encoded square brackets.
1660	this is a common way of sending multiple values for the same key to a server.
1661	php parses it into an array, so in this case:
1662	so in your code, $_post['content'] and $_post['content_attr'] should both be arrays.
1663	the square brackets that you've used are unnecessary, but won't break anything.
1664	you can probably do it, but you have to do it fully manually like so:
1665	i'd go for the latter as in the former you're likely to be writing your own serializer in the end :p - which is exactly why we have json.
1666	you have missed from clause if you checked $mysqli-&gt;error you would have known it by yourself where id = 50,51,52 is not a valid mysql syntax you need to use in operator instead with prepared statements it will be evaluated as where id = '50,51,52' .
1667	that's it - an id column is compared with a single string.
1668	you will want to use explode() and a loop to do it properly.
1669	you will also need to use implode to generate the right number of question marks:
1670	it seems you are checking the value of $v outside the foreach loop, which does not make sense -- $v is just one of the possibly many values in the array, so you can't use it to draw conclusions safely.
1671	of course that gets cumbersome if you want to check for a lot of possibilities.
1672	in that case you could use array_intersect and introduce some variables for readability:
1673	you're not checking the values in the array with the regular expressions.
1674	you can use trim() or specifically ltrim() to trim way the www.
1675	also, we are sure that it should replace only from the first characters.
1676	so, we need to use a preg_replace instead, making it replace from the start.
1677	i'm just learning pdo, but i think you need to use bindvalue , not bindparam
1679	i found this in a comment on the php docs:
1680	you may be tempted to do this bindvalue(':param', null, pdo::param_null); but it did not work for everybody (thank you will shaver for reporting.)
1681	if you want to insert null only when the value is empty or '' , but insert the value when it is available.
1682	for instance, if the user doesn't input anything on the productname field of the form, then $productname will be set but empty .
1683	so, you need check if it is empty() , and if it is, then insert null .
1684	first of all, they are not "fired at once".
1685	that is just impossible by its nature - other then by total accident.
1686	i had the same issue using select * in mysqli.
1687	the issue lies with the bind_result part.
1688	normally you would need to add many variables.
1689	meaning if you had about 20 columns, you would need 20 variables to include in the bind_result statement.
1690	you need to add variable witch will contain filename of image.
1691	if you make done all and it will work when try to change code to use mysql i , read here http://php.net/manual/ru/book.mysqli.php
1692	you don't have a session_start() call in that code block.
1694	if you have a simple array, i would join all the elements together into a string and run it against is_numeric.
1695	at least you would only have to do the numeric check once.
1696	as you observe different values of the $_server['request_uri'] variable it is almost certain that everytime you view a specific page another request to retrieve the previous post's page is sent.
1697	there could be various reasons for this to happen like scripts and iframes on your page.
1698	however from what you describe it sounds likely that link prefetching is the reason for what you observe.
1699	it is not possible to reliably check if a request is a prefetch request solely on the server side.
1700	some browsers send an additional http request header when loading a prefetch, but you cannot rely on this.
1701	it's important to note that there are several layers to consider when making a database connection.
1702	first you need to connect to the server, then you connect to your database of choice.
1703	once that's done then you can run your query.
1704	take a look at the php manual entry for mysqli_connect() http://php.net/manual/en/function.mysqli-connect.php
1705	fred-ii pointed out that "ci uses a different method as a prepared statement"looking back, i don't know how i lost track of that.
1706	all of a suddent i was struggling mysqli statements outside of the codeigniter framework, and barking up the wrong tree.
1707	offthebricks pointed out that "it's not too surprising that there would be no mysqli errors after the mysqli_connect method is contructed because you never actually asked it to do anything."
1708	you don't need to implode $temp_array if pmpro_hasmembershiplevel accepts array as its argument.
1709	when you implode an array you get string as a return value — that's not what you want here.
1710	if you think that the issue might be with the type of values, then you can try to cast them to integers, like this $temp_array[]= (int) $temp;
1711	as per the docs , array_unique compares elements as strings by default.
1712	this means your 2d array is being converted to an array of strings (all being "array" and generating the array-to-string notice) or which only one can be returned as unique.
1713	a third alternative is to refactor the loop body as a function, then also call this function on the first row before entering the loop.
1714	you can use fputcsv as this function.
1715	best of all would be to use both mysqli_result::fetch_fields and fputcsv
1716	if you can require that php be at least version 5.3, you can replace the foreach that generates the header line with a call to array_map .
1717	there admittedly isn't much advantage to this, i just find the functional approach more interesting.
1718	it looks like you are missing session_start() at the beginning of both files.
1719	php wont pass session information if this function call is not present.
1720	it is a good practice to have this call be the first thing in the file.
1721	say you have a variable $is_admin defined earlier in the code that gives someone admin abilities.
1722	if someone posts to that page with
1723	see your print_r section of second array it starts with index 1 and your $var assigned to 0.now here you are trying to access the 0th index.
1724	that is why you're getting this error.
1725	it's weird to encode a var_dump into json, you should just be able to do:
1726	so you need to include all classes before you started session.
1727	you are sending a post parameter with the key "select" to the server in your ajax call:
1728	in newtestx.php you are trying to retrieve the value from a post parameter with the key "name" - which doesn't exist:
1729	inline javascript is considered bad practice and there's no need to echo out the html markup, it makes the mark up harder to work with.
1730	you can convert your replace array to single dimension array like this and replace.
1731	or you can change the function pullglobalsmarttags to return single dimension array and use str_replace as above.
1732	you can even use the method you suggested, but it has much more replace in a loop.
1734	plus, who knows if you should be escaping those quotes with \ or not, since you didn't show the beginning of your string in your code.
1735	don't bother though... your code is incredibly insecure and wide open to sql injection attacks.
1736	use prepared/parameterized queries with pdo or similar, or you will be hacked without doubt.
1737	also, don't use encryption on these passwords... uses hashes with salts, which are one-way functions.
1738	you should also never assuming an upload succeeded.
1739	especially for a mysql dump file.
1740	it is possible that the upload was truncated, yet you blindly feed the file back into mysql, which could leave you with a partially/totally trashed database.
1741	you're close, however $fname in your html is empty (presuming you've submitted all relevant code).
1742	you need to either set $fname to the value of $_cookie['fname'] , or just echo the cookie value directly.
1743	2) you're stored procedure expects 5 parameters so you need to pass 5 parameters.
1744	if you don't know the values yet, pass either null or create another stored procedure.see this question for optional parameters for stored procedures: writing optional parameters within stored procedures in mysql?
1745	you dont need isset() and !empty() just use !empty() .
1746	you also dont need to mysql_string_escape() twice.
1747	it has nothing to do with md5() but you should change to sha1() anyway.
1748	a better approach would be to build your sql string up to reflect the data available.
1749	as you have sensibly named your $_post fields same as your database fields you can do something like this..
1750	this is all good for learning but if your code is going into production (as some of the commentators said) you should look to use a framework or library which will have solved all these problems for you and done a better job than i have above.
1751	if this doesnt work please update your post showing the contents of $_post by doing print_r($_post) at the top of your script.
1752	hard to debug until we have seen what is actually being sent in to the script.
1753	a while loop doesn't create a new scope, as you can see here: http://codepad.org/h1u3wxzd about the code itself, here's a few suggestions:
1754	1) learn how to use join 's.
1755	it looks like you could fetch all the necessary information with a single query, something like:
1756	2) you should separate the code that gets data from the db from the code that constructs the html (?).
1757	perhaps you could put that in another method.
1758	3) i take it you are using the generated json to send it via ajax to a client.
1759	in that case, i would totally cut the fat (eg: generated markup) and send only essentials (picture id, title, fname and whatever else is essential) and generate the code on the client side.
1760	this will make your page load faster and save you and your visitors bandwidth.
1761	no, it should not be necessary.
1762	id should be of numeric type.
1764	do you insert the value in html code -> use htmlspecialchars .
1765	do you plan on using it in subsequent queries?
1766	in any case, the $_session should really store the original value imho (i.e.
1768	just consider what would happen if you required the original (unescaped) id at some point, or have it escaped in a different way.
1769	it would be cumbersome to unescape the value that you have put in your $_session .
1772	you can store the id in your session as as, but whenever you use it in another context, you have to escape it appropriately.
1775	you can build the form like that, but when you submit it using post , that specific variable will be stored completely in $_post['date_month'] .
1776	in your case, when you submit the form, you will find only the page variable in get (assuming there is no query string in $_server["php_self"] ).
1777	however, if you want the user to only provide the month in one way ( post or get ), you'd better use something like (written out for clarity):
1778	also, you can try to run the same query in phpmyadmin to see if that works.
1779	if it does, you're sure this is a problem with pdo.
1780	if it doesn't, something must be wrong with the mysql server.
1781	but perhaps the easiest way to debug is to do something like this:
1782	this will give you more debug info.
1783	when the query fails, the exception will be caught by the catch block, and the message will be outputted.
1784	this message usually tells you where the problem is.
1786	as for checking with the www.
1787	at the beginning vs without it, you can add an extra check to your if clause;
1788	when using mysqli, you have to add the connection string to your query.
1789	switch your calls in index.php to mysqli calls and make sure you're using a valid $conn .
1790	you would want to take just the for key-value pair and strip the for= part instead of just taking the full string.
1791	for example, you could further the explode the string by = , check if the first part is for , and if so use the second part as the ip.
1792	then also in the root folder, you'll have a filepage.php file that can handle the request.
1793	the full url that was requested will be passed into the $_get['q'] parameter.
1794	you'll have to parse that parameter to be able to identify exactly which file was requested, something like this:
1795	this was a little verbose, but i wanted to make sure all the steps were easily readable.
1796	should be noted that this was written without the aid of a test environment, so it may contain errors.
1797	a non-persistent singelton connection (pdo) is getting closed at the end of the script (response).
1798	persistent connections are not closed at the end of the script, but are cached and re-used when another script requests a connection using the same credentials.
1799	a persistent connection can cause unwanted side-effects and security issues.
1800	you can also omit that loop by using -&gt;fetchall() using the same flag:
1801	i think since you don't get to have a value on the option field, you might want to try some javascript.
1802	for example, try making a hidden field in your form, and then have js on your option tags like:
1803	that probably has issues with it.. you might have to play around but i hope you see what i am saying - use js to dynamically change the hidden input value to what you want, and then grab that value from the other side with php like:
1804	by this i assume you mean you are trying to go to the url:
1805	you can use $_request['qno'] and $_request['day'] to receive the variables both ways.
1806	of course, your application has so many security holes i won't even touch.
1807	phpsessid: this is is your php session id, this is fine preference=1; type=a: these are the cookies set by your code in the op because their the keys are set with plain text.
1808	preference[$id]=1; type[$id]=a: these keys cause the issue.
1809	first of all, these seem to be duplicate of preference and type, put the bigger issue is that they have a [$id] in their names.
1810	when php parses the cookie string into the $_cookie array, these values are interpreted as arrays themselves with $i as their key.
1811	when you try to read the preference and type keys as strings to insert their values into the sql query string, you get the "notice: array to string conversion" message.
1812	since we cannod debug your code, we cannot determine from where these duplicate and incorrect keys are coming from.
1813	my first guess is that these cookies are remnants of an earlier test.
1814	try to remove them in the browser used for testing.
1815	if they reappear again, then you need to debug your code an establish where you set additional cookies.
1816	my other suggestion would be to check if you could use session or get parameters in the url instead of cookies for passing these variables.
1817	also, your getsqlvaluestring() function automatically wraps "text" parameters with quotes, so you need to removes the quotes around the placeholders.
1818	place this at the top of your script (for development only)
1819	drop the mysql library and move your code to pdo, you won't look back.
1823	define the options you want to check for, then use in_array to check if one of them is used:
1824	you're using the same names for each field in each row, so when you post the form, only the last is accessible.
1825	use array notation for the fields like this:
1826	this will give you an array for $_post['winner'] instead of a single value.
1827	do the same for the other &lt;input&gt; elements.
1828	also, the code that processes the form after it's submitted only processes one value.
1829	you'll need to modify that to loop through these arrays.
1831	switch to mysqli_*() or pdo now.
1832	your code is susceptible to sql injection.
1833	escape your input variables with mysql_real_escape_string() (or the mysqli equivalent) or better, switch to prepared statements.
1834	one of the key trouble shooting steps was to use var_dump to validate that the $_post actually contained data.
1835	i understand there are several ways this could be done including the responses shared by hobo and syed, as well as using javascript, but was really glad i could accomplish my goal with just php.
1836	if the actual names of the input is operator_id , then you can't access it with $_get['operator_id'] , you have to use $_get['operator_id'] .
1837	another problem is that you have an extra set of braces.
1838	so you're doing all the database code even if the if (isset($_get['operator_id']) is false.
1839	the correct way would be to check if the resultset contains any rows.
1840	you can do this with mysql_num_rows() :
1842	they are no longer maintained and are officially deprecated .
1844	if you choose pdo, here is a good tutorial .
1845	there might be a problem in your query as you do not escape your arguments, so it will fail it $row actually has any quotes in it.
1846	this would be avoided with use of pdo instead of mysql_ functions which are no longer maintained.
1847	query your table like this instead:
1849	so update your code with this:
1850	you'd have to replace the filenames with underscores when you save them to the server, also.
1851	since you don't have the code on where you save the files, you can urlencode() the link url so it will not be broken by hazardous characters.
1852	note that originally it was broken by spaces because you didn't have the href value enclosed in quotes, which i'm doing here:
1853	main thing is that you didn't include delimiters.
1854	i added a start of string anchor since you had an end of string one.. but it's hard to know if the regex will suit you without seeing your content.. this pattern assumes the only thing in the string is your date.
1855	also fyi, this is just a simple verification.. it validates format but not if it's a real date.
1856	if you want to validate it as a real date, you can explode at the / and then use checkdate
1858	in addition to using prepared statements to protect queries from injection.
1859	i think you've just missed assigning the return value from str_replace() to your session variable.
1860	str_replace() doesn't modify the variable you pass in by parameter directly, it returns a new value, based on the function call.
1861	but, nonetheless, try to use ajax in wordpress like this and don't use query_posts .
1862	str_replace returns the stripped string - it does not work directly on parameter 3 (since the function signature of str_replace does not list any parameter as a reference)
1863	str_replace() returns a string , so you should initialize your variable to it again
1864	it shows "array" because you need to iterate over the results, and not simply just echo it out.
1865	use var_dump or print_r and you should see the array; you can then loop out the results as you wish - var_dump will just show you the whole array.
1866	the error message "node no longer exists" in simplexml means that you are trying to remove a node that no longer exists.
1867	as you already noticed this does not happen in the first iteration's unset, but in a following iteration.
1868	if you now imagine that simplexmlelement::children() returns an array with the zero-based index of the children as the key and the child element node as the value, consider the following to better understand:
1869	one common way in simplexml is to use a simplexml self-reference as outlined by hakre in that question:
1870	as you can see, it does not need to use any key.
1871	another option is that you reverse the children array and unset from the end, not the beginning.
1872	that way you don't pull the indexes under your feet:
1873	but the self-reference is likely much more easy to use because it also works in other situations where you want to unset something in simplexml, so it's worth you take that well-explained read over there .
1874	i would also say that the exit does not belong into that method, but i left it in so you can better orientate.
1875	instead the method should just do it's job to output the truncated xml and not care additionally about ending the script.
1876	move it out and place it after you call the method instead because that are two different kind of tasks: the one is xml processing and output and the other is to the program flow.
1877	$_server['http_host'] would contain port number as it is set in the host: header
1878	the variables get evaluated from right to left.
1879	the result of an assignment is the value being assigned.
1880	in your example you are setting both $subject and $_post["foldername"] to $foldername, which is unset.
1881	because of the way that session_set_cookie_params works, it's expiry isn't updated on each page visit properly.
1882	you need to use setcookie for this and pass along the parameters necessary, for instance, here's a snippet from the documentation for session_set_cookie_params
1883	but note there is nothing like "universal sanitization".
1884	let's call it just quoting , because that's what its all about.
1885	mysql_real_escape_string($str) mysql_real_escape_string(addcslashes($str, "%_")) htmlspecialchars($str) json_encode() - only for utf8!
1886	i use my function for iso-8859-2 mysql_real_escape_string(addcslashes($str, '^.[]$()|*+?
1887	{}')) - you cannot use preg_quote in this case because backslash would be escaped two times!
1888	if you use pdo (properly) you don't have to worry about mysql injection.
1889	you can increase the size of text fields in the /etc/odbc.ini file used by freetds.
1890	you can also try using the php low level odbc routines to make sure that you can get that level of data retrieval, then work back up to using pdo.
1891	this will force the connection to be a mysqli class, and on the occasions it is not set, it will throw a fatal error closer to the source of the problem.
1892	in the error output, it lists the possible values for ext_name.
1893	there is mysqli and pdo_mysql , but not mysql .
1894	your command does include mysql , and the first line of the error seems to be complaining about that.
1895	try taking that out and see if that works.
1897	it is common practice in mvc architecture to do so.
1898	should the class have methods for ide completition?
1899	that is actually up to you, but common practice at workplaces where i worked was not to have them but make const string identifiers of the fields instead, which are then used to specifying the index in the global $_session variable through an object, such as your sessionmanager .
1900	it is a bloated formatting for var_dump.
1902	if anyone is interested in this: i made 2 fields in the admin panel and the variable that was being sent to the database was "field 1 + ' | ' + field 2" and then i used explode to display the content on 2 sides, separator being " | "
1904	in your case you should use bindvalue instead:
1905	or you can pass your array directly to execute() method:
1906	so when your foreach loop ends $value has value of last array item apple .
1907	so when execute runs, both :ctid and :p1 values are becoming equal to apple .
1908	surely, this is not what you want)
1909	then on your page that has your form, you can do something similar to:
1910	then send the text to the server with any of the common methods, like setting the value of a hidden input element to be the image-data string.
1911	there are various ways to make use of this string now.
1912	by setting it to the src of any &lt;img&gt; , you'll find out how that it's a valid url that completely encodes the image, and you don't have to look hard to find ways to turn this encoding into anything else you might want, as it's fairly common standard
1917	in order to call a function or class method, php has to evaluate all of its supplied parameters.
1918	in order to call mysqli_fetch_row php will first evaluate its argument, that is $mysqli-&gt;query("select id from users where id = $_post[uid]") in order to call $mysqli-&gt;query php will first evaluate its argument, that is "select id from users where id = $_post[uid]" now php will pass the query string to $mysqli-&gt;query and return the result set (or error maybe) that return value will be passed to mysqli_fetch_row
1919	i would say that this is not php specific, but a quite general behaviour in parameter evaluation.
1920	i realized there are some few typos in your code.
1921	you missed an opening bracket of the pdo constructor.
1922	the second one assigns a default value of 0 to $page .
1923	and the if statement will check first to see if $_get['page'] is set (to avoid warnings).
1924	if it is set indeed, it will cast the value of $_get['page'] to an integer and assigns it to $page .
1925	finally, $page = 0 simply sets a default value for $page .
1926	if there is no value in $_get , $page will remain with a value of 0 .
1927	this also ensures that $page is always set, if you're using it in code below your snippet.
1928	i don't know what you mean by merge them into one ; the second snippet is an extension (and improvement) of the first.
1929	when a cookie is set, it doesn't update $_cookie , so you can't access it immediately.
1930	it exists in $_cookie on the next page load.
1931	or you can add it yourself, directly:
1933	at least sanitize and validate your inputs so your data will be as valid as you can.
1935	if you are using older version try installing ph5-mysql first.
1936	in your new page you would check $_get variable to see if the keys are set.
1937	firstname =somename&amp; lastname =somelastname so the keys you are looking for are firstname and lastname .
1938	you would have to check if the key is set in order to avoid getting undefined indexes.
1939	this checks if the key is set and if it is sets $firstname to the data from the url otherwise to null
1940	since you are using mysqli you could take a different approach to your code, and use something like
1941	i've never used mysqli and probably will never after doing this but i believe it would be something like the following:
1942	$_session['username']; is not set, therefore you will get these notices and errors, the proper way to check would be:
1943	if($_session['user_id']==$id) is specific to the blog owner, right?
1944	so you make this conditional check if the session id is in an array of acceptable id's.
1945	this has been updated to use the friend array as updated in your question.
1946	you pass the input name as an array and then you can access all checked boxes using the var itself which would then be an array.
1947	set the name in the form to meal_cat[] and you will be able to access all the checkboxes as an array.
1948	it will be an array, the same thing as $_post['meal_cat'] .to print the array:
1949	and if you want that data in the comma separated list then it try implode
1950	you can check at the time of insert into mysql db.
1951	if a variable has been unset with unset(), it will no longer be set.
1954	and after that you can insert the $cval into the query for execution purpose.
1955	at the top of the form, after it has been displayed but before it has been submitted, add this code:
1956	this immediately showed a missing field in the $_post variable (conf_email) which was then narrowed down to a missing '=' sign in this case.
1957	i would split the query building into two phases and force an output there as well, and i would move it above the if ($match so that you can see the query always regardless of the logic:
1958	i think it is better to write your logs to a file, instead of a database.
1959	especially since you want to log pdo errors, which indicate something is wrong with your database connection.
1960	you can show the user a nice error page by catching your errors.
1961	you can redirect your users to your error page then, in case something went wrong.
1962	so this is just a suggestion as i have never tried this but after thinking about it a bit i think it would be an interesting option to explore.
1963	as i am fairly new to php &amp; pdo i'm sure there are other and better ways.
1964	this way you would avoid a db connection (which is the problem i guess) but still save the error.
1965	you would perhaps want to omit the echo'd text after die within the if statement.
1966	you have to understand that pdo do not generate a "safe" or "unsafe" error message.
1967	it does generate an error message.
1968	the rest is is the responsibility of site-wide php settings.
1969	you need to set up php error handling, not pdo.
1970	note the line i added to var_dump sub-objects.
1971	the error you were initially getting was that the elements of your sets array were also objects, not strings as expected.
1972	if you only need to access certain elements of the set objects, you can access them using $val->property.
1973	the problem is that if the value has an apostrophe this happens:
1974	that way the apostrophe's get encoded and will be editable in your form
1975	simply use mysqli's prepared statements and you will be fine.
1977	even better is to filter the input to only what you need, and save only the filtered input to your database.
1978	or you can use str_replace to replace all spaces with the &amp;.
1979	i don't know if i understood correctly but maybe you want to do it like this:
1980	used in_array() to check if the item_id exists somewhere in $cartar .
1981	no matter on which position in array.
1982	implode converts an array to a string, whereas from your working static version, it looks like the api accepts a raw array.
1983	you're sending it the string "1,2,3" , which it doesn't understand.
1984	if you just need to know if two arrays' values are exactly the same (regardless of keys and order), then instead of using array_diff, this is a simple method:
1985	the above code will rewrite an url such as www.examp.le/foobar123/ to www.examp.le/index.php?target=foobar123 .
1986	you can then use the $_get variable to read the value of $_get['target'] .
1987	it will contain the leading slash, i.e.
1988	/dnd5je from your example, which you can easily remove.
1990	point is, your php doesn't have to be a continuous block, you can close your php tag at any time, resume using regular html, and then open a new php tag and continue in your loop.
1993	you can't write a if statement in a array declaration, but what you could do is to use a ternary operator like this:
1994	where it push's one or more elements to the end of your array
1995	you can get error messages from form using one of these:
1996	first check if the request is post in your action
1997	it is not possible to run multiple php scripts in parallel for a single session, because this would lead to unexpected behaviour when using session variables.
1998	your problem is that you are submitting your form for the specific page login-process.php from there if it is everything right you redirect that page to the index page here: header("location:../index.php"); .
1999	the problem is that when you do that you loose all variables created at that time.
2000	php works in a request context so, you submit your login it get processed then you redirect it (it is like you have submitted again).
2001	with your current code you can solve it in two ways
2002	1 - either send your form to the index.php ( &lt;form class="login-form" method="post"&gt; if you don't add the action it will submit to the same page, therefore login.php) as it already require the login_process.php code but you will have to remove that redirect ( header("location:../index.php"); ) and add some control variables to show the actual index page and not the login form again.
2003	note that depending on your database solution you need to do a case-insensitive select / like.
2006	my development environment has a rather distinct path structure so this works well, and i don't need to worry if additional domains are added to $_server[http_host] , or a client that provides an incorrect http_host value (although that would be rare ...).
2007	why the addslashes() and htmlentities() ?
2008	those shouldn't be there, because escaping is not a concern of the class.
2009	first off, more than three parameters in the constructor and most of them are not required straight away if you introduce a separate validate() method.
2010	now, the dependency on $notice and the other two arguments are local to only the validate() method.
2011	i'm using call_user_func_array() here to proxy the arguments to the other validate methods, so that you can get some ide code insight goodness:
2012	first of all you can safely remove the following statements.
2013	the parameters are already escaped by pdo.
2014	you don't have to do it using obsolete methods.
2015	that method will also not work if you don't have an active mysql connection
2016	thirdly i suggest you echo $e-&gt;getmessage() in your catch block to see if there is any exception thrown.
2017	when you click your (x) mark to delete/remove product from cart, at that time you can get that product's array key.
2018	now you know that this key is unique as (i hope you are using the same key to store that products data in all arrays) in all other arrays i.e.
2019	id , pwidth , etc.., you can unset($key) that key from all the arrays and than can do array_values($array) to reindex the arrays.
2020	and of course, you need to move your getcompanies call outside of the loop.
2022	* and are going to be removed from the language soon.
2024	there's nothing special whatsoever about post requests and sessions.
2026	at the beginning of your document, this will start the session engine and enable you to set session variables (ie.
2027	if you're wanting to get values from a $_post you could relate the two together by :
2028	i also encountered the same problem recently.
2029	i could not access the contents of the $_session variable.
2030	2) another thing that may cause this problem, maybe a failure to start a session at the top of all the files that may require access to the $_session variable using
2031	the problen is that you are using $n=$_get['n']; but the method you are using is post
2032	i have a had a couple of upvotes on this answer since posting it originally, and i don't want to make references to things like add connection here...(should be a pdo or mysqli_) without actually showing that so here is a little rewrite with proper connections and such.
2033	the function.pdoconnect.php is where your database credentials are populated:
2034	first of all, don't check with isset.
2035	since $_post is always generated you should be using !empty().
2036	and you are having issues because you don't have table variable set, $table_name needs to be defined.
2037	if you are inserting questions to a table named 'questions' simply change your sql to:
2038	you're on the right track yes.
2039	however you need to make a couple changes.
2040	then you need to make sure you are using unique key names.
2041	so either do action1 and action2 , or better yet create an array of actions like this:
2042	no problem if you use tinyint, but i prefer enum to determine user access because it direcly shows the user access.
2043	not just number and i must remember again what mean of 1,2,3, or whatever.
2045	you can use an array of allowed column names to sanitize the query.
2046	that'll occur when there is no element p in the array $_get , because despite the fact that you went to the trouble of creating $page to cover this case, you go on to use $_get['p'] everywhere instead anyway.
2047	like lucia angermüller suggested you could do something like this
2048	your connection handler is $con , not $mysqli , it should be like this:
2049	as pointed out by @mrcode getjson() just does a get request.
2050	so i changed the way to access the parameter in the php code from $_post to $_get .
2051	the other option would be to leave the post request in place, which would change the client side js to
2052	finnally i use the str_replace and displays both videos.here's is my code , maybe will help someone in the future
2053	another way to do it is in javascript, there might be some scenarios where $_get['id'] is set but the actual image is missing.
2054	however, in order for your code completely to work the way you want it, here what i would do.
2055	the following control i think was creating the biggest confusion in your code:
2057	here is an example using $_get .
2058	you can however use $_post and would need to make both directives match in both files in order to work properly.
2059	you can also check if a color was chosen.
2060	if none are chosen, then a seperate message will appear.
2061	get requests can be cached get requests remain in the browser history get requests can be bookmarked get requests should never be used when dealing with sensitive data get requests have length restrictions get requests should be used only to retrieve data
2063	if you want to turn specific values in to new variables if they have been selected:
2064	first off, since you explicitly put datatype: "json" , you do not need json.parse .
2065	second, just build the markup after receiving the response from the server:
2066	sidenote: i suggest use $result = $stmt-&gt;fetchall(pdo::fetch_assoc); , since you really don't need to values in numeric indices.
2067	you could do something like this:
2068	what is important here is that the value of $column can never be something else than what is specified, namely either 'column1' or 'default_column' , no matter what the input is.
2069	so you're not vulnerable to sql injection.
2070	i would advice to check the other url parameters as well, if only to prevent unexpected errors.
2071	as a test before you accept the value of $_get['userid'] .
2072	if you're not going to have repeat prices, use the price as the key of the array.
2073	if you will have repeat prices, you could probably use array_walk or array_multisort.
2074	to find which radio button was selected you need to look at the value of $_request['color'] because you have called the radio button set name="color"
2075	so you need to put a unique value into the value="" attribute for each radio button
2076	now in your php you can access which radiobutton was selected using $_request['color']
2077	first things first: do you have any data at all on the device that you're using?
2078	i've made that mistake: try to get data from an account with no google fit data at all.
2080	of course you'll have to replace the $variable_that_has_id with whatever $row[] correlates with the id in your database.
2081	after that you can create a submit button, then use the form to post data to the same page(or a different one) and you can use the $_post variable to grab whatever values were checked and submitted with the form.
2082	i highly suggest getting familiar with creating forms in html and usage of $_post since it is relevant to what you're doing.
2083	if you want to allow the user to only select one option change the input type to "radio"
2084	it looks like somehow your header is getting sent no matter what.
2085	without looking at the rest of your code i cannot be sure, but print_r , echo , or any other type of output before the header would cause it to not be sent.
2086	isset() checks whether a variable exists.
2087	i would advise to use one of these:
2088	so the easiest (from a procedural re-factoring perspective) is to use mysqli_*() functions and use mysqli_real_escape_string() .
2089	note: use &lt;textarea&gt; , if you use input and press enter then form will get submitted.
2090	the name attribute in a radio input specifies it's radio group.
2091	therefore, when you try to submit the form, it sends both values.
2092	specify the name attribute of both to something like gender , and it would work.
2093	and in the php portion, you just need to request that value once, so do it with: $gender = mysqli_real_escape_string($con, $_post['gender']);
2094	once you read up on php's pdo you can rewrite your code like this
2096	in your example you search for "xml" but the first output shows that there is not "xml" in your string.
2097	when you echo false it shows nothing.
2098	thus you can't see the result.
2099	must return false from strpos because the binary (string) sequence " xml " is not part of the file.
2100	the file is utf-16 and not utf-8 encoded.
2101	let's see the string " xml " in the different encodings:
2102	fundamentally you're just experiencing here that strings in php are binary and when you output them to the browser, the browser does hide some characters, here the nul characters of which there are many in the file.
2104	you can have a try like blow:
2105	you are posting to test2.php , so only test2.php will receive the $_post , not the first page!
2106	if you call var_dump($_post) on the second page, you should see the variables being sent.
2107	but $_post will be empty when the form is displayed on the first page (i.e.
2108	nope, not with the current structure.
2109	you could however change the structure a bit to support this.
2110	you could use an object instead of an array and use the name as keys:
2111	you can still loop over the values as you can turn this whole thing in an associative array by passing true to json_decode as a second parameter.
2112	i for one am not a big fan of my own answer, and would probably just loop the thing, but it may still answer your question.
2113	i assume you are using pdo, then you have to connect to the database first:
2114	it's not returning the index joe because the value 21 is in the first array.
2115	it does store the boolean value.
2116	so when you get the value you should expect a boolean value.
2117	if you use var_dump($a) instead of print_r you will see that it is stored perfectly as
2118	the name attribute in &lt;input&gt; and &lt;textarea&gt; define what name the field has.
2119	the data of the fields is then sent to the server with the corresponding name.
2120	so if you send data with name="title" but reference $_post['cdtitle'] in php, the data won't be found because it's in $_post['title'] .
2121	you need to install a package which contains the mysql or mysqli php extensions (preferably mysqli).
2122	starting with version 4.0.7, phpmyadmin shows a proper error message for this situation, see https://sourceforge.net/p/phpmyadmin/bugs/3997/ .
2123	if a user exists already, this will just add to the current credits the new value, but it won't change anything else.
2124	if you also need to increment other columns such as videos , do the same thing i did for the credits .
2125	my guess would be that the file you are trying to read from does not exist.
2126	remember that, if you are using linux, file names are case-sensitive.
2127	use the file_exists() function to check this:
2128	the undefined index notice, means that the index 'state' &amp;&amp; 'area' does not exist in your $_post array.
2129	this usaually means the data from the form isnt being sent properly.
2130	try doing a var_dump($_post); see if that brings up any data and check if that names are there
2131	as you can see, in the in the values are unquoted, so they're interpreted as field names.
2132	you need to add quotes around each value in the in .
2133	you can fix it by looping, and adding quotes around each value:
2135	with meekro you cannot get typed results, as it is not using prepared statements - the only way to get the data type right off the fetch.
2136	with pdo, it is possible only if pdo is built upon mysqlnd and emulation mode is turned off .
2137	having there prerequisites, you can have your results already in corresponding types
2138	also try printing $_post and $_session arrays so that you can come to know whether all parameters are passing/ passing correctly and all the sessions are setting up properly.
2139	that is because.. when the if fails which means the $_post['sub'] is not set , so when it comes to the else part , you are trying to output $_post['sub'] which was actually not set ( which is actual source of this problem )
2140	i don't know what your form looks like, but basically php tells you there is no $_post['month'] .
2141	what you really should do is start debugging.
2142	see what is in $_post and what is not.
2143	try to find out why php is telling you that $_post['month'] is non-existing.
2144	you assign a normal string to $days and overwrite it on each iteration.
2145	you could append to it, by using the .= operator.
2146	( $days .= ' ' .
2147	$day ), but maybe easier is to use implode :
2148	note there is a small functional difference.
2149	implode will add spaces inbetween the days, while the foreach loop will also put a space at the start.
2152	if you are looking for looking_word parameter in $_post variable, you won't get it as its part of a get request and will be available in $_get .
2153	if you want to make it general you can check $_request variable.
2154	as others mentioned, please have a look into the get and post concepts and $_get , $_post and $_request variables.
2156	right, before we go any further.
2157	you are opening your self up to the biggest types of sql injection attacks possible.
2158	in addition your form variables need to be called from within the $_post[] array.
2159	so you would need to call the variables as $_post['firstname'] instead of $firstname .
2161	in addition your mysql_error() call is coming before you've actually made an sql query so it would be hard pressed to find an error in something it hasn't actually done yet.
2162	i would suggest you re-work all of this with correct bound sql queries using pdo or similar, of which i am of course happy to help with.
2163	you should include connections.php on the top on your page if you want to make a connection to a database.
2164	however if you're using mysqli i would recommend using the object orientated syntax over the procedural.
2165	that way you don't have to parse the $connection variable each time you query.
2166	also, you don't have to close the connection every time when you're done querying.
2167	its done automatically at the end of the script and without it it can continue to use the already opened connection.
2169	you'll have a space at the end of the $imglist string, which explode() will turn into an empty element.
2170	there is no need to build a string of images and then explode that string into an array of images instead just add the images directly to an array as radu mentioned.
2171	if you do the preg_replace on the full string you only need to make one regex call.
2172	then instead of explode and implode i use str_replace to add the li tags.
2173	edit i saw the wish for iphone 7 plus thing.
2174	what i do is i add a ~ at the end of the string for the regex to capture.
2175	this means i can use $1 and $2 in the regex replace.
2176	then to make sure i don't keep the ~ in the end string i need to remove it in the str_replace.
2177	in your html you can have your checkboxes like this (considering you are storing ids of some sort)
2178	on you php side you can use function implode to form ids into a string as shown below (considering you are doing a post)
2179	where you read from the database you can transform the value from db to an array like this
2181	here's a solution that replaces a lot of your code and uses pdo library (instead of mysql_).
2182	you'll have to replace database connection info, of course.
2183	it really does replace a lot so, if i took out some functionality that i shouldn't let me know and i'll slip it back in.
2184	now, here's another version of the above code but with some select statements before and after the updates happen so you can see the changes.
2185	you might want to test this by using the second script and visiting the ajax page directly in your browser.
2186	after testing, be sure to remove any unnecessary print/echo/var_dump statements.
2187	almost, array_chunk() makes multiple pieces instead you want to slice the array in two pieces by a given key, this can be done with array_slice()
2188	for the types you can also implode them into strings and feed them into mysqli_stmt_bind_param .
2189	there's no evidence of any of the code you posted of anything that actually connects to the database (a mysql_connect() call).
2190	without that i can only assume you've not connected to the database.
2191	you can't execute queries if you're not connected.
2192	however i won't show you how to fix this because you're using deprecated mysql_* functions in your code.
2193	you need to switch to mysqli or to pdo.
2194	there are plenty of tutorials on how to use those libraries.
2195	so i second jamwaffles comment to use print_r , i myself prefer print_r unless i really want to get picky on the types of the values.
2196	and to be sure the user really hits the button you can also add this
2197	if you face such problem in the future, it is a good practice to var_dump the results like:
2198	no, you should not create multiple instances of pdo in that case.
2199	just create 1 instance and use pdo::query() on it.
2201	you can find an example in the documentation for pdo::prepare() .
2202	yes, you initially connect to the database by creating an instance of the pdo object.
2203	but you use this object to run queries with and the results are packed into another class.
2204	so you mainly have several classes with your query results, but just one connection to the database which runs the queries.
2205	the pdo object stores the connection in which the queries are carried out.
2206	normally, you only need one of those.
2207	while there are cases where 2 connections might be convinient (when connecting to entirely different databases for instance), you generally only need one instance of the pdo class.
2208	what you will have multiple instances of, is the pdostatement class.
2209	which stores the query statements themselves (as well as the results).
2210	so for every query you will have a single pdostatement instance.
2211	you need to wrap a preg expression with a non-alphanumeric and non-backslash character (the same one on each side).
2212	by using this way you can redirect a client on its correct application's subdomain, if he tried to access other clients' subdomains.
2213	in this way you can keep users from accessing other clients' subdomains.
2214	if you want to get fancy, you could do something like use session_set_cookie_params so the same phpsessid cookie could be accessible to all domains and subdomains.
2215	this has its benefits especially if your centralized log-in page needs to detect if the user is logged-in for a particular domain or subdomain.
2216	or if you wish to allow a user to log out from all subdomains at the same time, or if you'd like to create an administrative account which can access all subdomains.
2217	never trust the session id being sent, even if the cookie is tied to a specific subdomain, since the sessions for all subdomains are being stored in the same directory on the server.
2218	a solution for this might be: ini_set(session.save_path, "/path/to/your/folder/$clientid") then you'd have a unique directory dedicated for each client for storing sessions.
2219	the benefit of this approach is that your $_session won't contain information related to another subdomain.
2220	you can also take advantage of sesssion_name so instead of phpsessid you could use client1 or client2 to it's clear which client the session belongs to.e.g.
2221	client2=8d72edf35377a27388cb;client8=b47277bc8e3d4a5f then php can read this cookie and know the client the session exists for.
2222	you can also use a combination of all of the above, whatever works for you.
2223	see the session-related functions here: http://php.net/manual/en/book.session.php and the session-related settings here: http://php.net/manual/en/session.configuration.php
2224	based on your code, it looks like $this-&gt;input-&gt;ip_address() has the possibility of returning '0.0.0.0' if the ip is not valid or could not be determined.
2225	however, your comments also state that you need to record the ip address even if the above method returns '0.0.0.0'.
2226	first, i'd recommend checking to see if $this-&gt;input-&gt;ip_address() and $this-&gt;valid_ip() are working as expected.
2227	is $this-&gt;valid_ip() returning false for ip's that should be considered valid?
2228	second, i'd update your code to always fall back to $_server['remote_addr'] if $this-&gt;input-&gt;ip_address() returns '0.0.0.0'.
2229	or if you wanted, you could not use $this-&gt;input-&gt;ip_address() and do as @rockerest suggests and just use $_server['remote_addr'] to being with.
2230	this is how to open the connection to the database using mysqli :
2231	i don't know the exact structure of your search table, so it is possible you will have to adapt the above code to match your actual field names.
2232	at the end of this block, if there was some search field in the request, $where will not be empty.
2233	also notice that a non empty $where will always begin with " and".
2234	this makes it simpler to compose the clause dynamically, but requires a first condition our $where can be appended to.
2235	the "1" in the query is an always true condition to which we can append our $where and be syntactically correct.
2236	first of all, i would suggest to replace \n\r with some specific character then just explode the string by that specific character because the way you used for splitting new line is not recommended.
2240	in short, it depends if you want to send a utf-8 email, or an ascii email .
2241	ascii email - you'll need to do a html 4.01 entity swap out (which is the default), but with the same ent_disallowed flag:
2242	this will swap out as many entities as possible to make sure things like &eacute; are represented in ascii (as &amp;eacute ;).
2243	this part depends entirely on your audience and the kinds of email clients you're expecting to interact with.
2244	a brief tour of history should help you decide!
2245	if you're going for broad coverage with older clients then sending an ascii email is a safer bet.
2246	that means you'll need to convert all of the unicode code points which are out of range of ascii into an ascii compatible representation (html entities).
2247	fundamentally this is targeting older clients so using ent_html5 - the greatly expanded entities set - makes no sense here.
2248	however here's the other issue - the older html 4.01 entity set represents far fewer unicode codepoints, so if you're expecting to send text in a broad range of languages then you'll most likely need to send a utf-8 email instead.
2249	you're not setting the $pk variable unless isset($_get["pk"]) , yet you're still using it later in the query.
2250	this isn't a good idea, since depending on other circumstances, this can lead to bugs.
2251	what you want your logic to look like is this:
2254	you need to use the fetch commands the pdostatement has.
2255	you can use bind_param from mysqli to accomplish this.
2256	in this case the i and s are referencing the type of the parameter, as seen in this table (available in link):
2257	then you can get the value you want with $row[$_post['colour']]
2258	due to dependency injection you should pass the pdo connection as a constructor parameter.
2259	then you can consider to mock the connection and ensure that expected methods are called the expected times with expected parameters.
2260	you can use libraries such as mockery, prophecy or phpunit mock objects.
2261	then this is not a model but a provider or repository.
2262	so you should call it userprovider or userrepository
2263	the best you can do is put all your post variables to a session like this:
2264	when situating the header('location: page2.php'); in a if condition, etc.
2265	make sure that it will be in the first php script of the page and above any html output.
2271	php does the necessary change, sends the page to the browser, and forgets about all your variables.
2272	if you need this data to be retained across requests, there are several possibilities:
2273	if it only needs to be persisted per user, then use session variables .
2274	if on the other hand, it must be a global setting, the same for every user, then you should look to file storage , or to a database , like mysql.
2276	you can apply array_values to print the value based unique array
2277	since you are getting the data from a computer at a remote site instead of locally — yes, it will.
2278	risking your live data by exposing it to your test code is a very bad idea.
2279	in this test got you the exact opposite of what you meant to do (read it as "not"), removing it should help.
2280	it's also good practice to output something in your ajax query, so you can get some feedback from the server in your browser dev tools.
2281	update : also updated your jquery code to pass the params variable under a params key, for it to be picked up correctly server-side (no need to stringify as json by the way, jquery does it on your behalf):
2282	update : also removed a test to accomodate an array-typed $_post['params'] .
2283	check if you have any answer in both arrays.
2284	if you don't, check your database field name and your post field/input (both are case-sensitive)
2286	edit: this code is broken as of june 2016. see this answer for explanation and potential workaround.
2287	the same technology mentioned in the previous link was added to associates' login.
2288	i wrote this code up and it works well for me, in the last var_dump i see all my account info and things like that.
2289	if you don't delete the cookies, you can make subsequent curl requests to protected pages with your login.
2290	hopefully this can help you learn about how to do it.
2291	a lot of times on big sites you need to visit the login page to get cookies set, and also they usually have csrf tokens on the forms you need to submit with them.
2292	really does suggest you should use sphinxql, not the sphinxapi.
2293	starting a new project with sphinxapi is not recommended.
2294	there is not special client to use sphinxql, you just use any ol' mysql-client.
2296	and in either case, it's useful if you're relying on array s and you need to remove a value.
2297	a silly example, perhaps ... but consider something like this:
2298	one use for unset is for limiting the scope of the variable.
2299	ideally, variables should be initialized properly, but if you wan't to be completely sure that you don't introduce side-effects to the included file, just unset your variable.
2300	i don't know if it fits here, but i've used unset() with $_session variables...
2301	don't use double quotes in sql queries, they don't work.
2302	don't store display logic/styling in your database, you'll have one helluva time trying to change the color from green to notgreen in the future.
2303	hell, that should be in a stylesheet, not inline.
2305	learn pdo or mysqli, you're doing yourself a disservice by not doing so.
2306	your data needs to be properly escaped and/or paramterized.
2307	the [ ] usually show optional parameters.
2308	so the [, is saying you could, but don't have to do array_slice($array, $offset, $length) the $length parameter is optional.
2309	you have to specify the table names in your set and where clause.
2311	you need to echo the php variable there because otherwise they output nothing and the js variable ends up empty:
2312	so for example, if $_session['string3'] is "abc", php will echo the value inside the js and you'll get this:
2313	you are passing the job id parameter as id .
2314	however, when fetching the id for the specific job, you're retrieving job_id out of the $_get superglobal.
2315	$_get['id'] instead of $_get['job_id'] should work.
2316	you're mixing mysql apis using mysql_real_escape_string() while being connected using pdo, so you can't use those together while connecting/querying for the same code.
2321	looks like array_unshift cannot do what you want.
2322	you can use one of the array_merge solutions some people already mentioned or you can use the + operator for arrays:
2324	on the other hand if you use + , the new value will be present in the result and be at the front.
2325	general, smarty's pipe '|' operator use the value before the pipe as the first argument for the called function, which is the search text in case of str_replace.
2326	when you refresh the browser it is the browser that remembers the contents of the form and resubmits it, the php program runs from the start again, and php populates $_post with a fresh copy of the data.
2327	use the post-redirect-get pattern to avoid the data being resubmitted.
2328	your str_replace change your $_get value, so you should remove these lines:
2329	and you can use urlencode() to receive your url paramter with special characters, so your code should be:
2330	move $_session["timelogged"] = time() - $_session["logintime"]; to your 1.php script.
2331	you need to calculate the difference once you get to the second page :)
2333	you can leave it up to pdo to determine the type you know, you don't have to be explicit
2334	you need to add the selected="selected" attribute on the option matching your $_post value.
2335	here's a solution (i assumed that $post['test_email'] has to be equal to $row1['test_email'] .
2336	$row1['test_id'] in order for the condition to be matched).
2337	i'm using a shorthand if...else here, but you could also use a classic if :
2340	it looks like you are using pdo already.
2341	as far as the first one i'm betting that the html isn't quite right after the jquery insert based on the fact that the var_dump on the $_post is empty.
2342	the second question, skip a row if the checkbox isn't checked.
2343	so if your html is like this:
2344	i'm not sure what i was thinking.
2345	the $_post['checkme'] array won't match the rest of the line.
2346	it isn't added to the $_post array if it's not checked.
2347	for example if you check the checkbox in the third line down the
2348	key will be zero because it isn't added to that array unless it's checked so it will be the first item in the $_post['checkme'] array.
2349	your browser converts the literal space in urls into a + sign - before sending a http request.
2350	when php sees that very + sign, it will become a space again for $_get .
2351	depending on your exact needs you can use: next value for
2352	you can either use these directly in your insert statement, or first issue a select query against rdb$database to retrieve the value yourself before inserting: in firebird you need to use a select to retrieve values, and you always need to select against a table.
2353	rdb$database is guaranteed to contain only one row (like oracle's dual).
2354	so you need select next value for gen_main from rdb$database or select gen_id(gen_main, 1) from rdb$database to get the next sequence value.
2355	in general however i would advise you to add a trigger to do the auto-increment for you, see firebird generator guide for details.
2356	you can then use insert ... returning &lt;column-list&gt; to retrieve the generated id.
2357	you can get user datas and save it to $_session and get them from session.
2358	if session is not created before you can get them from database and save it to $_session .
2359	q: does it make a new connection to the database everytime i call profile_info?
2360	if you are calling this function more than once (or other functions also need a connection), then move the $con - mysqli_connect() and $con-&gt;close(); operations outside of the function, to a higher scope.
2361	usually either at the start of the entire script, if you will almost always need a connection, or at the point in the script, at the point it's determined that a database connection will actually be needed.
2362	while you're at it, you might want to consider closing up some sql injection vulnerabilities.
2363	including "unsafe" variables in sql text can be an issue.
2364	its secure and easy to use.
2365	here's something you could do to store it as a session.
2366	instead replace session variables with normal variables and you could call to this each time without using session variables.either way its possible, but session method would not call database each and every time after its initialized this way.
2367	that will redirect the browser to example.com, note that you can only use this if output has not already been sent to the browser, e.g make sure you have echo , print or var_dump statements before you use header()
2368	if you did get past the id check, it looks like you are putting data into $_session before they delete the app, and then not re-checking it.
2369	once you have it in the $_session , if you don't go back to facebook to verify, there is no reason an exception would be thrown.
2371	you probably need to re-factor your code a little.
2372	write out the steps on paper; that helps me.
2373	you want to check a username is unique on form submission if it's not, generate a new username
2374	first of all, reading another user's session data is a horrible idea.
2375	if you need to have shared access to that data - don't store it in the session.
2376	secondly, reading another doing it via session_start() with the same session id is an even worse idea - that way you are effectively acting as that user.
2377	there's no easy/reliable way to read session data without intercepting it, but that's not by accident, it's exactly because you shouldn't do it.
2379	so the main problem in your case is not a special character its how you work with your data.
2380	so you shouldn't use a path given by a user because the user can manipulate the path or other variables.
2382	and mysql interprets the unquoted string scqf07 as a column name.
2383	to retrieve all rows of the result you need to call fetch repeatedly.
2384	this is usually done within a while loop, like so:
2385	you can use in_array function of php , look at this link http://php.net/manual/en/function.in-array.php
2386	you will have to use in_array() function to search whether input provided matches with list of keyword specified by you.
2388	you need to put in_array to check with search text
2389	it should be == instead of = ; however, this does not answer your question.
2390	if i understand correctly, you simply want to redirect the user based on a keyword they entered.
2391	i would recommend updating your keywords array to have the keywords and the urls you want to redirect the user to all-in-one:
2392	if all of the keywords go to the same url, you can either set them all to the same url in the $product1_keywords array - or - you can use php's in_array() method for a quicker lookup:
2393	the array_unique function will do this for you.
2394	you just needed to add the sort_regular flag:
2395	to remove duplicate values then we can use array_unique() function.
2396	the functionality of it is to accept an array and returns another array without duplicate values.
2397	also, your code is susceptible to sql injection.
2398	you should escape any user input that is going to be used in a sql query.
2399	try wrapping mysql_escape_string($_post['value']) around all $_post , $_get , and $_request input.
2400	you are escaping that string too fast (it's reason of chnaging ' to \').
2401	just use some pdo or mysqli mysql_ extension was deprecated in php 5.5.0
2402	if you have magic_quotes_gpc on in your php configuration (it's on by default in php &lt; 5.4), you need to call stripslashes on any variables in $_post or $_get .
2403	php is kind of interesting in that it doesn't pull from $_post like other forms when ajax is involved.
2404	you actually will need to read the input from php://input
2406	naturally it gives this error when you upload two pictures - $file_type2 is for the third picture which is not there.
2407	you have to change all $file_type to:
2408	as i see it you don't need any foreach - just put your database file names together as you show it above.
2409	i though have one suggestion: use basename($_files['file_upload_int']['name']) for the filename.
2410	this way you don't overwrite the file ending with jgp even it is a png .
2413	one idea that did occur was that of a proxy object.
2414	it implements the same interface(s) as the actual object you want to pass in, but instead of implementing anything it just holds an instance of the real class and forwards method calls on to it.
2415	because the proxy has the same interface as the real class, you can pass it as an argument to any function/method that type hints for the interface.
2416	the liskov substitution principle holds for the proxy because it responds to all the same messages as the real class and returns the same results (the interface enforces this, at least for method signitures).
2417	however, the real class doesn't get instantiated unless a message actually gets sent to the proxy, which does lazy instantiation of the real class behind the scenes.
2418	there is an extra layer of indirection involved with the proxy object, which obviously means that there is a small performance hit for every method call you make.
2419	however, it does allow you to do lazy instantiation, so you can avoid instantiating classes you don't need.
2420	whether this is worth it depends on the cost of instantiating the real object versus the cost of the extra layer of indirection.
2421	edit: i had originally written this answer with the idea of subclassing the real object so you could use the technique with objects that don't implement any interfaces such as pdo.
2422	i had originally thought that interfaces were the correct way to do this but i wanted an approach that didn't rely on the class being tied to an interface.
2423	on reflection that was a big mistake so i've updated the answer to reflect what i should have done in the first place.
2424	this version does mean, however, that you can't directly apply this technique to classes with no associated interface.
2425	you'll have to wrap such classes in another class that does provide an interface for the proxy approach to be viable, meaning yet another layer of indirection.
2426	if you want to implement lazy loading you basically have two way to do it (as you have already written in the topic):
2427	instead of injecting an instance of object you might need, you inject a factory or a builder .
2428	the difference between them is that instance of builder is made for returning one type of object (maybe with different setups), while factory makes different types of instances ( with same lifetime and/or implementing same interface ).
2429	utilize anonymous function which will return you an instance.
2430	that would look something like this:
2431	what i usually do in my code is combine both .
2432	you can equip the factory with such provider .
2433	this, for example, lets you have a single connection for all the objects which where created by said factory, and the connection is create only, when you first time ask an instance from factory .
2434	the other way to combine both methods (which i have not used, though) would be to create full blow provider class, which in constructor accepts an anonymous function.
2435	then the factory could pass around this same instance of provider and the expensive object (phpexcel, doctrine, swiftmailer or some other instance) is only created once a product from that factory first time turns to the provider (couldn't come up with better name to describe all objects created by same factory) and requests it.
2436	after that, this expensive object is shared between all products of factory .
2437	for some reason, the above code actually gets the values from the database, despite there not being a mysqli_query() in sight
2438	i think your main problem is that accessing the value of the query coded using just select max(employee_id) will return a column with the name max(employee_id) and that is not a valid php variable name.
2439	so what you have to do is give that column another name that is a valid php variables name using this syntax select max(employee_id) as max_empid which renames the column to max_empid
2440	i am assuming nothing so i will also include a connection to the database in my answer.
2441	you will need to replace the my_user , my_password and my_db values, or ignore the connection if you have already dont that somewhere else.
2442	i have also used the object oriented approach to mysqli, if you are using the proceedural calls, you may have to amend the code accordingly
2443	also, you can set $pdo-&gt;setattribute(pdo::errmode_silent) to silence pdo.
2444	you can check the manual for more error codes.
2445	i don’t know why it doesn’t contain the expected value.
2446	but try $_server['http_host'] instead, that contains the value provided by the client in the http header field host .
2447	but see chris shiftlett’s server_name versus http_host for security considerations.
2448	you are trying to get first name from login page html form.
2449	but i don't remember if any login page ever have first name field.
2450	so you should get first name from database and put it in $_session['firstname']
2451	in the code you posted, mysql_real_escape_string is used to encode(=escape) user inputs.
2452	the code is therefore correct, i.e.
2453	does not allow any sql injection attacks.
2454	note that it's very easy to forget the call to mysql_real_escape_string - and one time is enough for a skilled attacker!
2455	therefore, you may want to use the modern pdo with prepared statements instead of adodb.
2466	as others have noted, the most likely cause is a character encoding mismatch.
2467	since the titles you're trying to convert are apparently in utf-8, the problem is most likely that your php source code isn't .
2468	try re-saving the file as utf-8 text, and see if that fixes the problem.
2469	btw, a simple way to debug this would be to print out both your data rows and your transliteration array into the same output file using e.g.
2470	print_r() or var_dump() , and look at the output to see if the non-ascii characters in it look correct.
2471	if the characters look right in the data but wrong in the transliteration table (or vice versa), that's a sign that the encodings don't match.
2472	if you have the php iconv extension installed (and you probably do), consider using it to automatically convert your titles to ascii.
2474	there are better alternatives likes mysqli or pdo
2475	with single query you can fix your issue like this
2476	after sorting your array, use array_unshift() to prepend elements to the beginning of the array.
2477	your form will need a method.
2479	i'd suggested adding method='post' as an attribute to your &lt;form&gt; as a first step, as all the $_post variables you're referring to currently wouldn't contain anything, if that is an accurate copy/paste of your html form code.
2480	say for example you wanted to make a request to a url and get a json response back containing the data you need (id, name, etc), something like this:
2481	using jquery there are various ways to do what you need to now that you have the data in this format, one way would be to use $.get - which is appropriate for this example as that is what the php below will be looking for.
2482	so... to get that response using php you can use json_encode to send back a json response to the client:
2483	lets say you have a file on your server called ajax.php where the following php will live:
2484	you are not closing the string on the echo after your query:
2485	also, just for the sake of clarity, you are using $_post data directly in a sql query without sanitizing or validating the data.
2486	i realize this is for practice but it should be mentioned that this methodology is highly vulnerable to sql injection and will make your database easily accessible.
2487	you could, instead, use php's pdo library for your connections or at the very least sanitize your inputs .
2489	additionally, you can get the list of all hashtags in the trending array using $allhashtags = array_keys($trending); .
2490	you will get an array of rows where domain is 'mydomain'also you can do:
2491	ps: i think you don't need mysql_both.
2493	you need to use the $_files array to open the file, not $_post .
2494	$_post only contains the filename, $_files contains the actual file.
2495	additionally, zend_mime_part::type expects an mime type, i.e.
2496	$attachments-&gt;type needs to be an mime type.
2497	for text files this is text/plain .
2498	i also don't think you can set an empty filename.
2499	you don't need a loop for this.
2500	use array_search() to find the key of the most repeated value, and use chr() on it:
2501	another way to achieve the same is to use in_array function:
2502	so, this will check, if $_post is not set, load home.php else, if it is set then continue
2504	please note that array_merge() (contrary to array_push() , gotta love the consistency) does not alter the array passed as its first argument, so you'll have to store the return value which i do on the first line ( $array = ... ).
2506	you are checking the &lt;form element which never actually has values in it in the line:
2507	you need to check the actual form elements (inputs) to see if data is sent.
2508	you should be checking the actual values in the likes of $_post['title'] to see if data has been sent from the form.
2510	if you want to check if a parameter is passed in through the url, you can use isset()
2512	second don't use success/error callback in jquery is too deprecated.
2513	i understand that you want update row in html table data from the server ?in success callback simply update the table using jquery text method for jquery object.
2514	you don't paste all code so i write example:
2515	you should set the name attribute of all your selects something like productcode[] (with the brackets).
2516	php will automatically create you an $_post['productcode'] variable containing all the values in an array..
2517	for debugging sql, echo out $sql before you submit it to the database.
2518	(make sure the string you're sending is the sql statement you want to execute.)
2520	values incorporated into the text of a sql statement must be properly escaped.
2521	but that's not sufficient to guarantee that code isn't still vulnerable to sql injection.
2523	the two single quotes inside the string literal are interpreted (by mysql) as a one single quote.
2524	the value that will be stored in the column (assuming the statement succeeds of course), will be what we wanted: o'reilly
2526	your saying that you want fresh content without a page refresh .
2527	for that you will need something else such as jquery and ajax, disabling caching won't make pages update themselfs without refresh.
2528	you have to have array of multicats somewhere in parent page before condition.
2529	if you have it in included file, it's init after using in condition.
2530	or you can check if it exist with isset , as captain crunch said.
2531	unfortunately, some versions of pdo don't know how to use a named parameter multiple times in the same query.
2532	if i recall, this bug is fixed in newer versions, but you may be stuck using an older version of php with pdo.
2533	ps: not related to your question about using prepared statements, but your use of '%pattern%' for full-text search is thousands of times slower than using any fulltext index solution .
2535	either enable exception mode, or else check the return values for false :
2536	your problem is that when you loop through the results from oci_fetch_array , you're setting $days to the current result, and discarding the previous value.
2537	you should actually be appending the results into $days like this:
2538	i'm not a php developer, so this may not work, but you may be able to do this using oci_fetch_all and array_map , like this:
2539	i've shown both instances of this below on how to set a cookie and session.
2540	you can refresh just 2.php and the cookie output should still show the value of $_cookie['name'] .
2542	firstly i have to call the page this way: index.php?image_src=xy then i need to use $_get insted of $_cookie .finally with this way the sessions are unnecessary.
2543	(here i just use preg_match_all() to get all numbers from your string.
2544	after this i use end() to get the last number from the string and then i simply use str_replace() to replace the old number with the incremented one)
2545	the application that you are trying to install uses cakephp 1.3, which btw is totally outdated, and support for it has been discontinued months ago, there won't even be any security updates anymore, so i'd suggest that you rethink using that application!
2546	that being said, cakephp 1.3 doesn't use pdo, but the (also already deprecated, and as of php 7 completely removed) mysql extension, ie php_mysql.dll .
2549	you are mixing mysqli_* functions with the deprecated mysql_* functions.
2550	you want to continue with the mysqli functions to get your result like so:
2551	here is the doc on the methods you can call on the $result object: http://www.php.net/manual/en/class.mysqli-result.php
2553	for instance, array_key_exists("fr", $row) will return true if $row contains an fr key.
2554	if you want to see all the keys (i.e.
2555	all the columns), simply use array_keys ; for example : array_keys($row) will give you all the keys in $row .
2556	alternatively, if you don't mind another sql call, you can use select column_name from information_schema.columns where table_name='your_table' as xdazz's answer mentions.
2557	check a var_dump of the $url you're generating.
2558	it may be as simple as whitespace/newline characters breaking your url.
2559	the thing is that 2var.php is already a php script, and it so happens that you don't actually need rewriteengine for this.
2560	if you try to visit your script with rewriteengine and its rules disabled, it will work, but produce warning about undefined index: var1 .
2561	you can parse this with regular expressions in the script itself.
2562	this means that you can put 2var in any directory on the server and it will still work.
2563	also, i noticed you link to &lt;a href="2var.php?var1=one&amp;var2=two"&gt; .
2564	the point of having rewrite rules is to make urls pretty, so you can directly link to &lt;a href="2var.php/one/two"&gt; instead (or any other syntax you desire).
2565	as long as you back them up with proper rewrite rules, rewrite engine will take care of requests arriving at these addresses and will dispatch such requests to your final scripts.
2566	check the return value from $stmt-&gt;execute() , if there was a problem it will return false and you should check $stmt-&gt;errorinfo() for details.
2567	you should check error status from both pdo::prepare() and pdostatement::execute() every time you call them.
2568	the error about "trying to get property of non-object" likely means that $stmt is actually the boolean value false instead of a valid pdostatement object.
2569	your call to $stmt-&gt;bindparam() fails because false is not an object, so it cannot have a bindparam() method.
2570	the error "column 'tweeter_name' cannot be null'" that you saw in the exception means that your tweeter_name column is declared not null, but your $user variable had no value when you bound it to the :tweeter_name parameter.
2571	is designed to be run on the result of a msql_query call.
2572	so thats your only problem as far as i can see, you have just left out the query.
2573	this is a mixture of how php handles files, and you not following the cakephp conventions, causing cakephp to "overwrite" your other form data.
2574	you should use the form helper, that way you would avoid the problem in the first place, unless of course you'd fiddle with the field names and use such clashing ones again.
2575	and the rest of the form data in $_post using the same key, ie
2576	notice the keys and the strings are quoted and the [ ] around $temp to make it an array, for the second part i convert array[1] into a json string then back into an array then use array_keys to create an array of the keys.
2577	first of all, we should decide which function to use.
2578	as your goal is to capture the content between the curly brace, i choose preg_match_all to easily handle the task.
2579	of course, you can do it with preg_split the hard way :)
2580	you don't state it explicitly, but i assume you are using mod_python ?
2581	if so, (and if you don't want to use mod_wsgi instead as suggested earlier) take a look at the documentation for the request object .
2582	it contains most of the attributes you'd find in $_server .
2583	an example, to get the full uri of the request, you'd do this:
2584	you'd better be accurate of what functions you execute.
2585	sql_next_result() is no standard php function, nor is it in mysqli which you seem to use.
2586	if it's some kind of database class, please just show the methods that class uses.
2587	nobody here can but quess what sql_next_result() does.
2588	assuming you're talking about mysqli_next_result() , that indeed returns a boolean, you need to call mysqli_use_result() after that in order to retreive the next result set.
2589	found out the two statements: set @bbox and select can be executed sequentially so mysqli and the two results are just fodder that don't need to be dealt with.
2590	your regex \[a-z]([0-9]) matches a literal [ (as it is escaped), then a-z] as a char sequence (since the character class [...] is broken) and then matches and captures a single ascii digit (with ([0-9]) ).
2591	also, you are using a preg_match function that only returns 1 match, not all matches.
2592	you cannot use the character - while declaring variables or functions, etc..
2593	so the $user-again tries to store the value but as there is a syntax error it won't be able to.
2594	i would recommend you to use a decent ide, it can help you fix minor bugs, etc!
2595	$user-again is syntactically wrong in your code because its violation of the syntax of php which is:- you cannot use the character - while declaring variables or functions.
2596	so your code should be something like bekow:-
2597	you can use $_post variable many times within single script till the execution is not completed:-
2598	the easiest thing would be to create a function that takes pdoexception and did the logging logic.
2599	that could be a static method on a class too.
2600	if you wanted a more oo solution though, subclassing pdo and having it catch pdoexception then throw a subclass or custom exception class that has a log method or similar, that is a sound approach.
2601	the whole setup looks unusual to me.
2602	you don't want to add logging into your catch blocks, but want to add these blocks in numbers.
2603	to my understanding, the general way to handle errors would be single application-wide exception handler which doing all the job - either shows the error on-screen or log it and while sending 503 to the browser.
2604	on any error, not only pdo errors.
2605	as i find every error extremely useful and deserves equal treatment.
2606	to do so one have to set their own error handler to throw an exception and set up exception handler to log errors.
2607	and set up global try-catch block for the entire application.
2608	while for these few non-critical parts which an application can survive without, it is possible to use a try-catch block with a logger inside, but again, i don't understand why pdo only - i'd wrap whole such block, and log every error occurred, not only pdo-risen.
2609	so, an exception of some distinct type (which triggers only logging but not halting the application on catch) can do the trick.
2610	firstly you have to know about implode() function.
2612	so you must include an array as the second parameter and the separator as first parameter.
2613	best solution would be you need to check the $user_id variable.
2614	if $user_id is an array the the implode function should work without error.
2615	that's because when you hit the 2nd, 3rd, ... page(after navigating from the 1st page), the $_post array would be empty i.e.
2616	since you're not sending any sensitive data with the form, use get instead of post in the method attribute of the form, like this:
2617	subsequently, you need to attach that search query in each of your pagination links, so that the search query would be available when you hop from page to page.
2619	also see how you can prevent sql injection in php .
2620	i think i see where ukautz is coming from; you're finding certain youtube-only link text in your preg_match, yet in your preg_replace your regex doesn't care about youtube-specific text.
2621	if you were somehow able to isolate out the links before preg_matching them, this should solve the problem; however an easier solution might be to just combine your preg_match regex with your preg_replace regex.
2622	as markus intimated, your code is extremely vulnerable to sql injection attacks.
2624	i would suggest you take a moment to read through this article on pdo, prepared statements and the right way to insert/update data into your model.
2625	i think you should use $_get['if'] instead of $_get['id'] as the url parameter is named if .
2626	you could include the edit-page according to the id you passed through the url.something like: if($_get['id'] == edit) include('edit.php')
2627	you may want to set the database character set to utf-8 before inserting your records.
2628	run the query below before any insert query.
2629	since you are using pdo, you can do something like this:
2630	the issue is that your making a $_post call with jquery and in that function you "post" under the new name email_pass .
2631	update your php file to reference $_post['email_pass'] and you'll be good to go.
2632	you have to execute the statement first than fetch the result.
2633	here's an example of catching an exception.
2634	do not use it as a design guideline.
2635	now you don't need to worry about checking if they're set or not.
2637	-> $tag isn't an existing var for now, if you want to call $tag you should previously do :
2638	keep in mind that str_replace returns a string.
2639	it don't change the string you passed to it.
2640	the str_replace function returns the modified string, you have to set your url like this:
2641	if you are trying to modify the url the client requested, this is not possible.
2642	if you are trying to modify the url stored in a variable, this is possible.
2643	str_replace does not change the value of $url - it just returns the result.
2644	if you want $url to match the return value of str_replace :
2645	arrays in string context are simply the literal word array .
2646	you say $_get['types'] is an array, therefore you're generating this html:
2647	if you want those values as separate array entries, you'll have to submit multiple input fields:
2648	instead of the explode line you could use following to get a correct sql query:
2649	well after $first_word = explode(" ", $question_text); $first_word is an array because explode returns and array
2653	to get the variable into your form, you would need to change the first line to this:
2654	first loop will give an array of images with all resolutions, while the second one an array with only standard_resolutions, use print_r to inspect the arrays.
2655	to put these images to a gallery use foreach loop.
2656	see the php manual on how to use an array.
2657	this doesn't work as pass_w is not a constant.
2658	you must use quotes for the index: $_post['pass_w'] .
2660	you also can't mix mysqli and mysql .
2663	you should change the function you're using from mysql_query($con, "select * from users where user = '$_post[user_w]' and password = '$_post[pass_w]'") to mysqli_query($con, "select * from users where user = '$_post[user_w]' and password = '$_post[pass_w]'") ( mysqli_query instead of mysql_query ).
2664	while you're at it, you should also probably change mysql_fetch_array() to mysqli_fetch_assoc() , for two reasons:
2666	as shown here the problem lies within the way pdo handles this parameterized limit.
2667	you need to cast the value to an integer (int) first before binding it.
2675	if it were - for instance - mysql, then you need to add an extra column to the work order table (and others.
2676	personally, i like to add timestamp column to, for auditing porpoises) .
2677	so, if you have a form with an input field declared
2678	since you are concerend about school kids screwing with your datbase
2679	1) google for how to make mysql more secure 2) hint this will involve prepared staments 3) use post, rather than get, so that you have urls like http://192.1.68.1.1/application rather than http://192.1.68.1.1/application?user=smith which tempt users to muck around with the url "just to see what happens" (probably more of a danger than sql injection at school level, but ... you never know 4) hit the libbrary for soemthign like o'reilly's php &amp; mysql for dummies in 24 hours for complete idiot beginners - or find a god online tutorial 5) "i would like to be able to limit that particular user to viewing only the work orders they generated" read up on where in sql select 6) change the mysql root password - or even add anew user with root-like access then delete root 7) make sure that no student has acess to the server, lest they look at the php and see your mysql user &amp; password
2680	it checks if the form is submitted or not with php's isset() function.
2681	if it was: then it simply echoes the string the user inputted.
2682	if you are having problems distinguishing between your radio buttons and other form fields, you could modify the names of your radio buttons slightly to get them all into a single array:
2683	so you have the data in the form param[parameterid] = active .
2684	so it's a simple matter to update your database accordingly:
2686	so you need to access by $row[0]['name'], or use
2687	the issue is with the function fetchall which returns all the rows at once.
2688	you need to fetch the row one by one which can be done via fetch_row method of mysqli .
2689	alternatively , you can also use fetchall but then you need to store the results in a variable &amp; then loop over that variable like below
2690	as in, check if there is a space in a string by using explode?
2691	but this isn't the most efficient way to do it.
2692	you do not need $_server['http_referer'] if you want to redirect to the same page or refresh it.
2693	it could simply be done using header('location : .
2694	the $_session is variable (almost) like any other for duration of the script.
2695	so if you write it on one line of the script, you can read it later.
2696	no matter if sessions work or not in your environment.
2697	so it's not surprising that your second example works.
2698	and it does not show anything that could help explaining your problem.
2699	you should show us instead, what did you try to do to make sessions working.
2700	and where and how do you actually set the url session variable?
2701	if you want to overcome this design feature, try this:
2702	this way, you'll always have $_post['check_box_1'] set in the callback page, and then you can just check its value to see whether they checked it or not.
2703	the two inputs have to be in that order though, since the later one will take precedence.
2704	in your case, it could be avoided, by splitting things in several steps :
2705	masking errors is generally not such a good idea (in this case, it shouldn't hurt much... but, still) and the @ operator has a cost, speaking of performances 1 .
2706	one-liners is not a goal one should necessarily have ;-)
2707	the source of your problem is quoting.
2708	you should use a prepared statement with placeholders, and let the mysql driver figure out how to insert the values in a syntactically valid way.
2709	you can use mysqli_ functions similarly to mysql_ ones, and just add a couple extra calls to handle the parameters.
2710	you do need an explicit database handle (i call it $dbh below; it's returned from mysqli_connect() ) instead of relying on an implicit one like the mysql_ functions let you do.
2711	or you could use pdo, as in mihai's answer, which is a bit different.
2712	when you want to execute a query, first make sure it will run by making it not equal or equal to false.
2713	that way you can debug your script.
2715	second, every time you run this page, its going to try and insert things into the database.
2716	if for whatever reason, the first_name input was not submitted (maybe the input isnt on the page when the form is submitted, for example) then php yells at you about $_post['first_name'] not being set when you try to use it so you should do this instead.
2717	try to use $_server['http_referer'] it will return you previous url.
2718	however you need to store it in some hidden field or session like you are doing now.hope this help :)
2719	nor can you use mysql_error() to get the error.
2720	you could use for example $that-&gt;dbh-&gt;errorinfo() but you should look into exceptions for a more robust way to catch all errors.
2721	$user has its value coming from the bd::get method which return the value from the db::action method which could be returning false , so you would need to test if $user is false .
2722	at this point you should also test the query by hand on the database.
2723	and also try to get the pdo errors if any.
2724	there are no form tags around your register form, so its hard to see how any data is getting into the script anyway.
2725	your'e also silencing ( @ ) errors.
2726	if this is a learning task, which from your comments i assume it is, thats a very counterproductive thing to do.
2727	as you only set $_session['id'] in the login handing script, its not going to be available across pages unless they go through that form.
2728	its hard to tell from your code what your'e intended user journey is, but as it stands at the moment it looks like your'e expecting them to register, then be able to see the account page as a logged in user.
2729	also, your'e query in the my_account.php is looking for a column customer_id which (as far as i can see) you dont actually set in the insert statement.
2730	this is the trouble with programming, it only does what you tell it to do.
2731	php://input is a stream wrapper over raw input body.
2732	it's parsed by php automatically so you could get $_post in your code.
2733	if it doesn't - this means that it is in an unexpected format.
2734	in the case of facebook - they send just a json string which isn't what php interpreter expects there to be (it expects it to be a key=val&amp;key2=val&amp;... string, and gets {key: "val",...} instead).
2735	that's why you need to read and parse it manually.
2736	i suspect there went something wrong with the required file includewisdom/class.user.php .
2737	did you change that file recently?
2738	there can be also corrupted database tables for the user data when trying to check if the user is logged in.
2739	check your database and the hosting log files for any errors.
2740	put error_reporting(e_all); at the top and then generate a division by zero warning and throw a custom error to see if php errors are working:
2741	if you see the warning and the fatal error then you can see errors and you can continue.also try to throw a custom error imidiately after the $user_home = new user(); ; maybe there is some other code inside the class.user.php that disables error_reporting .
2742	directly place the post detection immediately after the error_reporting(e_all);
2743	if you don't see the message, the the php script does not execute at all and maybe there is some server user pool restrictions for the current user running the php script view_teacherupdate.php under that particular site.if you see the post btnupdatenew exists after you post the form, then the form is ok and the problem is somewhere at the user managment calls new user(); or $user_home-&gt;is_logged_in() .
2744	maybe there is something triggering an exit .
2745	to check this, try to print something after the check and call the $user_home-&gt;is_logged_in() function like this:
2746	if you don't see the message, then you got the problem and it's hidding insinde the user managment class; at its code or logic or maybe some data corruption when trying to read user info from the database.
2747	if you see message "user is logged in" then put a post debug at the top of view_teacherupdate.php like this:
2748	what you're looking for are $_session variables, which stay active until the user closes the browser or until the session expires (i think the default php config time is 24 minutes..?).
2749	this is a lot more efficient than storing them in a database for temporal purposes.
2750	so you can set the variables with $_session['fname'] = $_post['fname']; etc.
2751	and then call them later with echo $_session['fname']; etc.
2753	it looks like you are trying to create variables with names taken from your $formitems array.
2754	i think you could use variable variables for this.
2755	doing it the way you show in your question:
2756	will really just print out what you are trying to accomplish instead of actually doing it.
2757	instead you can use this to get the variables you want:
2758	on a side note, you should escape these values before attempting to insert them into your database.
2759	i added escaping the values using the mysql function, because you are using those in your code.
2760	but these functions are deprecated and you should look into changing your code to use mysqli or pdo instead.
2763	longer answer: 'cannot use a scalar value as an array' means that a scalar value (e.g.
2764	number) exists in the variable that you are referencing as an array.
2765	i do not see anywhere that you assign a scalar directly to $_session["count"] .
2766	however, if register_globals is enabled $count would become a reference to $_session["count"] , which means $count = 0 would be setting $_session["count"] to a scalar.
2767	again, the preferable solution would be to disable register_globals, but a workaround would be to rename the $count variable to something else.
2768	you have to pick the second part after you explode.
2769	if your initial data is an array, just explode them again each them gather them inside then finally use implode.
2770	you could use (at least) 3 differents ways to archieve this:
2771	1 - urlencode() : use this function in the place you should generate the url to encode the string for url format.
2772	3 - use $_server['query_string'] : if you have only one param, you could get all the query_string this way.
2773	if you can be sure of the format of the response then you can use the code below:
2774	running json_decode on $return will not work because it is no json, it is a javascript (as you said this api is intented for javascript).
2775	i believe this is valid json depending on what you are using to decode it.
2776	in php this isn't valid, because the keys/names must be enclosed in double quotes not single quotes.
2778	in your specific case, if someone shirt_types_id with a value of "0 or (1=1)", then the sql that you will create will look roughly like this:
2780	you are missing linebreaks, and all.
2781	what is more terrifying, that you are totally vulnearable to sql injection .
2783	with a little addition to the parameters, you could easily lose your database.
2784	the other thing is, that judging from your code, you are using a bad practice.
2785	what if i enter a name which is new to the database.
2786	in that case, the update statement will fail, you will need to use insert into instead.
2787	also, you have an unneeded %22 in your request.
2788	call the code with ?name=alexa bompkamp&amp;points=100 .
2789	you can't use that function above since this takes into account the whole array batch for uniqueness, as you can already see, some fileid differs already with the same filename.
2790	if you need it based on filename , then a normal loop should suffice.
2791	you are using {} outside the quotes.
2792	you need to use it inside the single quote.
2795	cannot get rows when it does not match anything which is why you get the error.
2798	so my answer is with pdo
2799	then you can take your $_get parameter using filter_input , which is also more suggested.
2800	thanks alot for the help :) out of these answers i got everything i needed and now i am also going to switch to pdo for the final release though i am gonna stay with mysql for now since i have to turn it in by monday.
2801	in your case, you may only had to replace array_push($arrayturnover, $arrayyear); and put something like
2802	the current old version is 5.3.16 and 5.4.6 is the version you should really use.
2804	the reason your implode application isn't working is because $description is an associative array.
2805	i would recommend making it a multidimensional array so you could implode.
2806	you would do so with this code:
2807	and specifically the ending ' after 0, indicating it is a string.
2808	manually typecasting the variable is needed, even if you pass the expected pdo type:
2809	the value of form elements will only be added to $_post if the elements are named using name= .
2810	so, add name="d" instead of id="d" .
2811	when you output &lt; to html, browser take it as start of tag, whole problem here is that you don't use entities so take a look at htmlentities and html_entity_decode
2812	hoa/mime is a library that does just what i asked.
2813	it had not been releasead at the time of the question.
2814	this is a little more complete than @issam zoli's answer, as it provides room for returning, for example, text/xml when an application/xml is requested.
2815	his answer is great for a lower-level understanding of what must be done, if one wishes to implement on his own, instead of using a third-party bundle.
2816	then on the page which handles the form, the variable will be available in $_post['week_select']
2817	self.location redirects the browser, you are redirecting to the same page with the addition of the url parameter email = 1 which of course runs the script again causing an infinite loop.
2818	you should check whether $_post contains valid values and only then insert into the database.
2821	i would suggest using post instead of get for destructive / manipulative operations though.
2822	you're far less likely to suffer from csrf attacks if you stick to post data though it does not make you totally immune.
2823	if you do not actually want users to enter html into the name field, don't worry about filtering data on the way into the database.
2824	escape it on the way out via htmlspecialchars() or htmlentities() .
2826	edit: almost forgot, make sure the expected values in $_get / $_post actually exist before attempting to use them, eg
2827	if $_post['params'] is a json encoded string, you only have to call json_decode once, not the multiple times that you have shown.
2828	it should be noted that the string in your question is not valid json, as email and password need to be quoted, as well.
2829	you can do live testing of the json_decode function here: http://php.fnlist.com/php/json_decode
2830	perhaps you mean to check for $_session['user_name'] .
2831	you will also want to make sure the variable exists.
2832	do you have error checking turned on?
2833	put this at the top of your code:
2834	this would provide you with the full path of keys to reach the current part of the array in the $keypath variable.
2835	you can then use this in your unset .
2836	if you're feeling really dirty, you might even use eval for this as a valid shortcut, since the source of the input you'd give it would be fully within your control.
2838	i'm not sure how a foreach compiles but if you get weird errors you may want to separate your finding logic from the deleting logic.
2839	notes : you don't need to use is_string here, you can just make the comparison as you're comparing to a string and the value exists.
2840	here is a complete example with an array similar to what you showed :
2841	i have arrived at a solution that is a spin-off of the function found at http://www.php.net/manual/en/function.array-search.php#79535 ( array_search documentation).
2849	all that said, and assuming you fix your sql injection vulnerability, the use of a temp table here is pointless and wasting resources.
2850	do you use header("location: xxxxx") redirects anywhere on your page (or included pages)?
2851	if you use them without calling exit() immediately after, the script will continue to execute.
2852	for example, if you have a login check on an included page that sets some $_session variable, then redirects you to the same page using a header() redirect, it's possible that the function exit() was not called afterward, which means the rest of the script will still get executed, including your page with the updateviews() function.
2853	however, the user won't see this because on the client side it will redirect before any data is output to the browser.
2854	ok first of all you are using a prepared statement but binding your values incorrectly.
2855	the sql you give to mysqli::prepare should look like:
2856	then you use mysqli::bind_param to bind the data to those values.
2857	unfortunately mysqli::bind_param makes you bind them all at once and takes a variable number of arguments - one for each param to be bound, and they have to be by reference which makes it even more annoying.
2858	so lets get to your data... what we will eventually need in order to run the sql statement is an array that looks like this:
2859	however in order to craft the query properly we need to have things organized like:
2860	so the first thing we need to do is organize this properly:
2861	so now we get to the heart of the matter... the actual insert with mysqli :
2862	to harness php's built-in support for automatic associative array generation directly from html form, here is a brief introduction:
2863	also, there is a related so question that might be a help too:
2864	if you change the name of your input to the_same[] - $_request['the_same'] will become an array of those values, first to last in element order (all current browsers i believe).
2865	you can also specify a specific order if you need, or even use string keys.
2866	for instance, an &lt;input name='the_same[apple][2]'/&gt; would become $_request['the_same']['apple'][2]
2867	an example of using that to your advantage could be with a checkbox, as the html checkbox only submits a value when checked, you may want to submit a "not checked" value somtime:
2868	sql injection by sending "0'; truncate messages;--" in the last message post field cross site scripting - if users can submit messages with html/javascript they will be returned in the content without escaping.
2869	have you tried removing the echo statements to see if that improves run time?
2870	prepared statements do not add slashes to your query data.
2871	they inject the parameters into the query in the form of placeholder, in such a way that the placeholder is not considered as part of the query, but as part of the data only.
2872	if slashes are added for you, make sure you disable prepared statements emulation for your pdo instance:
2873	you're assuming that $_post['code'] contains literal ss&amp;246i value.
2874	but you cannot know if it's true or not - you never verified it.
2875	so, you have to place a verification code in your script to be sure.
2876	you're assuming that database contains literal ss&amp;246i value.
2877	but you cannot know if it's true or not - you never verified it.
2878	so, you have to run some code to verify the assumption - try to select a hardcoded literal value instead of posted one.
2879	this way, one by one, verify all your assumptions and find which ones are false.
2880	so, you'll be able to either solve the problem on your own or ask a meaningful question on stack overflow.
2881	to check if a post request has been made, you should use:
2883	you may want to check if a certain key is set ( if(isset($_post['foo'])) ) instead.
2884	when i do similar things with db queries (where results can commonly be null in select queries) i do a test to see if the variable has been set.
2886	you have to use isset to check the same.
2887	you want to build a list of all params, for example...
2888	try $error = ''; somewhere at the top of your code.
2889	you're concatenating to an undefined variable, with $error .= .
2890	additionally, you should not change between mysqli and mysql , stick with mysqli .
2891	if you go object oriented mysqli, it will save you time.
2892	if i'm understanding correctly, you're wanting to take data in an array like
2893	if that's the case, you can use php's implode function:
2894	no need for a while in test2.php .
2895	if you adopt the previous point, change your whole file to become something like
2897	you don't need a loop here.
2899	they are probably using an .htaccess to rewrite the url (mod_rewrite).
2900	thus, there's a kind of internal conversion that change urls like bit.ly/abc in bit.ly/id=?abc (or something like this, i don't know the real name) and then they can retrieve the param.
2901	so, assuming that they're using php (i don't know), they retrieve the param using $_get['id'];
2902	this would mean that yourdomain.com/anythinghere123thatsanalphanumeric would pass on the value after the slash to your $_get['id'] .
2903	you need to serialize all your inputs/quantities if you will have the same name "qty" in all fields.
2904	i will update my answer later if you do t get answer about this.
2905	debug or make a print_r($_post) just to verify if the array is populated, the superglobal $_request is also populated with post values.
2906	your autos table should have a primary key ( say stocknumber or vin plus model) so no duplicate or empty values are inserted.
2907	you should also filter and validate data before inserting them.
2909	you could probably store whatever the user enters as plain text, then just echo it back on to the page when it needs to be displayed.
2910	this code worked when i tried it for i believe what you are trying to do.
2911	i suspect it is giving you three when you refresh the page because the old $_request['array_index'] is still hanging around.
2912	you need to set a session variable to indicate that the action has been completed, and check it before proceeding to do this action.
2913	what you are doing with your code is that if a $_request of action equals value duplicate then you are doing the following things:
2914	get the cart from the session (which is previously stored) clone the cart and store it in temp and then copy back the temp into the cart and finally store the cart into the session then i suppose you display your card somewhere...
2915	what is happening here is that the cloning instructions should be valid only when you click the duplicate link.
2916	i suppose you have your php in the same file as the html so when you open it in a new window the cart is updated with 2 items and stored in session (which is common to all instances of your page) and when you reload your page the same 2 items are fetched from the session and showed to you.
2917	also here you need to observe that the $_request['action'] is still present so its duplicating 1 item more.
2918	now whenever you refresh the page it will keep on duplicating 1 item more.
2919	php only produces output on the server and sends it back to the client.
2920	you have to write code like this:
2921	then in the delete.php you take $_get['id'] and call the delete .
2922	all in all it's never too early to read about http://en.wikipedia.org/wiki/sql_injection .
2923	that means you have to escape the id parameter before inserting them into a query.
2924	i recommend to use prepared statements.
2925	you are overwriting $categories at each iteration, it should be:
2926	find and replace isn't what explode is for.
2927	if you just want to correct the code error - see above.
2928	to get rid of a gaping sql-injection hole.
2929	see: how does the sql injection from the &quot;bobby tables&quot; xkcd comic work?
2930	then you can check the number of results returned.
2931	if it's 4 then display the more... button.
2932	putting your 1m in an array might not be the most memory efficient way to do this.
2933	the requirements run into the tens of bytes for each array cell.
2934	moreso, in the following bit of code you need this twice:
2935	because you will end up with two arrays: $lines and $index both containing the same information.
2936	why not stick to one and use in_array() instead of array_key_exists() ?
2937	but i do agree with the other comments, this is clearly a job for a database.
2938	you'll have to learn these someday, and once you know how you can do so much more.
2939	you have to set the custom options for the product before adding it to cart.
2940	i have now resolved this, after much headache.
2941	you can add a custom option to the cart and not have to instantiate the product object and save a custom option to do this, it can be done via tacking onto an observer, and pulling the quote items.
2942	quick piece of handy info, if it dumps a stack trace in front of you it can't find the defined option, lose the getvalue() (if using var_dump) function to see if you are getting a null value, otherwise xdebug will give you a ton of hints to get around it.
2944	in your case you're calling a function , which certainly exists.
2945	hence you don't need and in fact can't use isset here.
2946	just use if ($this-&gt;session-&gt;flashdata('login_error')) if you want to test whether the value is truthy .
2948	since you can only return instantiated variables, isset is invalid there.
2949	your best bet would be to do it like:
2951	the problem is that you have 2 queries running at the same time and mysqli doesn't like that.
2952	your include("$root/config.php"); "fixed" it because it opened a 2nd mysql connection for the 2nd query to run.
2953	this is not suggested, and the solution is that you need to "buffer" the results of the 1st query so that mysql can run the other(s).
2955	there's no real need to run 2 (or more) queries here.
2956	you can get what you want with just one.
2957	you just need to join the tables.
2959	in your case, you can add an additional method to the class, as well as getparams (which presumably just returns the contents of $_request ), add a getparam() method:
2960	this has to do with how php stores references to array elements.
2961	it cannot reference an element of an array, only values.
2962	therefore it has to store the value array('oh snow') in a "slot" of the symbol table, then make $arr and $a[2] a reference to that value.
2963	first of all, there is an error in your code, which is the following: &lt;form action="&lt;?php $_server['php_self'];?&gt;" method="post"&gt; will always return &lt;form action="" method="post"&gt; , as $_server is an array which have to be echoed: use this &lt;?php echo $_server['php_self'];?&gt;
2964	then, as code for your php this works well: it receives two vars from post, and if the contender (which is the select) contains a value different from 0, it will put it inside the $contender variable.
2965	at this point, you can use this variable in your function.
2966	now, if you want this to return an ok or an error whithout reloading the page , you have to use ajax.
2967	for example, you could use a js function like this:
2968	your code is setting the value of $_session['box_status'] to the current value of $_post['box_status'] .
2969	sending this form will bring you to the 'thispage.php' page.
2970	inside of 'thispage.php', if you were to access $_post['someinput'] , that would give you the value that was placed inside the textbox named 'someinput'.
2971	i am, of course, generalizing things here, but you should get the point.
2973	so you can use &lt;?php echo $_session['box_status']; ?&gt; to print your box_status data in to any of php page.
2974	if $_get['edit'] is not set, $row is not an array but an empty string and that leads to that error.
2975	to solve that, everywhere where you want to use it, you would need a construct like:
2976	or you define $row as an array with lots of empty strings for all your table fields instead of an empty string...
2977	regex had an extra ^ .
2978	further on i improved pattern like this: "#http://domain.com/([=a-za-z\d/-]+)(.|\n|\r)([a-za-z\d/-]+)#" this urls have = and that was removed with this line: $var1=preg_replace("#=(.|\n|\r)#","",$var); this is not the best way to go, but it worked.
2979	i got my links in array, and later i was able to download files with file_get_contents() and file_put_contents() changing links was easy with str_replace .
2980	everything is done with for loop because number of links in each email was not the same.
2981	or if you just want to check isset() do this..
2984	a mechanic is not going to focus on learning carborated engines, they are going to focus on fuel-injection systems.
2985	&lt;input type="button"&gt; does not by default propagate post.
2986	therefore you either need to use a "submit" type:
2987	submit: the button submits the form data to the server.
2988	this is the default if the attribute is not specified, or if the attribute is dynamically changed to an empty or invalid value.
2989	reset: the button resets all the controls to their initial values.
2990	button: the button has no default behavior.
2991	it can have client-side scripts associated with the element's events, which are triggered when the events occur.
2993	if you want to decode the json string you have to point to add the array index where the string is located, so your code should look like:
2995	as per your comment on this answer... if you want to populate your hidden field then you have to use the javascript created functions, in which these functions will be called whenever there will be a change in the value of select box, the function will fetch the values from all the three select boxes and implode them in your desired format as dd-mm-yyyy.. and populate the hidden field with this newly created value
2996	below would be your function it is not the tested one.. but you have to do it like this:
2997	first of all make all the id attribute of the select box different say id='airdate_day' for day select box, id='airdate_month' for month select box and id='airdate_year' for year select box
2998	and now when the form is posted your $_post['episode_airdate'] will contain a complete date, hence you don't have to use implode() function in it and can directly apply your datetime() function ove the $_post['episode_airdate'] variable
2999	finally, as you have seen, the output from print_r() / var_dump() with simplexml is not always very helpful at all!
3000	the best way to see what you've got is to echo savexml() which will display the xml for a given element.
3002	so to know whether or not a checkbox was on you have to check for the occurence of its name in $_post .
3003	that is incorrect, you are right.the variable name will always be $options_pool .you can pass the keys as explode(':', $name) and later assign them.
3004	the problem you are facing above specifically can (and should) be solved with post/redirect/get .
3005	unsetting _post on the php side would be ineffective since the problem is it is a separate request.
3006	you also have to deal with double-clicking of submission buttons.
3007	you can solve this on the client side by disabling form submission after the button click, or by putting a random token in the form and storing that token in the session.
3008	the token will be accepted only once (session keeps track of whether the token has been posted).
3009	here's a nice method i use to keep users from submiting the same data twice, which will also prevent the page from adding the same record to the database when reload.
3010	the first if checks to see if the $_post is equal to the last thing they typed ( $_session ).
3011	if it's not the same it runs the next if to test if the $_post variable is not empty.
3012	inside the last if towards the bottom it sets $_session['dup_comment_body'] to equal the $_post .
3013	so next time the first if runs and the $_post is the same, they will get the message "you already entered that.".
3014	it happens when you are trying to access a value which is not set for that index, please read this link for more information.
3015	ignore these notices by telling the php error_reporting to not show notices error_reporting(e_all ^ e_notice); but it is a good practice to fix this error by adding a check if a value exists.
3016	fix the values by isset function to see if the value/index contains any data.
3017	and then replace $_session['output'] in your code by $output variable.
3018	you need to use ajax with jquery to be able to send your value:
3019	also, please note using pdo or mysqli for your requests.
3021	if you want to still on mysql and to don't use mysqli or pdo , you can use this mysql function to escape strings from the user to prevent sql injection :
3022	finally, please note that $cus_id variable isn't defined in your code, it should cause errors.
3023	you can use $.get for your get requests and $.post for your post requests
3024	if a value you use to create html content might contain characters that are special in html then you must encode those characters using their correct html definition.
3025	the php function htmlspecialchars() knows how to do it.
3026	it encodes &lt; , &gt; , &amp; and " (these are html breakers if they are not encoded properly).
3028	you need to assign the users session to the user id.
3029	i'd strongly suggest using prepared statements for this as it's so much more practical and effective (and also bind your params (if you're not currently)).
3030	as fred mentioned above, your code is possibly vulnerable (dependant on your queries and if you have hashed your passwords!!!
3031	after hours of banging my head against a wall i found a solution.
3032	since this stored procedure calls another stored procedure which uses a cursor i had to use the $mysqli-&gt;multi_query() function.
3033	here's how i got it working:
3034	change $term = $_post['term']; to $term = $_get['term']; , and then whenever you output links to next/prev etc.
3035	make sure you add the term to the query string as well
3036	this way the term will be sent to the server every time the user clicks next/prev.
3039	one thing you can do is always check the variable with isset (e.g.
3040	isset($_post['ch1']) ) before using them; another is to name your checkboxes the same thing with a [] following the name (e.g.
3041	name="languages[]" ) and then do something like this:
3042	there are a great many ways to do this.
3043	hopefully you will be interested in learning many of them.
3044	i cant see your database design, so you'll have to make sure that your database columns and table match correctly with what is specified in your database.
3045	echo your variables to make sure none are empty.
3046	ensure that you are not inserting a string in column of type int or vice versa.
3047	make sure your form method is post and that your name attributes match what you have specified in your variables ie $_post['name_attr'] .
3048	the order of your insert columns should be the same order as in your table.
3049	lastly, i hope host , username , password and database name are just placeholders for your real database info?
3051	you must actually assing something in $_session array to get results.
3052	for example after succesful login do this:
3054	i also believe you are calling a non existent function where you assign the $num variable it should be mysql_num_rows() not mysql_numrows .
3055	you can use str_replace i am posting some code may be it can help
3056	as stated in the comments the problem is not that is_array() is not working, the problem is you are not testing to see if the array has any rows.
3057	your way of doing it is just fine.
3058	there is no way of doing it that does not require to execute code.
3059	if i were doing it i would probably short circuit the if statement like this:
3060	that way you skip echoing out the header and the bother of the foreach - which right now is hitting and not executing because the array is empty.
3061	you should check the mysql reference manual under c.5.2.9.
3062	mysql server has gone away .
3063	it lists many probable reasons why this could happen.
3064	its mentioned on the page :
3065	since you are running long maintenance scripts, i suspect that's the reason.
3066	you can try setting mysqli.reconnect to 1 (in your php.ini), or increasing mysqli_opt_connect_timeout from options .
3067	you should also look into migrating from 5.3 to 5.4 notes.
3068	it's hard to pinpoint the issue without looking at your code.
3069	you should never need to touch the $_session['fb_..._user_id'] variable.
3070	use the sdk like the documentation states and you will be much better off.
3071	if you want access to the user id, just use:
3072	hii michael you can set the ajax post request like this
3073	also it will be better to check isset outside the function.
3074	this will make your function to be pure.
3075	it will easier to debug later and it will not invoke if you don't have $_post['name'] .
3078	the better answer is that what you're doing looks dangerously like relying on globals, and there's no reason to keep things like user e-mail addresses as global variables.
3079	consider taking another look at your application architecture to see why you need to do this.
3080	if this is real code, you should be using password_hash and password_verify to handle login.
3081	currently, you are storing passwords in plaintext, free for any hacker to look at.
3083	i normally set up what you mentioned, a config.php in an include directory, and have the following line in it: define('base_path', str_replace('/include', '', dirname(__file__))); ("/include should be whatever directory your config.php file is in, if you have it in the root directory, you can just use define('base_path', dirname(__file__)); ).
3084	when i want to include any other file after that, i use include_once(base_path .
3085	note: this concept is not original to me by any means.
3086	i think, you want to append the values to original string, if the strpos of value is positive but it is not exactly available in the string :
3087	to get the last inserted id using pdo (not mysql_insert_id() ) you'd do this:
3088	to convert the rest of your mysql_* queries to pdo, you'd probably want to do something like this:
3090	they are no longer maintained and are officially deprecated .
3092	if you choose pdo, here is a good tutorial .
3093	array_sum() works by adding up the values in an array.
3094	you only have one key=>value pair in your array: key 0 with a value of 1,2,3 .
3095	if you have a comma-separated list, and want that to be an array, i would use the explode() function to turn the list into the proper key=>value pairs that array_sum() would expect.
3098	however, many languages, not just php, deal with user input.
3099	user in this case could be a human, another computer service etc.
3100	you usually store that input inside a variable.
3101	a great example is php's $_post , $_get , $_server , $_session .
3103	someone can submit that form, they can fill in both inputs.
3104	or only one of them, or even none.
3105	you don't know what they've done, but regardless - php will provide you with a variable that might contain correct input.
3106	if i submitted that form with nothing filled in, and if you tried to access a value for first_name - you would get a php warning - and you don't want php warnings.
3107	therefore, before working with user input (in this case with a $_post superglobal array), you would check whether i filled in everything properly and you'd do that with:
3108	do this instead and give it a go (btw that for loop is suspect big time as well, consider what you're trying to achieve)
3109	caveat is this will give you a nested array, $terms[0] will be an array of $k values, while terms[1] will be an array of $t values.
3110	look into array_merge if you just want one big flat array
3111	in this situation empty makes more sense, because it also checks whether the string is empty.
3112	isset just checks whether if it is defined.
3113	you might also want to trim the input.
3114	so you should just do $text = str_replace("\r\n", '', $text);
3115	first, any time that you are performing ajax requests you must perform them on a web-server!
3116	an ajax request is an http request made to the server just as if you were loading any other web page.
3117	be careful to make sure that character case is correct for script/page names, especially on a *nix system, getstates.php‌ and getstates.php would not be the same.
3118	( straight shootin' from ralph! )
3119	if i was to do this i would do it all in jquery (since you're using it already) which keeps you from having any inline code in your markup, which is way cleaner:
3120	make sure to add a name to the input when you remove the inline code:
3121	in addition your script is at risk for sql injection attacks.
3124	use php isset in order to check if the post variable is there or not in a ternary comparison:
3125	orderbyraw() expects the second parameter to be an array of bindings, not an array to implode for one binding.
3126	but on the other hand, if you implode it, it will be passed in as one string '2, 3, 4' , when you need a comma delimited list of numbers.
3127	also, you may want to check the difference between roll and role before you code too much ;)
3128	your php script executes when the page loads.
3129	to prevent this, you need to add if(isset($_post['submit'])) { at the top of your php code and add name="submit to your submit button.
3130	you're using $_get in the wrong way.
3131	so you have to use it in this way:
3132	or you can just use the $_request (although it is not very good to use it)
3133	as you are using str_replace with single quotes i.e.
3134	(' ') then when you include a single quote within them it thinks you are closing the function.
3135	so you need to escape it with a \ so is you wanted to use ' inside it you would use: (' \' ') .
3136	a quick look at the class shows you can't do that.
3137	you can use html array inputs and php to do the same.
3138	you need to loop through $_post['products'] to find the new checked ones and you need to loop through $already_selected to find the unchecked ones.
3139	you can set the session with session_name .
3140	you have to do that on top of your page and before session_start(); .
3141	more info is here: how can i prevent sql injection in php?
3144	and to get the result of this, do the following:
3146	you should also use htmlspecialchars() this will convert any characters that are "bad" and convert them into the html equivalent.
3147	ie: ' is converted to "&amp;#039" and store that in the database.
3148	then you can use htmlspecialchars_decode() to revert it back.
3149	note how i removed the print_r since it’s unnecessary for a task like this.
3150	i also changed fopen to overwrite the file using w instead of a so the saved json is valid.
3151	then when you open the file, just use json_decode like this:
3152	a simple check i did locally to debug this—since i don’t have http_x_rhn_provisioning_mac_4 in my setup—was just to get the http_host like this:
3153	your $_server['http_x_rhn_provisioning_mac_4'] output is eth4 00:02:c9:4f:xx:xx which also has a prefix eth4 where as your $table has 00:02:c9:4f:aa:bb which makes the keys mismatch and actually you are trying to get $table['eth4 00:02:c9:4f:xx:xx'] which is non existent in your $table array
3154	you would have ensured that ?problem_id= is numeric.
3155	all of your other fields may still be at risk though, so this isn't the proper way of securing against sql injection.
3158	first json_decode the json string, so we can work with it in php.
3160	there can be lots of ways/tricks for this.
3161	$_session can be one of them / $_cookie can be one of them / through some js you can use browser local storage, etc.
3162	the main concept will be the fact to keep the values somewhere where a browser refresh doesn't effect.
3163	so though $_session seems brut force to you -- it is a logical option.
3164	i think these two parts are not connected.
3165	as long as you are using regular select options for showing your options - they are not connected -- as your part two deals with styling your option values not how the work.
3166	shamelessly poached from manual page here .
3167	use a variable like $theguest or the session variable directly.
3168	use bindparam , you are in pdo anyway, leverage it :>
3169	to the top of your file, just below the session_start() , and it will behave as you intend.
3170	the way your code is written now, the session variable is not set until after the form displays.
3171	you want the session variable to be set before the form displays (if in fact the $_post username is set).
3172	and at the dashboard you can do this if it's of client
3173	you are unsetting the session variable because if you will not do that then it will work only for the first time, because after that your session will set permanentlytherefore you have to unset them
3175	$mysqli is not an object it is an empty variable defined at the global line.
3176	global is used to make a variable accessible in a function, it doesn't appear you need that.
3177	your connection currently is $conn .
3178	your code is using the object approach so i think in your db file change the $conn line to:
3179	unless you are using $conn in other files.
3180	if this is your first file this should be fine.
3181	once that is corrected though your queries will be built incorrectly.
3182	you would have a built query as
3183	you need to separate out the user input and only append the columns you want to search on to the query.
3184	this also presumes all fields were integers as your original queries did.
3185	if they are not the inputs should be surrounded by single quotes.
3186	note that session_start(); should always be on the first line of the page, then you will start adding things later.
3187	you probably need to wrap each set of &lt;input/&gt; s in separate &lt;form/&gt; tags.
3188	if php sees more than one input with the same name, it just takes the last one.
3189	this before you continue to use mysql and not mysqli.
3190	it isn't that different but mysqli seems to have a wrapper over mysql and uses the "->" to instantiate new classes for a connection.
3191	the value of $domain was never declared.
3193	the array_values part is to reset the indexes of your array, so that accessing $vals with [0] will return "1".
3194	generally in php/mysql applications there is a single account for the application to access the database.
3195	this would be stored in a config file of some sort or in the class you have which creates a database connection.
3196	this way you can then have a user logged in and authenticated by matching their credentials with their row in the database, and you can manage what permissions they have and don't have to worry about them typing their password all the time to log into the database, as the application logs into the database and not the user.
3197	using the w3schools tutorial as a base it would look something like this:
3198	you could then store the fact that your user is authenticated in a $_session variable, and have your application code check that variable to see if a user should be allowed to remain on the "dashboard" or be redirected back to login page.
3199	seems like you are not sending the parameter ref on your url.
3203	also, since i assume you are not familiar with the security procedures, read about sql injections.
3204	you need to get the result from the query and pass it on to mysql_fetch_row or one of the other fetch functions.
3205	your input radio button name="sort" so you need to use $_post['sort'] .
3206	you can use input value as database field name so that we can easily use it in query without if...else condition.
3207	while the first responder's function above should work (note the other refs to $_server superglobal keys) this was only part of the op's question.
3208	the reason i believe is if/when these proxies actually send these alternative headers with each request.
3209	increase the amount of allowed memory ini_set("memory_limit", "512m"); or in the php.ini file itself break your process into multiple chunks of, say, 5000 a piece.
3210	figure out where the memory is going and try to free it using unset or by setting objects to null .
3211	if you want a survey php application, i suppose, to be clear, that you need something where:
3212	a more sophisticated version will require different sets of questions based on what was replied previously, but it's out of the scope of this question, i hope.
3213	the group_concat and concat here should be modified to return something like 5:option_one;6:option_two etc, so that exploding the data won't be much hassle.
3214	i realize this is not the cleanest approach in terms of performance and optimization, but it should do for a non-large-scale project.
3215	there is also a drawback in in the above design in that the answers to the "multiple answer question" are stored imploded in the "answer" field of the userreplies table.
3216	better add another table, where every record holds an option value the user selected for this or that question.
3217	that way there will be no unnecessary denormalization in the database and queries for statistics will be much easier (i.e.
3218	querying which options were most popular in a single question)
3219	change your sql query you have written '$cons[]' in select query which is wrong .
3220	after explode you will get data as 1,2,3 so you just need to write variable in query not array and user in operator like this.
3221	product-types-owned is going to be an array of the checkbox values that were selected.
3222	you'll need to implode that before you do anything else:
3223	right now you're trying to nl2br on an array, which won't work.
3224	nl2br expects a string, so php will type cast the array into its default string representation, which is literally the word array .
3225	it doesn't slow my typing down.
3226	the intent of the code is still clear.
3227	* ok, actually i do, but that has more to do with me having a touch of ocd rather than good development practices.
3228	well, for a trivially small array, $array === (array) $array is significantly faster than is_array($array) .
3229	on the order of over 7 times faster.
3230	but each call is only on the order of 1.0 x 10 ^ -6 seconds ( 0.000001 seconds ).
3231	so unless you're calling it literally thousands of times, it's not going to be worth it.
3232	and if you are calling it thousands of times, i'd suggest you're doing something wrong...
3235	another way to look at it would be to examine the algorithmic complexity of each cast.
3236	let's take a look at is_array() first.
3237	it's source code basically shows it's an o(1) operation.
3238	meaning it's a constant time operation.
3239	but we also need to look at the function call.
3240	in php, function calls with a single array parameter are either o(1) or o(n) depending on if copy-on-write needs to be triggered.
3241	if you call is_array($array) when $array is a variable reference, copy-on-write will be triggered and a full copy of the variable will occur.
3242	the cast version, on the other hand, does two operations.
3243	it does a cast, then it does an equality check.
3244	so let's look at each separately.
3245	the cast operator handler first forces a copy of the input variable.
3246	no matter if it's a reference or not.
3247	so simply using the (array) casting operator forces an o(n) iteration over the array to cast it (via the copy_ctor call).
3248	the handler is just a proxy to the is_identical_function() .
3249	now, is_identical will short-circuit if $array is not an array.
3250	therefore, it has a best case of o(1) .
3251	but if $array is an array, it can short-circuit again if the hash tables are identical (meaning both variables are copy-on-write copies of each other).
3252	so that case is o(1) as well.
3253	but remember that we forced a copy above, so we can't do that if it's an array.
3254	so it's o(n) thanks to zend_hash_compare ...
3255	note that it looks like they scale the same for references.
3256	they both scale linearly for referenced variables.
3257	for example, in a referenced array of size 5, is_array will perform 5 memory allocations, and 5 memory copies, followed by 1 type check.
3258	the cast version, on the other hand, will perform 5 memory allocations, 5 memory copies, followed by 2 type checks, followed by 5 type checks and 5 equality checks ( memcmp() or the like).
3259	so n=5 yields 11 ops for is_array , yet 22 ops for ===(array) ...
3260	the last one does cast to string, an array is always casted to a string with value 'array'.
3261	this check will be wrong, if the $v is a string with value 'array' (never happens in our case).
3262	i don't believe there's a way to alter the functionality of property_exists() using magic methods; here's a list of available magic methods in php.
3263	however, you should be able to alter isset() to use any logic you like.
3264	this effectively fixes the (annoying) problem with isset and nulls by overriding its functionality through the magic method.
3265	instead of using isset() within __isset() however, we use array_key_exists (which handles nulls as you would expect).
3266	thus __isset() returns the expected result when a null value is set.
3267	depending on your needs then this may or may not be a viable solution.
3268	if the above issue is a hindrance, then another option might be to define an interface with a keyisset() property, and apply that interface to all objects to be tested.
3269	then use $obj->keyisset('key') rather than isset($obj->$key).
3270	not as elegant, but a bit better oo.
3272	even if e-mail addresses can't have spaces, etc.
3274	now, check any include or require files to make sure you aren't calling for the same variable name somewhere.
3275	and will stop the undefined index errors, provided you properly check to make sure the variables exist.
3276	your code has a lot of hacks copied from other examples which are making your life harder, not easier:
3277	you do not need libxml_no_cdata ; it only makes a difference when you're turning the object back into xml anyway (it also makes a difference to the result of print_r , but you shouldn't rely on that anyway for "magic" objects like simplexmlelement) $newsoutput = json_decode(json_encode($newsoutput), true); basically says "throw away all the useful bits of the simplexml api, and attempt to give me an array with no guarantee of its format" adding string manipulation on top of that is just adding hacks to hacks.
3278	instead, you should learn how to use namespaces with simplexml, which is by using the -&gt;children() method (and maybe also the -&gt;attributes() method , which works the same way).
3279	whenever you make a request to the server, pass along all the variables that you need.
3280	so if you're changing the limit by submitting a form, pass along the page number as a hidden form field:
3281	then you can read it on the server using $_post["pagenum"] or $_get["pagenum"] .
3282	i don't recommend storing things like this in the session.
3283	if you do, you'll prevent people from having multiple windows open to different pages.
3284	it's best to pass everything in the request (i.e.
3285	you need to pass the post data as a url query string or as an array, the problem is you post data in json format, but php does not parse json automatically, so the $_post array is empty.
3286	if you want it, you need do the parsing yourself in the test.php:
3287	you can use this to detect whether the referral url was http://
3288	if you just want to check whether the user clicked a link from another site to arrive at yours then you can check whether $_server['http_referer'] exists:
3289	you can use this to detect whether the referral url was http://
3290	if you want to get string convert this array to string using implode function.
3291	which is why you need to specify the key, in your case ['value'] is your key.
3293	if you don't want to use extract() for security purposes (even though you could simply skip variables that already exist), then you can simply loop through an array - check if the $_post value exists, and if it does, create a variable of the key:
3294	mysqli_stmt::execute() is used for insert , update and delete statements.
3295	rather than returning a result set it returns the number of rows effected by the statement.
3296	when performing a select you need to use mysqli_stmt::get_result() which will return a mysqli_result instance.
3297	you can then call fetch_all() on the mysqli_result to retrieve all rows of the result set as an array of associative arrays.
3298	$_get and $_post both are super global variables, so these already set as array , so you should used there empty() method instead of isset()
3299	you are never checking if the form was submitted on the second page, nothing "huge" but it could just be that a refresh is occuring and empty data is going in.
3300	second, you will should really change the insert portion up so you do not get a ton of "undefined constant notices" from not surrounding the associative indexed $_post array with single quotes.
3301	if you just want to change from image:name.jpg to image_name.jpg you can use something like:
3303	if you want to replace the whole url maintaining the : in http://.... you can use \k .
3304	it will echo &lt;img src="http://domainname.com/image_name.jpg"&gt; .
3305	you can see a working example here .
3306	i'm assuming that your connection to the database is ok (though the given page lin k suggests otherwise).
3307	it seems the table is not exporting properly because $result was misspelled as $results in the code segment printing the data rows: $row = mysqli_fetch_array($results) .
3308	also, you may want to check that $results and $row contain the expected data in the expected formats using print_r($results) and print_r($row) .
3309	note that your implode is wrong for the same reason; it should be:
3310	array_merge creates a new merged array.
3311	you must assign the result of array_merge if you want to modify one of the source arrays.
3312	on a side note: your code is vulnerable to sql-injections.
3314	you should replace the and where by and in you select query and no need of ' in $columbname
3315	the problem is, since initial load, $_post values aren't populated (empty on first load),
3316	that variable you set is undefined, just make sure you initialize that variable fist.
3317	that is just the basic idea, i just added other codes for that particular example, just add/change the rest of your logic thats needed on your side.
3320	first of all, i want to isolate some security issues...
3321	secondly, you have a lot of syntax issues which you could easily find yourself by enabling error reporting...
3322	edit: note, if you're storing the directory as the datetime ( substr(md5(time()), 0, 10) ) you will need to include this date into the database path so you know where it is.
3323	note: when using the isset() you don't need to match it to true or false, you can simple do:
3326	you can pull apart $_server['request_uri'] with regular expressions or explode, the function parse_url() is very handy here...
3327	update may mistake try using htmlentities or htmlspecialchars instead of urlencode
3328	apache's mod_rewrite automatically decodes urlencoded strings when it does regex matching.
3329	but it only does this once, so you should be if you urlencode your string twice.
3330	this will re-escape all of those `%' characters.
3331	good that you make the transition to pdo.
3332	it's better to do it now, then to find out some day that you can't upgrade php, because it would break your application.
3333	as far as i can tell, $database-&gt;query($sql); only prepares a statement.
3334	that is the first step, but after that you need to execute it as well.
3335	you already have the $database-&gt;execute() method for that, but you don't call it in your insert, update and delete functions.
3336	apart from that issue, it would even be better if you used bind parameters for the updates too, and leave escaping strings up to the database.
3337	you have a php object here, which contains a number of public properties you can retrieve yourself ( stdclass is the simplest class that php can make objects from).
3338	you can probably see from the print_r output that some data items are sensibly nested.
3339	for example, if you want the city, it can be retrieved thus:
3340	now, some items - such as the address - are stored in arrays within objects.
3341	to get the first line of the address, try this:
3342	if you want the whole address, consider wrapping the display_address property in implode - this will join elements of an array together with a "glue" string, such as a comma.
3343	that's also in the manual .
3345	thus, you'll need to wrap everything above in htmlspecialchars or htmlentities , thus:
3346	your code is prone to sql injection .
3347	this typically happens when you are trying to insert multiple values at once.
3348	easy way is have a look at the data you have exploded by doing a dump on it, and see the structure and what you're dealing with, then build a foreach with it
3349	if it is a new post/page, i guess the id does not exists yet, because the post has not been published/added to db.
3350	if you are trying to edit a post/page, i think you may use $id = $_get['post'] ;
3351	from there i would foreach the $_request['invite_user_id'] against the new array $ids , here is a sample:
3352	if there is an error (like something not ok in the input) , you can re-display the form really easily, this way : you already have every values that were typed in by the user if there is no error, you can do whatever you have to with the data ; like set it in session, if that's what you need, or save it to database, for instance.
3353	you can use functions/classes/methods or even some included files, though, to not end up with one big chunk of un-readable / un-maintenable code...
3354	if your form posts to another page, it'll be really harder to re-display the form... if you are using redirections, you'll to pass everything in the url, and it'll be a mess (and there's a size limit, too)
3356	the most common way of doing this would be to do all your validation checks in purchase.php .
3357	this way, if there are validation errors, it's easier to re-display the form with all of the information that the user has already entered.
3358	if the validation passes, you can do a redirect to review-purchase.php with the necessary purchase information set in a database, or possibly $_session if you're not using a database.
3359	if you can separate the validation code into functions, and the display code into templates to be included, you can achieve a nice separation of logic that would allow you to use them from whichever file you go with.
3360	you might be able to avoid a redirect in that way, ie.
3361	in purchase.php you could check if there's $_post input, validate it, and either re-display the form template, or display the purchase review template.
3362	you need to create or resume the session before you write into it.
3363	so in your authenticate.php where you do $_session['player'] = $player; , create a session first exactly as you do it in your other files.
3365	as one of the first statements, so you make sure no output has been made before it's started.
3366	otherwise you'll start getting errors stating that headers has already been sent .
3367	note: add session_start(); at the top of your authenticate.php page
3368	for all those looking for more information on how virtuemart handles the actual adding to a cart, i'll explain the process of how i finally determined the problem.
3369	the solution is quite simple though.
3370	you may have noticed that most vm forms use php_self as form action.
3371	the form actually submits a load of data you cannot see through hidden input fields to provide the necessary information to the php_self page saying "the user want to do this [addcart] with these [products]".
3372	example from addtocartform.tpl.php which is the little form onsisting of the 'add to cart' button and quantity controls if switched on:
3373	so along with the quantity controls (added by show_quantity_box()) and the submit button, you can see a load of other data being passed.
3374	among this data is func="cartadd" and product_id=[product id].
3375	unlike a simple form post where you expect just data from one pre-determined form, vm uses a file called "virtuemart_parser.php".
3376	this file checks the submitted "func" to check what it is the user is trying to do.
3377	then the parser will check if a function as such was registered (remember you can add your own functions in the vm config) and if so, it will execute it.
3378	this way you handle whether the customer added a product from the details page or the category browsing page.
3379	if the customer added the product from the brwosing page - that's where it will show an error, if he added the product from the product_details page, he'll get the error at the shop.cart page.
3380	[product_details does not seem to have any handling for errors returned by functions]
3381	you are using variables before declaring them.
3382	nb:i can see you checking a $_post["submit"] in your form, if it is the same submit you are using in the html code, you will get the error even after changing it to my code.
3383	because, in that case, you are using variables that are not defined, since the form is not submitted initially.
3384	to this: &lt;tr&gt;&lt;th&gt;&lt;p&gt;first name &lt;/p&gt;&lt;/th&gt; &lt;td&gt;&lt;p&gt;&lt;input type="text" name="firstname" maxlength="10" value="&lt;?php if(isset($fname)) print($fname); ?&gt;" /&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt; repeat like this in all remaining steps &amp; you are good to go.
3385	the problem is that the str_replace is executed after the echo .
3386	possibly your server is configured so that $_post['title'] is not automatically aliased as $title .
3387	initialize $title = $_post['title'] and same for other used $_post items manually.
3388	php notice: undefined variable: title means that there isn't a variable called title.
3389	and looking at your code, you're almost there, but have just missed out two lines.you need to assign your $_post data the variable.
3390	add the follow lines just inside the if statement and you should be ok
3391	suppressed warnings on start_session, no fix @session_start(); commented out every echo, then uncommented them this seemed to fix this, but i can't for the life of me find a reason why.
3392	//echo "somestring"; -> echo "somestring"; several re-starts of httpd, no changes to httpd.conf or php.ini
3394	and for your problem, if you use pdo you'll use prepared statement.plus @abhik has right.bye ;)
3395	instead of a join, you can also use a query like this:
3398	then you can sanitize both the name and the value field.
3400	hm... it seems like a really messy way to insert things into database.
3401	as cyclone noticed you do not purify your input prior to inserting the date.
3402	this is wrong but its a story for another post :p
3403	so i blieve that $_post['pago'] will have only 2 fields 1 and 4... but their key will be 1 and 2 as inactive checkboxes will not have value and will not end-up in the array.
3404	i may be wrong though... shame to admit i do not remember how it works precisely o.o
3406	currently you are passing a non-array value to the foreach so it is never firing.
3407	you should restructure your $_get values so that instead of using a (manual) numeric indicator that you use an array indicator --
3408	this means there's no need to worry about "counting" as it's all automatic and self contained.
3409	it also will (probably) make the .htaccess value assigning somewhat easier as the $_get array name will always be the same (in this case, l[]= ).
3410	but in order to get the correct value you need to assign it an identifier - or a key , say you're looking for a filter value - what you do is manually check the "key" is the one you're looking for, so you do not define the get array with all the same l&lt;number&gt; but for example using your foreach loop again, this time defining what the key is:
3411	so then the filter value is defined if it is present.
3412	this means that after this process the value of the filter in php is $pages['filter'] - clearly defined if present.
3413	your code only iterates through $_get['l0'] , and will fail if that is not array.
3414	so you can iterate over $_get and use only those keys which start with l , or get those values the way i suggest.
3415	if you want to give the same name to all the uploaded files, then you can get the name by using $_get .for example:
3416	that's why you always get redirected to the invalid login url.
3417	beyond that, i didn't really check to see if there were any logical errors in the code.
3418	you also need to change if ( $num = 0 ) to if ( $num &gt; 0 ) .
3419	in either case, you need to use a double-equal == to compare values.
3420	that would assign 0 to $num and execute the code in the body of that if statement.
3421	you can't use the $this keyword into a lamba function as the scope of the function does not extend to the object whose method contains the lambda
3422	if real_escape_string is not a method of your object but the standard msqli method you should change the line
3423	the array array(self::$_instance, 'real_escape_string') is a callback array and it is used when you want to call an object method.
3424	a method of an instantiated object is passed as an array containing an object at index 0 and the method name at index 1
3425	and self::$_instance is the mysqli instance you want to call
3426	$_server['document_root'] is for server-side pathing so to speak, as you already noted.
3427	you don't need to put it in your markup, css and js.
3428	i'd stick with absolute-relative paths like /images/background.jpg (note the leading slash).
3429	that way even if your page is accessed by a url like
3430	using document_root helps a lot when including multiple files scattered around your document root - using relative paths here gives me a headache.
3431	if you really want full urls in your pages, though, you can try using $_server['server_name'] for that matter, but i really don't understand the need to do so.
3432	that is what is annotating the data.
3433	there is nothing external in there, but you are dumping a giant object tree.
3434	usually it hangs, so you're lucky you even got anything there.
3435	you can try adding sessions to the php pages like:
3436	it must be added at the top of the php page and once the work is done, destroy the session:
3437	the above code for closing database connection is for php pdos.
3438	if you are using mysqli, use:
3444	the challenge is, php get executed and generate the page once by server side.
3445	so your logic will only work when page is refreshed (re-generated).
3446	but the problem is that what you trying to achieve is happening on client side (by clicking browne... button) therefore we need to use javascript to solve this part.
3447	one way to go, by adding following javascript at the end of your code
3448	this will only work if you bring the download button out side of the if statement and give it an id like id='btndownload' .
3450	this is one way to solve it, the other way is, when the image get uploaded, you need to added a field in your database table to tell where the file/attachment location is, and if that field has file/attachment location, than you can dynamically create a download button by adding following condition.
3451	you can go two ways, you can added extra condition !empty($_post['msg_body']) to check if field is not empty, so your code will look like this:
3452	you can also do it by javascript following this example .
3453	if you want use this array further make foreach and execute
3454	in addition to what everyone else said this should fix your errors.
3455	you will still have security problems that you need to fix.
3456	also, i don't use mysqli i use pdo so you will have to forgive me if the syntax is slightly wrong.
3457	your problem is that mysqli_query() doesn't return a row.
3458	you need to need to fetch a row from your result and then assign it to $_session['depname']
3459	to fix this issue, you have to modify the array format.
3460	add the id to the start of the array, like so:
3461	if the id variable is generated dynamically, then you can manually add it to the array start using array_unshift() function:
3462	i already pointed out in the comments that this question is not very specific, though you can look on the following manuals and documentations for further information in order to do that, what you want to archive.
3464	fetching them shouldn't be an issue since there is almost nothing to fetch if you precisely query the required information.
3465	you might need to loop through your result, however.
3466	for querying the image in your table, your query may look as follows:
3468	if you can't disable them on the php.ini , you can use this function i found here on stackoverflow a while ago, to disable then at run time:
3471	so unless you have verified with a password or otherwise that this user is who he claims to be, you should not use $_post['username'] to return other information.
3472	if your login process (which we cannot see above) already verifies that $_post['username'] is valid, you can use it as a source to retrieve additional information.
3473	using explode with a white space as the delimiter now guarantees that index 0 is the pid, and index 1 is the command, and the remaining indices are arguments.
3475	you should use double quotes or explicit string concatenation.
3476	in your example the value of $_post['student_no'] will be string '$student_no' , not the value of the $student_no variable.
3478	use the php explode function to extract the base url from the referer by splitting the string on the ?
3479	it's difficult to give you a definite answer.can you try without pdo, just to check wether there is an issue with sqlite file or the php code.
3480	for the purpose of the function, why not just use array_unique($array) ?
3481	ok, since you are trying to learn.
3482	here is the explanation for the function in the post
3483	well all this does is to insert the value into the key of an array.
3484	since all keys are unique in an array, you will remove all duplicates.
3485	you are trying to execute an update query based on an insert's format.
3486	check the update query format .
3487	in addition, your code is highly insecure.
3488	at least use mysql_real_escape_string() , e.g.
3489	$name=mysql_real_escape_string($_request['req-name']); to protect against sql injection.
3490	i'm not sure to understand what you mean above, unless you wanted to say without using an additional visible form input .
3491	if so, then the answer is contained in the question: you have merely to add a hidden input to your form (and give up buttons value):
3492	then in edit_post.php you can use $_post['property-id'] as you want.
3493	you should use === false instead of !== true , strpos will never return true .
3494	if auto-escaping is enabled, then your filter will be escaped after it is called.
3495	if auto-escaping is causing you problems, then take a look at the "automatic-escaping" link below and see how to disable it.
3496	it should go without saying--but, if you disable auto-escaping, then you are responsible for sanitizing the data before it is output.
3497	php will recognize that the submitted form contains an array of filter_attr data if the name attribute of the static and dynamic inputs is "filter_attr[]".
3498	however, the id must be unique if you wish javascript to access it using document.getelementbyid .
3499	thus the first dynamic input has an id of "filter_attr1" and a name of "filter_attr[]".
3500	it is better to write: document.getelementbyid("my_div") than to use the id or name directly (see discussion at why don&#39;t we just use element ids as identifiers in javascript? )
3501	creating dynamic inputs is preferable using the dom and its methods, if you wish, you may use jquery which simplifies working with dom.
3502	the above html seems to be missing a submit button.
3503	however, even if it is present in the actual code, the following code does not work:
3505	data coming from form elements where the user had to supply some kind of response whether it's text or marking a checkbox or radio button.
3506	the submit button facilitates submitting the data but it itself does not get submitted if you fail to name and the name must be the same as its type, i.e.
3507	i respectfully suggest the way my preceding php code does which answers the questions, "was a form submitted?
3508	and, if so does it contain any data?"
3509	the code needs to assume that the post could be tainted.
3510	that means you need to validate the posted data before using it.
3511	the mysql extension has been deprecated as of php5.5; see discussion at the mysql extension is deprecated and will be removed in the future: use mysqli or pdo instead .
3512	lastly, using an html table should be restricted for displaying tabular data and should not be used for layout.
3513	instead, use div elements and by styling them you can achieve the desired layout.
3514	this result will be semantically correct and save on memory.
3515	at first i wasn't sure what exactly if output exists prior to calling this function means, but apparently there should be no output to the browser in order to set the cookie.
3516	after i moved the problematic line of code before any output, the problem is gone and the code works on the above browsers (both development and production servers), plus on latest ff and chrome on android.
3517	instead, you have to make it throw an exception, which is the most reliable way to get the error message.
3518	to do so, in your constructor, add this line
3519	also note that your class is a genuine example of all the mistakes one could make writing a pdo wrapper.
3520	i compiled the most popular mistakes in an article, your first database wrapper's childhood diseases and your class contains every single one of them.
3521	first the parameter order is wrong in the array_map call.
3522	second, you need to pass the item value as a reference in order to change it:
3523	pherhaps the extra space in the '= ' was making a difference.
3524	you don't actually need to specify it in your just wanting to do an = comparison on a laravel -&gt;where() .
3525	if this doesn't work, try var_dump() the $foodtrucktype variable?
3526	i have faced the same problem.
3527	when i removed " delimiter // " (also // delimiter ; at the end), it worked.
3528	i think delimiter is no longer required with php pdo.
3529	the same drawbacks exist using pdo as with any other php database interface that does persistent connections: if your script terminates unexpectedly in the middle of database operations, the next request that gets the left over connection will pick up where the dead script left off.
3530	the connection is held open at the process manager level (apache for mod_php, the current fastcgi process if you're using fastcgi, etc), not at the php level, and php doesn't tell the parent process to let the connection die when the script terminates abnormally.
3531	if the dead script was in the middle of a transaction, that can block a multitude of tables until the deadlock timer kicks in, and even then, the deadlock timer can kill the newer request instead of the older request that's causing the problem.
3532	if the dead script was in the middle of a transaction, the next script that gets that connection also gets the transaction state.
3533	it's very possible (depending on your application design) that the next script might not actually ever try to commit the existing transaction, or will commit when it should not have, or roll back when it should not have.
3534	this is only the tip of the iceberg.
3535	it can all be mitigated to an extent by always trying to clean up after a dirty connection on every single script request, but that can be a pain depending on the database.
3536	unless you have identified creating database connections as the one thing that is a bottleneck in your script (this means you've done code profiling using xdebug and/or xhprof ), you should not consider persistent connections as a solution to anything.
3541	this sob-story has a point: it broke things that we never expected to break, all in the name of performance.
3542	the tradeoff wasn't worth it, and we're eagerly awaiting the day we can switch back to normal connections without a riot from our users.
3543	the mysqli extension supports both interpretations of a persistent connection: state persisted, and state reset before reuse.
3544	before a persistent connection is reused, the mysqli extension implicitly calls mysqli_change_user() to reset the state.
3545	the persistent connection appears to the user as if it was just opened.
3546	no artifacts from previous usages are visible.
3547	the mysqli_change_user() function is an expensive operation.
3548	for best performance, users may want to recompile the extension with the compile flag mysqli_no_change_user_on_pconnect being set.
3549	it is left to the user to choose between safe behavior and best performance.
3550	for ease of use, the safe behavior has been made the default at the expense of maximum performance.
3551	if you are creating 1000's of connections per second you normally don't ensure that it stays open for very long time, but operation system does.
3552	based on tcp/ip protocol ports can’t be recycled instantly and also have to invest a while in “fin” stage waiting before they may be recycled.
3553	the 2nd problem... using a lot of mysql server connections.
3554	many people simply don't realize you are able to increase *max_connections* variable and obtain over 100 concurrent connections with mysql others were beaten by older linux problems of the inability to convey more than 1024 connections with mysql.
3555	allows talk now about why persistent connections were disabled in mysqli extension.
3556	despite the fact that you can misuse persistent connections and obtain poor performance which was not the main reason.
3557	the actual reason is – you can get a lot more issues with it.
3558	one trouble with using persistent connections is it does not really scale that well.
3559	for those who have 5000 people connected, you'll need 5000 persistent connections.
3560	for away the requirement for persistence, you may have the ability to serve 10000 people with similar quantity of connections because they are in a position to share individuals connections when they are not with them.
3561	persistent connections are a good idea only when it takes a (relatively) long time to connect to your database.
3562	nowadays that's almost never the case.
3564	pdo does not manage the persistence.
3565	it reuses connections when a) they are available and the host/user/password/database match.
3566	if any change then it will not reuse a connection.
3567	the best case net effect is that these connections you have will be started and stopped so often because you have different users on the site and making them persistent doesn't do any good.
3568	the key thing to understand about persistent connections is that you should not use them in most web applications.
3569	they sound enticing but they are dangerous and pretty much useless.
3570	the procedural mysql library of php, has a feature whereby subsequent calls to mysql_connect will return the same link, rather than open a different connection (as one might expect).
3571	this has nothing to do with persistent connections and is specific to the mysql library.
3572	pdo does not exhibit such behaviour
3573	in general you could use this as a rough "ruleset"::
3574	there are only few applications/users accessing the database, i.e.you will not result in 200 open (but probably idle) connections,because there are 200 different users shared on the same host.
3575	the database is running on another server that you are accessing overthe network an (one) application accesses the database very often
3576	your application only needs to access the database 100 times an hour.
3577	you have many, many webservers accessing one database server
3578	using persistent connections is considerable faster, especially if you are accessing the database over a network.
3579	it doesn't make so much difference if the database is running on the same machine, but it is still a little bit faster.
3580	however - as the name says - the connection is persistent, i.e.
3581	it stays open, even if it is not used.
3582	the problem with that is, that in "default configuration", mysql only allows 1000 parallel "open channels".
3583	after that, new connections are refused (you can tweak this setting).
3584	so if you have - say - 20 webservers with each 100 clients on them, and every one of them has just one page access per hour, simple math will show you that you'll need 2000 parallel connections to the database.
3585	the problem is in quoter function that called for each string parameter dblib_handle_quoter in ext\pdo_dblib\dblib_driver.c .
3586	it will convert any string containing character with codes outside of 32 &gt; char &gt; 127 range into binary string.
3587	so if агеев is not converted to 'windows-1251' it becomes 0xd098d0b2d0b0d0bdd0bed0b2 - a utf-8 representation converted to binary string (something like ррір°рѕрѕрі ).
3588	single-byte conversion (with cp1251 code page in your case i guess), if expected data type is char or varchar .
3589	here you need to convert parameters to windows-1251 .
3590	unicode conversion, if expected data type is nchar or nvarchar .
3591	here you need to convert parameters to ucs-2le .
3592	that's why there is no other choice (at least for now) than to use iconv for parameters.
3593	ps if you set connection charset right, you shouldn't need to convert $sql as it should be done by dblib.
3594	or, if you have a lot of data in the array and want to avoid creating a complete copy of each element over every iteration, simply iterate over each element as a reference.
3595	then only a reference to that item is created i memory and you can directly manipulate the array element by using $item:
3596	the net effect of what you're doing is to just replace the commas with spaces, so you can use php's built-in str_replace function:
3598	for example if you wanted to also strip out any existing plain white space between the list items, you could use this:
3599	if you really want an additional trailing space after that, just append it.
3600	you need to add quotes in the values and based on the error you need to escape those variables first as well since name has a quote in it.
3602	make sure you are connected to the database before running it otherwise you will error.
3603	change $_post['fruit'] to $_post['email'] , and you don't need the loop, because the post data is already an array.
3604	which also means you should not catch connection errors (at least not there), since if the function can't return a pdo connection your script doesn't need to continue.
3605	first, you need to tell pdo to throw exceptions on connect errors.
3606	next, you shouldn't catch them, at least not using try .. catch.
3607	if you use fetch() with the pdo::fetch_assoc style it is easy to get both columns:
3608	by placing the fetch in a loop all of the rows will be returned which you can then limit as you see fit.
3609	you typically want to avoid accessing array indexes that you are not certain exist.
3610	so what's the easiest way to extract user input in a proper manner?
3611	note that you should also avoid ever having an excecution path that leaves a variable undefined:
3612	you could use $content in that situation if it were wrapped in isset or empty, but that hampers the readability of code.
3613	if you want to leave a variable undefined under some condition, define it as null.
3614	that leaves it as 'undefined' without it issuing variable doesn't exist warnings.
3615	there's also, of course, php's filter extension.
3616	in particular, you can use filter_input to avoid rewriting a lot of the code for handling user input.
3617	as an aside, you should always develop with errors cranked all the way up, and you should be monitoring for any kind of error (warning, notice, etc).
3618	this will help prevent potential logical bugs, and it tends to keep code clean.
3619	(there seems to be a correlation between code that never issues notices and well written code.)
3620	you have a few curly quotes in your code “ ” and ‘ ’ which will explain the "file not found" error for your form's action action=‘welcome.php’ .
3621	you should also remove enctype="text/plain" - consult this answer on stack for more information about it.
3622	this passes a json array of objects to php with the ajax post method.
3623	change the column names in the prepare statement to match your database columns.
3624	it will update the entire database table with all the data in the html table once you click "confirm" in your "save" dialog.
3625	i suggest you do a lot more reading on pdo prepared statements as what you have currently is not even close to a prepared statement.
3626	this is also assuming the mr_id column is your primary key.
3627	if it is not, you'll need to make those changes accordingly.
3628	you can explode the day to get an array of days
3629	create a custom module, implement "hook_user" and insert your code in the "insert" operation.
3630	when a user gets inserted into the database for the first time, your code will be executed.
3631	you can use it to add a your block or set a session variable and display your block according to its value.
3632	make sure you have a pdo connection before your query:
3633	or if it is in external file then you have to include that file and have to use global $pdo to access the object like:
3635	i can see in your code that you send:
3636	so in your backend you should use the name of the value like this to retrieve your data:
3637	and finally, if you are using forms to send data to php then you can use something like that :
3638	the default method is get .
3639	so if you do not specify method you could access it only by using $_get
3640	you need to accumulate all values into one array (here $ids ), then implode all together after the loop.
3641	assuming you should be getting an array item everytime foreach iterates over $this-&gt;cart-&gt;content() , you should review you logic.
3642	at every iteration, $ma receives a new array() with just one element containing $list['id'] value.
3643	each iteration overwrites the previous value of $ma .
3644	when it reaches $na = implode(',', $ma); , there is actually not enough elements to form an imploded list with separation, since there's no elements to separate (just the last one set for $ma ).
3645	not sure what the point of using an array is when mysqli_fetch_array is an array.
3646	your receiving that error because the query is not working.
3647	what you've done in auth class is you've just created the instance of database class using the singleton pattern and trying to invoke the query method from the database instance which is not defined in the class.
3648	if you want to access it like $this-&gt;dbh-&gt;query() , you need to construct an instance of database class and return the pdo instance at the same time.
3649	what i've just modified here is return self::$instance-&gt;pdo .
3650	this returns the object of pdo once the database class is instantiated if the getinstance is invoked for first time otherwise it just returns the created pdo instance.
3651	you can now do $this-&gt;dbh-&gt;query() in auth class.
3652	note, you need to do this only if you're not going to define any other methods in the database class except static methods like getinstance .
3653	because the result of getinstance only allows you to access pdo properties and methods.
3654	so, the solution for that is to define a public method in database which returns pdo instance separately.
3655	once you're done with it, you can access the pdo in auth class like:
3656	basically it suggest that you shouldn't echo rather than exit() your response.
3657	otherwise, the remainder of the page is "loaded" again after the if(isset... is finished.
3659	you need to split the string with ; and get first element from the returned array (it will always have at least one entry).
3660	depending on how it should work when " ; " is part or not part of the string, you need to add the needed once if you want to return the full string:
3661	this is similar if you operate with strpos() , you have to deal with false case as well.
3662	you are printing the mysqli result object .
3663	in order to print the result you have to use:
3664	you can delete these session variables if u dont want to set anything...
3665	you don't need a custom function to get the last insert id , there is already one built into both php mysqli and php pdo extensions .
3666	i'm almost certain the issue is that $db_connection is null since the connection is failing.
3667	based on what you provided your database name should be launcher-login instead of launcher_login as you've specified in your connection string.
3668	as such the following edit should fix your problem.
3669	if you really need/want to not pass the id through get, you can wrap the table in a &lt;form&gt; with the action set to the page you want to send it to, with a method of post and a hidden input field.
3670	i know your question says you can only use html and php; without javascript, the only way you can really do this is to add a button to the form/table.
3671	you could use css to style it so it looks like a link, or anything not-button like.
3672	when that button is clicked, the form will be posted to index.php and you can get to the id through $_post['user_id']
3673	if you are willing and able to use javascript, you should be able to do the following html/php:
3674	i think you need to be specifying the absolute save path rather than the relative path it looks like you have now.
3675	i just how to fix this problem.
3676	this worked for me you can give it a try:just change
3677	you have to assign the fetch array to an array variable.
3678	i this is common both in mysql and mysqli.
3680	if you like the foreach syntax, you can use the following class:
3681	i replaced the iterator method calls with a loop on a copy of the array.
3682	i presume this gives direct access to the internal storage since php implements copy-on-write.
3683	the native foreach is much faster than calling rewind() , valid() , current() , and next() .
3684	also pre-calculating the strtolower on the column object helped.
3685	this got performance down from 35% of cycles to 0.14% .
3686	also experimenting with @gordon's suggestion of using an array keyed on name instead of using the internal storage.
3687	the above is working well for a simple drop-in replacement.
3688	one way is to create an array of the buttons and use the code or something else unique as the index:
3689	now there will be a $_post['submit']['j7410'] if that button is clicked, so to get the code use:
3691	the easy fix is to add array_push($ssrows, $ssrow); right after the foreach loop.
3692	you will need to add a check for 0 rows, this should be skipped then.
3694	depending on what your software solution is going to end up to be, third-party users would be more accustomed to writing to and reading from this superglobal with your custom session handlers doing the magic in the background.
3695	i don't know what dom library you're using - i use domdocument myself - but you should have a textcontent property you can use to get the element's... well, text content.
3696	in your case you probably shouldn't be using the stupid explode in the first place.
3697	there are more appropriate string functions in php.
3698	if you just want the first part:
3699	it's not pretty; but you can make use of the php array functions to perform this action:
3700	the use of array_slice() is pretty foul as it will allocate a second array which is wasteful.
3701	but take note that using strip_tags, you won't be able to filter off the attributes.
3702	you are using array_map() incorrectly for the sake of an abitrary rule you've set yourself that you won't use a loop?
3703	the usual idiom in php for looping over an array is the foreach operator.
3704	array_walk and array_map can be used, but they didn't become common idioms because until relatively recent versions of php creating anonymous functions was inconvenient.
3705	prior to php 5.3, you had to call create_function() to create a function on the fly.
3706	so array_walk and array_map were usually only used when there's a named function that does what you want, e.g.
3707	but even now that you can use function to create anonymous functions, many people find
3708	array_map tends to be used more than array_walk because it can be used as part of a larger expression.
3709	with foreach you would have to use one loop to push onto a result array, then follow it with code to operate on that array.
3710	since it is a concept question, and you mentioned that the login / register system is already done, what you need to do is:
3711	you might have turned on register_globals in php.ini.
3712	thats why you are getting variable with the name of array index (here $_get ).
3713	it is not a best practice to turn on register_globals .
3714	this redirects all requests that do not match an existing file (for example, an image) to index.php , where you can then use $_server["request_uri"] to decide how to act.
3715	this is an implementation of the front controller pattern http://en.wikipedia.org/wiki/front_controller_pattern
3716	additionally, if index.php cannot be found by apache, then the request will be forwarded to reserve.php
3717	the error you're seeing means that $this-&gt;dbmanager-&gt;db is not an object.
3718	thus trying to call a method on it ( prepare ) gives you an error.
3719	so basically, your error has nothing specifically to do with pdo, but rather with static vs. member properties.
3720	...if you aren't using a database in here, then there's nothing to do there, but if you ever store this data in a database, that's almost definitely where the mis-encoding is happening.
3721	there's a lot that could go wrong in the database - from connecting, to how the data is stored, to how the data is retrieved.
3725	perhaps you want to do something like:
3726	you use both mysql_* and mysqli_* functions here.
3727	also you have to sanitize and validate your inputs.
3728	for this snippet of code try the following:
3729	furthermore you need to use only one html form that includes all your inputs.
3730	in short, a temporary table is just that, temporary.
3731	it's not meant to be used for other purposes than to temporarily store some data for one specific operation.
3732	if you want a more permanent thing consider using a concrete table with a memory storage engine.
3733	your query is open for sql injection check how can i prevent sql injection in php?
3734	a good starting point is filter_var() .
3735	using the right flags for validation and sanitization and makes your input save(r).
3737	then you can build an array, containing your original category parent id.
3738	this you can pass to array_walk() , with a callback as second parameter.
3739	the callback itself has assigned a collecting/ final array that is passed as reference and serves as target for your results.
3740	now you can loop recursively over an indefineatly nested wordpress category hierarchy.
3743	sql escaping is only done to properly insert into the database and not break sql syntax, the values are stored in their unescaped form.
3744	values only need to be escaped for their transition into the database , the values are never supposed to be altered permanently.
3745	especially with pdo you shouldn't need any escaping at all.
3746	you can simply use if(filter_var($email, filter_validate_email)) to check email format or use a regex
3748	it will ensure your values are entered correctly and will do very well at protecting you from sql-injection.
3749	the above code is vulnerable to sql injection if $stuff is untrusted input.
3750	you need to use array instead of string , when you use fputcsv .
3751	i've also incremented the $userid with this line: $userid = count(file($file)); it reads the file lines into an array, count it, so it will always increments.
3752	i've also improved your code a littlebit, with clear thos unused variables.
3753	you can use $_post["anything"] directly, you do not need to create another variable, what you do not manipulate.
3754	because you are using a numeric key array you could use php array_merge function to achieve exactly that
3755	nesting functions is fine - as long as you take readability into account.
3756	in this fairly simple example there's a great deal of mental effort that needs to be put into parsing the statement:
3757	if you decide to use nested functions, also make use of intelligent indentation to make it easier to see what's going on:
3758	each function argument is on it's own indented line ( trim and str_replace are both being used as function arguments, as are $var , "black" and "&lt;body text='%body%'&gt;" ) the ending ))); clearly delimits where the function nesting ends.
3759	it also provides a quick syntax checksum (count the number of opening parentheses and make sure they match the number of closing parentheses at te end).
3760	i modified the "question code" such as, you can do a fast check by,
3761	it appears that $results is empty because your query is not returning anything.
3762	and i suspect your query is not returning anything, because you're doing a search for the $loginname of true (or maybe false ), because of this line:
3763	i suspect that's not what you want.
3764	it's also unclear what your global $db is about.
3765	if that is your literal code, then you have a clear bug in that you aren't even attempting to connect to the database.
3767	also, do not mix up pdo and mysqli.
3768	you are passing a pdo-connection to mqsqli functions, thats why you get " expected mysqli, got pdo."
3769	i can bet $10 that the page you are requesting returns an error instead of text.
3770	in chrome, before sending the ajax request press f12 and go to network tab.
3771	click on the () clear sign to clear all entries if needed.
3772	then when the ajax call proceeds check out the response.
3773	it's most probably a mysqli error page (chrome dev console screenshot: http://image.prntscr.com/image/84e59bfb9caf4c9b9dcf8b5f79844176.png )
3774	a great tutorial if you don't know what i am talking about: https://www.youtube.com/watch?v=axgb4tirngm
3775	following your code snippet, $each_item['item_id'] is not checked if it is set with something inside.
3776	the subsequent query will fail sometimes (sql fail if the where close is empty)
3777	try this by concatenating the value in the string via php,
3779	and it seems to work as normal.
3780	however can anyone confirm this will work going forward?
3781	will browsers understand this for all languages?
3782	or do i have to normalize the string to make sure every browser can understand the url?
3783	the problem is i'm not on php 5.3, which is required to install the normalization extension for php.
3784	i'm afraid it will break things if i do upgrade, i'm currently on 5.2x.
3785	the script doesn't stop after detecting that the name is in use.
3787	you should move the block of html at the top to the else clause of the if ($_post) test.
3788	i just had to cast to boolean the return value, as preg_match() returns 0|1 .
3789	you just have to start the session and set it like any other variable, just like you have it in the question.
3790	"\n" at the end of the code for clarity.
3791	and you need to add a value attribute to the radio inputs, otherwise you won't get any value.
3792	then you can get the values from php: $_post['os'] will return android , ios or may be empty if no value is selected.
3793	//try to use mysqli,it is much advanced and always use prepared statement
3794	once you have verified that it is xml you have a couple of options:
3795	you could check to make sure isset($rss-&gt;channel-&gt;item) existed and $rss-&gt;channel-&gt;item-&gt;count() > 0. you can use count($rss-&gt;xpath(/channel/item)) &gt; 0 .
3796	this way you can access any image thumbnail just by prefixing it with thumb_ with pd_image and you don't have to store pd_thumbnail in database.
3797	the issue here is that, if either the first or second argument to array_merge() is not an array , the return value will be null.
3798	for example, although one might reasonably expect that a call such as array_merge($somevalidarray, null) would simply return $somevalidarray , it instead returns null !
3799	(and to make matters worse, this is not documented well at all in the php documentation.)
3800	since you don't use $page directly but you do a mathematical operation on it, if it isn't a numeric value it will be evaluated to 0 if it isn't a number (for example, if it's a string).
3801	in this case you don't need any escape function, but if you're using directly any other $_get or $_post variable, then you should consider it.
3803	you need to make sure that you are escaping any data properly to prevent that.
3804	thirdly (and presumably why it's not working at all), you are not quoting the (presumably string) values you are sending to the db, and there are syntax errors when you're building your query - you are missing concatenation operators ( . )
3805	any decent editor should flag those sorts of errors before you even save the file.
3806	in php though, you should not check for $_server["server_port"] == "80" , as you may at some point need to run your web server on a port other than 80/443, in development for example.
3807	instead, check the contents of the https server variable:
3808	you can use a $_get parameter to let the form know if you are editing or not.
3809	i guess, what you're trying to do - to get part of the variables name from the url ( $_get[] ).
3810	in this case you should do something like this:
3811	note:i really doubt it's a good practice for security reasons.
3812	you should strip the input at least.
3813	or use switch..case blocks for all defined possible input variables.
3814	one way would be to simply use a foreach iterating over the array and copying it to a new array, changing the key conditionally while iterating, e.g.
3815	if $key === 'foo' then dont use foo but bar:
3816	another way would be to serialize the array, str_replace the serialized key and then unserialize back into an array again.
3817	that isnt particular elegant though and likely error prone, especially when you dont only have scalars or multidimensional arrays.
3818	yes, there is a definitely a big difference you need take in consideration.
3819	one is used to get the included script full path (current file) and the other is used to get the script path (relative to web server).
3820	so you might use one or the other depending of what you try to accomplish.
3825	for example, if you have "script_a.php" that call a function "thisfile()", where "thisfile()" is in another "script_b.php" through include_once, then the result will be different.
3826	not so relevant but i think it's worth noticing.
3827	be aware that there is also $_server['script_filename'] .
3828	it's better to do it using dom parser like this:
3829	but if you still want to use preg_match you can use this:
3830	try logging all your php variables to console: print print_r($this-&gt;rec-&gt;variable_name, true); and then check to make sure that all your variables are strings, and that none are null.
3831	inspect your template file and make sure that the style (ie.
3832	font type, font size, etc) is consistent in each template variable.
3833	in other words, make sure that there are no variables where half the variable is a different style to the rest of the variable.
3834	this particular subtlety is very easy to introduce in a template file, and generally the easiest way to fix it is to simple delete and rewrite each template variable.
3835	lastly, try removing the 'html' parameter when invoking the addtemplatevariable method and see whether that makes a difference.
3836	if you're not actually using html, then there's no point in passing the 'html' parameter.
3837	conversely, if you are using html, then the corrupted file may be a case of incorrectly structured html, causing microsoft word to flag the the document as corrupted.
3838	if you're using php 5.5+, you can use array_column() , like so:
3839	if you're using a previous php version and can't upgrade at the moment, you can use the userland implementation of array_column() function written by the same author.
3840	alternatively, you could also use array_map() .
3841	this is basically the same as a loop except that the looping is not explicitly shown.
3842	note: the loop will still be performed, but it will be hidden inside the aforementioned functions.
3843	then create a method in your class to get the attribute by code:
3844	then you can make calls on the attribute object, e.g.
3845	your index.php doesn't contain session_destroy() - you need to use home.php?logout .
3846	in your case you need to destroy the session before checking auth in home.php to get redirected to index.php
3847	and of course, you'll also get jumped on by a few dozen busybodies who'll claim that using the mysql_*() functions will cause the universe to implode in 5... 4... 3...
3850	there is the option of storing the value in the $_session array.
3851	if you only need the array for the current user and you don't need to persist the data longer that the user session.you could use a session variable for that.
3856	try it like this to tell pdo that you are binding an integer for it not to put '' around the variable.
3857	1) how do you assign a value to your $_get['id'] because with what you have on your url $_get['id'] will always return null since it has no values from anywhere.
3858	you can test by doing var_dump($_get); and your $_session['id'] will also return null .
3859	you must give it a value before you can get anything assigned to $_get['id'] .
3860	that is pretty much it, although you still appear to be using the mysql_* functions rather than pdo in your second example.
3861	apart from that you'll just need to remember to use double quotes if you want your variables to substitute into the string.
3862	this is because you are using variables which are not defined here, simply change to $_post array with scope for each variable you want to grab.
3863	here array_map is used with an anonymous function to build an array of the “weight” of each value in $arr .
3864	that array is then used to order the values in $arr .
3865	this is basically the same as boltclock suggested just with doing the comparison on the already calculated “weights”.
3866	if you want to access it via javascript (client-side) then use ajax to return the json and then parse it with your javascript.
3867	if you need the browser to keep a copy then store it in localstorage after you retrieve it from the server.
3869	in getdatacache.php you need to do some thing like this
3870	while it's true that you can likely reduce the parsing work that a parser like html purifier does by filtering out tags before the fact, there's no security gain in using strip_tags() first, and in your use-case it likely isn't going to make much of a difference.
3871	the reason it won't make much of a difference is, of course, that your average submitted content will not be malicious, and thus be submitted via your wysiwyg, which is only going to generate those tags that you already want to allow.
3872	as such, you wouldn't strip out any tags in the preliminary strip_tags() run for those comments.
3873	meanwhile, a malicious submission is likely to bypass any benefit strip_tags() would give you, anyway.
3874	however, using strip_tags() before the parser won't do harm, and it could help guard against attempts to use the parser against you by letting it eat up a lot of resources - though if the parser can cause issues (i'd expect it to have safeguards against that), that tends to happen through nesting depth, not through tag.
3875	i see no reason to recommend it in your case; but i see no reason to dissuade you from using it, either.
3876	strip_tags() is pretty fast and it won't mangle anything if you use it before the parser.
3878	the database stores the data .
3879	the point of "escaping" the data (or, better yet, use placeholders/parameterized queries ) is making sure the data makes it into the database correctly and safely.
3880	if the data needs to be treated specially, then handle this at the data level -- the actual operation of dealing with the sql should be simple, consistent, and reliable.
3881	(note that mysql_real_escape_string doesn't change the data seen by the database , rather it ensures that the data is the real data -- that which was passed to the mysql_real_escape_string function -- after the database parses the sql command.)
3882	it is quite sad, but the entire point of needing to "escape" still exists because of the incorrect concatenation of data into sql strings.
3883	this "problem" has been solved for many, many years with the use of placeholders which allows the sql command and the data to be kept isolated.
3884	prepared statements may also be more efficient, depending upon other factors.
3885	and, quite honestly, i can't see how people can stand to look at/write the mess created with string manipulation (even without all the added "escaping" code) of sql commands in general.
3886	if you are applying the clean() function on it (which i assume is an awful mixture of stripslashes/htmlentities/addslashes), then the hash you generate with sha1() might not be the hash for the actual password.
3887	this will work by accident even if the password contained special charactes.
3888	but only as long as you always follow the exact same procedure.
3889	and actually you should be properly escaping the $sha1 hash afterwards (even if unneeded).
3890	and more actually, you should use a scheme that involves a better salt (per-user).
3891	but to answer your question: this is working in your case; and not a problem.
3897	note that such malware is often picked up by google: they'll add a warning to such a hacked website's index: ' this site may harm your computer. '
3898	getting this notion removed requires a ' request a malware-review ' with google webmaster-tools (i don't know if google will automatically rescan your page in x amount of time if you don't report your page as fixed, neither do i know if you can report your page as fixed without google-webmaster tools, so be warned if you don't want to give your cellphone-number to google!!!
3899	as one can now read, they jump through a lot of hoops to fool virus-scanners.
3900	i also noticed that when using most webbased tools (or even w3c validator) to fetch the source of the infected website, php did not insert the javascript, making the website look not infected !
3901	i also had this 'problem' when trying a simple telnet-command to (safely) get the infected code.
3902	however after seeing the php code behind it, i realized i used to few http commands (specifically the referrer).
3903	doing: telnet infected-site.com 80 and then pasting the following finally gave the infected markup source:
3904	note that this way one can also safely explore (and reverse-engineer) the source of the iframe etc!
3905	note that this time the numbers are in octal (base 8) (separated by , with an offset of -4 ).
3906	so i updated my decoder to include a base/radix setting (and all the depending links in this answer) and as one can see the payload is still the same (apart from the domain it points to).
3907	however googling '// this code use for global bot statistic' (found in the php you supplied in your question) rendered over 4.1 million results (dating back to at least 2010), indicating that also wordpress, joomla, etc are victim of this 'technique'.
3908	reading some of those links (like this , this or this ) i get the impression this started out as a way to fool search-engines (like google) in order to increase page-ranking.
3909	this at the price of creating a self-inflicted malware-hole.
3910	naturally the variants that specialize in distributing malware now try to hide themselves from the search-engines.
3911	you can try use function addslashes for prepare data before insert.
3912	i don't know how your work with database but this function is simple way for ask to your question.
3914	have you looked into the db object and writing parameterized queries?
3915	you can view the docs here , and tab down to parameterized queries.
3917	you would need to explicitly use serialize / unserialize only if you intend to persist values using some custom mechanism.
3918	the two functions are totally unrelated in purpose; the only attribute they share is that they are commonly used to provide safety to web applications.
3919	i'd also rollup your queries if you don't need that level of grain.
3920	in example on the first one:
3921	this is the approach i would take to optimize performance by reducing the number of db queries, roll-up the results so less records need to be loaded into memory up front, and then loop through to get my results.
3922	you can just set a $_session[] variable and destroy the session if the user logs out.
3923	if the session variable is set, then you can show content which should only be shown to logged in users.
3924	at the time of login start the session by using the:
3925	where you are using the query to check the credential use the session if the credentials are correct.
3926	and at the time of logout destroy the session by using the session_destroy(); .
3927	i don't want to copy the whole php.net page, please just read it.
3928	you don't need to re execute your query at each time, you will always have only one 'article_id' in your $data array.
3929	also you have to secure your code with try, catch() you can try with this code :
3930	i would do this by using ajax and jquery.
3931	you would need to do 3 things - add ajax/jquery code in head of document, create php file for ajax to connect to, and add onchange , id &amp; value attributes to fields.
3932	i have put numbered anchors in your code, and the notes are at the end.
3933	you can do this all in 2 files, but the second file check1.php , can only have the 1 database query, or you will have errors in your ajax.
3934	1 - move all &lt;?php ?&gt; scripts to the top of the page.
3935	this will: (1) clean up your code, (2) be able to process all database queries at the same time.
3936	3 - to fix your second issue after entering data into the input fields and click submit.
3937	it creates a new record in the database instead of populating the required columns in the database use insert into ... values ... on duplicate key update ... .
3938	if pipeno is already in the database (since it is a primary key ) it will update instead of insert .
3939	4 - i recommend saving your error or success message (#4a) and echo it at the top of your html (#4b).
3940	5a - you changed from a hard coded pipeno dropdown, back to the dynamically dropdown using the function.
3941	so you are missing the javascript - onchange=check(); 5b - now that you are creating your pipeno &amp; onchange=check(); dynamically, you have to change your check() function to get the id dynamically as well.
3942	6 - $php_self is not valid.
3943	i think you were trying for $_server['php_self'] , but this is easily hacked, so it is better just to use action="" .
3944	7 - when doing your &lt;select&gt;&lt;option&gt; you were using the same value="" , but each one needs to be different for you to get the value when posting.
3945	also, most &lt;/option&gt; 's were misspelled as &lt;/optio&gt; .
3946	8 - if you have 3 forms on the same page, each one has to have a different name, or you will not be able to tell which submit button was clicked.
3947	10 - in you 2 &amp; 3 forms, you are using id 's that are used in the 1st form.
3948	this is invalid as every id must be unique.
3949	what you can do, is call session_write_close in your main site script before making your curl request – at that point all data is written to the session file, and the file lock is released.
3950	you have to be aware though, that you can not use the session again in your main site script instance after that – well, you can still read data from and push data into the $_session array, but since the session is already closed, all data that you alter in that array after that point will not be persisted any more.
3951	so do what you have to do with the session in your main script, then close the session – and then make your curl request.
3952	so try doing that instead – but be aware of the problems you might run into with that, since the browser will consider the cookie for the secondary domain as a third party cookie when you are trying to set it in the context of your main site (and the domains don’t match, e.g.
3953	one is not running on a subdomain of the other or something like that).
3954	but again - where is a certain reproduceable proofcode contains one insert query, one hardcoded decimal value and one result?
3955	ugh - and table definition of course.
3956	you have to specify encoding as 3rd parameter of htmlspecialchars
3957	first off, you need to understand that a character with a diacritic like &#243; or &#238; (from your example) is not automatically a "utf-8 character".
3958	it is simply a character that has different encodings (if any) in different character sets, even in those character sets that have the basic single-byte ascii part in common (i.e., the english alphabet, the digits, the most common punctuation, and a few more).
3959	you could call it a "problematic character", but not a "utf-8 character".
3960	browsers normally automatically detect the encoding used in a page, if it is not specified.
3961	this is why you were initially able to see in the browser exactly what you had written in your editor.
3962	then you correctly added the header('content-type: text/html; charset=utf-8'); , which disabled the automatic charset detection by the browser.
3963	at this point it became evident that your file with the footer &lt;div&gt; was not utf-8 encoded (see again my comment for the explanation of the question marks that appear instead of the "problematic characters").
3964	so all you are left to do is convince your editor to save files utf-8 encoded.
3965	as others have noted, saving the file in a different encoding does not work in all editors.
3966	starting from a fresh file is sometimes the solution, maybe after having set the default encoding of your editor to utf-8.
3968	its output should be something like
3969	or else, you could use the od -tx1z command, which dumps your file (maybe | less ), as a sequence of hex bytes with the corresponding string on the side.
3970	if the file is single-byte encoded, your "problematic characters" will be single bytes >= 0x80.
3971	if it is utf-8 encoded, they will be sequences of 2 bytes (others will be 3 or more bytes), all >= 0x80, while the "non-problematic characters" will continue to be single bytes &lt; 0x80.
3972	you don't need the adddefaultcharset directive in the .htaccess file, though, if all your pages are generated with the content-type: text/html; charset=utf-8 http header, because the effect of the apache directive is exactly the same (and it is good to keep the control on encoding inside php).
3973	i had this problem too - specifically when i was trying to display utf text from db.i changed all the colations and types in mysql to utf8-bin - but still no love... then i tried to chnage all of my layouts and views with the meta tags etc... hell, i even looked at japanese websites source code and pasted that stuff in... nothing worked _ ... until... i came across this post: yii and utf8 display, utf8 works with mysqli but not yii backend turns out, you need to tweek a setting in my main.php in the config file, under components.. f
3974	i dont understand your question well but if you need a key and element from position
3975	in earlier versions you need to break it into two lines:
3976	it would also be worth using the two-line approach in 5.4+ if you have to access multiple elements, to allow you to only call the relatively expensive array_keys() function once.
3977	also the dereferencing approach assumes that the specific position within the array exists, which it may not.
3978	breaking it into multiple operations would allow you to handle that error case.
3979	although of course you don't ever need access to the key, you can simply do:
3980	this is probably the least expensive way to do this assuming it doesn't create a copy of the array in memory when you do it (still researching this element), and likely the best method for multiple accesses of arbitrary keys.
3982	do not select * from table_name .
3985	$_session[user] is not a valid syntax.
3986	previously your query was invalid because $_session[user] was a string and needed to be quoted.
3987	with prepared statements this is handled for you.
3988	the reason why the edit button is always getting the last post is because you are overriding the content variable in the session on each loop.
3989	i am not sure what information you are getting from the database, but you should have a unique id in the database for each post which you grab in the array as well.
3990	if this does not exists, i would strongly recommend making a change in your table as it will simplify your process.
3991	you code must be improved, your logic isn't good.
3992	first of all, you don't need to use a session var, one alternative to do this is passing the post id using a get argument, something like this:
3993	if you look at the manual for get_result , it does indeed say it needs the mysqlnd extension:
3995	this does not appear to need the additional extension.
3996	there are some examples on how to do this, in the php manual here .
3997	i guess the benefit of get_result is that you can read columns without binding them.
3998	you should be able to enable that in your php.ini - perhaps it is commented out by default?
3999	i've not personally used mysqli as i've seen, from helping on stack overflow, a number of people get frustrated with the api.
4000	i've always used pdo/mysql and see no reason to switch.
4001	it may be worth giving it a try, to see if you prefer it.
4002	instead you should move the parameters outside the quoted string and prepend spaces to them using concat , for example
4003	if the size data is always in the format an integer followed by a space followed by an alphabetic unit, it may not be necessary to use the replace function at all.
4004	if you expressly bind your minimum_size and maximum_size values as integers, mysql will cast the columns to integers as well to do the comparison.
4005	you should consider improving the data model.
4006	at the moment your query is going to be quite inefficient.
4007	if you stored the sizes as integers in the database, they would be faster to search especially as you could index the fields.
4008	this may be a particular concern if you have a large number of records.
4009	if the records are stored in the database using different units (eg some in square metres, some in square feet) you will only be able to search for some of them at any one time using the replace syntax, and you will get incorrect results using pdo::param_int .
4010	a better approach would be to convert all the sizes to one unit before saving them in the database, then convert the user's request to the same unit as necessary.
4011	you can remove tags into first sql query use replace function ( http://dev.mysql.com/doc/refman/5.0/en/replace.html ).
4012	you do not need exec str_replace x 8 for every row.
4013	to second step you can use one query only with use join to get all data from two tables.
4014	there's several ways to make classes work together but it's not clear what you're trying to do.
4015	here's some general help and maybe this will get you going in the right direction.
4018	it makes your class more generic and flexible.
4019	on the page you want to display differently to each user, check $_session['currentuser'] and then redirect:
4020	you may want to read the php.net documention on session_start() .
4022	after that, you have access to the global $_session[] array which you can use to store and read data.
4023	for example, you could store the username in the session during the login process:
4024	you can directly use array_merge or if you want using your method only then replace your code with
4025	in your code one closing bracket was missing and merge data store varible was missing which i have added
4026	there is simpler solution to do it.
4027	use preg_match() that find target part of string using regex.
4029	i would check the url/api you are connecting to be sure its a proper json.
4030	as for the code itself you've supplied, its correct for calling a function within a class.
4031	this means that if the user variable is not set inside the session, it will redirect to login.php .
4033	password and username are case sensitive.
4034	try using $.post since you are expecting a post payload on the php side.
4035	while on the php side you need to make sure that you are sending back a json encoded string.
4036	so a var_dump($jsondata_send); would be in order, if it's all right, print it out along with the headers.
4037	if you want to use getjson instead, in the php file, change $_post['device_id'] into $_get['device_id']
4043	if you check out var_dump($client-&gt;__getfunctions()) , you can see, that the parameters have to be passed like with a normal function call.
4044	you are doing an assignment instead of comparison.
4045	that's the problem with your code.
4047	also, you cannot have code after the header("location:$url) ; you need to move the update statement prior to this function and add an exit; after the header function.
4051	$_get is not availible when you are running a script via commandline (php-cli).
4052	just because to tell a little bit more: in this specific case a mysqli -result is (more or less -- i don't know the exact details) a pointer to a result "somewhere else".
4053	cloning would mean, that two pointers referes to the same result "somewhere else", what again will probably lead to severe side effects, because fetching results from one result will definitely affect the other one.
4054	you have obvious error in your code.
4055	you are missing quotes in {$_session['selpid']} and you are using quotes in column name.
4056	you should not use quotes in column name, instead use backquotes(`) if you really need.
4057	if you have excluded 0 as a valid number for your integer id, you can simply do the following:
4058	however, most often you need to check as well that the number is non-negative:
4059	if you then need to actually validate the input more strictly, you can turn it back into a string for comparison reasons:
4061	in your example, you can access $somevar directly from somescript.php (you could also directly access $_post or anything else).
4062	you may want to check $pstmt-&gt;rowcount() to see if the number of affected rows matches your expectation.
4063	that will give you the query string at the end.
4064	i think you should use === not == and also flip the arguments
4065	strpos could return 0 or false and when you use == then zero is like false
4066	also, use strict comparison ( === vs == ), as meeting could be at the start of the string, and then strpos() would return 0 , which would evaluate to false (which would be wrong in that case).
4067	your debian server won't be able to use sqlsrv_ functions.
4068	if you need to connect to sql server from linux you can use the pdo_dblib library .
4069	in codeigniter it looks like you need to set the dsn manually :
4070	you'll have to use a pdo_dblib dsn in your connection string, which might begin with sybase: , mssql: , or dblib: (depending on how php was compiled).
4071	it looks like debian packages may use the sybase: prefix .
4074	if you want to use session first assign session a value like this :
4075	and when you want to access get it like this :
4077	this is the clean, proper, and secure way to do it:
4078	if you are not using a wrapper for running your db queries with prepared parameterized statements, you should use at least mysql_real_escape_string() to remove the nasty stuff in order to prevent sql injection.
4079	as noted by others header() will do a get request, hence why you are not getting the $_post[void] on the page you are redirecting.
4080	that's why you will use variables on your url to transfer them to the redirected page, and then fetch them with $_get .
4081	$_post[somename] and $_post['somename'] are two different things.
4082	they will work, because php will try to see if there is a constant named somename , if there isn't one, you are lucky, but if there is one, then all sky falls down.
4083	and as mysqli already supports prepared statements, why not utilize them instead, because as of right now, you are vulnerable to sql injection.
4084	i wouldn't add the solution which directly concatenates $username and $password but i'll give rough example on prepared statements instead:
4086	if you have php 5.4 or lower and can't use the built-in, there's already a compatibility pack library for that.
4088	you need to us in_array() here:
4089	and as fred pointed out, it won't work anyway until you fix your mixing of mysql and mysqli functions.
4090	please read the manual on how to use mysqli_query: http://php.net/manual/en/mysqli.query.php .
4091	the correct way to use it is:
4092	first of all, the correct way to escape output is htmlentities , not htmlspecialchars .
4093	escape all output you get from variables, database or user input.
4094	this is pretty much all you have to do to escape xss attacks.
4095	you may also consider using strip_tags where it's appropriate.
4096	html entity encoding is okay for untrusted data that you put in the body of the html document, such as inside a tag.
4097	it even sort of works for untrusted data that goes into attributes, particularly if you're religious about using quotes around your attributes.
4098	but html entity encoding doesn't work if you're putting untrusted data inside a tag anywhere, or an event handler attribute like onmouseover, or inside css, or in a url.
4099	so even if you use an html entity encoding method everywhere, you are still most likely vulnerable to xss.
4100	you must use the escape syntax for the part of the html document you're putting untrusted data into.
4101	that's what the rules below are all about.
4102	the correct way to use htmlspecialchars is something like this:
4103	if you don't wrap in quotes the value attribute, you'd get something like:
4104	having these things in mind, you should be covered for most of the cases.
4105	however, if you want to be really picky, do read the owasp document i mentioned before, it's really helpful.
4107	none of them support this encoding.
4108	as you can read in some of the comments of the so posts provided at the bottom of the post:
4109	solution : don't use utf-7 and also make sure that escaping is done using the same character encoding that the document is being served as to avoid disappearing quotes: establish in the header of your webpage the same encoding as the one you'll use in htmlspecialchars (utf-8 for instance):
4111	use it when there is no need to encode all characters which have their html equivalents, it's better to use htmlspecialchars due to the fact that sends less code to the client.this isn't a matter to be taken lightly: less code sent, faster web pages.
4112	code is also more readable than the one produced by htmlentities.
4113	sometimes you're writing xml data, and you can't use html entities in a xml file.
4114	when there is a need to encode all characters.
4115	if your pages use encodings such as ascii or latin-1 instead of utf-8.
4116	i've never liked array_push() and never use it.
4117	that's invalid syntax and you can't use array_push() to specify a key.
4118	but that's probably not what you want.
4119	i always go with $array[] or $array['key'] syntax.
4120	the mysqli library is not a direct drop-in replacement for the older mysql one (note the lack of an i ).
4121	use post for your credentials form.
4122	by default, the method is get which will append the parameters in the url .
4123	obviously, this means checking variables in the $_post array instead of the $_get array.
4124	if i can give another suggestion, i would split the application in multiple files.
4125	you shouldn't have the login and the upload interface in the same script, otherwise you will have major problems scaling up your application.
4126	as you add pages, it will be almost impossible to know which part of the script should run and using which parameters and outputting what html you will need to pass a "state" to the page so that you internally know what the user is trying to do - spreading the logic over multiple php files would make it easier to do.
4127	the file will grow a lot, making it harder for you to understand what's actually getting executed, making it harder for you to debug if you ever start working with other developers, it would be more "developer friendly" to break the features in separate php files to minimize conflicts when editing the files
4128	a lot of web applications will be split in multiple pages (often implemented in a controller ) where you would have the following:
4130	make sure you set the appropriate character encoding in your response header correctly and use the meta tag to indicate character encoding of your html.
4131	if you ever need to update back the html output into the database.
4132	i suggest you to create a header.php, where you initiate the html to the start of the body tag and add the css files to the html there.
4133	in the other php files you just have to use include_once 'header.php'; and this way your css is included earlier, than your query runs.
4134	i hope this will solve your problem.
4136	instead of writing in a single line, you can break it instead and return the value.
4137	also i can see that you are assigning a value without processing it.
4138	this is not correct.so, it should be something like:
4139	you can also use any other escape method if you are using pdo.
4140	getting all the values from the select, you can use $_session variables to pass it to the other php.file.
4142	the problem i see is if you had written a wrapper for pdo, then you would have to somehow handle this separately.
4143	the answer i had found and loved was write your query and concat the % to the parameter.
4144	"where column like concat('%', :something, '%')"
4145	more than likely you are not unsetting the variables you set in the last element, they are remembered throughout the view.
4146	try unsetting items after the first call -
4147	like the comment said though if this doesn't work we would need to see your element itself to diagnose the problem.
4148	if you go into your element itself at the end of everything being processed, unset the array housing all the items you are displaying.
4149	run your queries one by one.
4150	always make mysqli report its errors.
4151	it's no use to ask people what's wrong with your database - they cannot know.
4152	only your database can tell you for certain.
4153	michael suggested that you need to put something left of the = in your if statement, like
4154	however, this may be the source of errors: the condition here is not the value of isset , but whether the assignment was successful or not.
4155	so this will jump into the if block whenever the assignment was successful.
4156	since you most probably want to jump into the if block if $content_width has been assigned a value, the statement in your case should read:
4157	also, it's a very common question, for example here you can get a realy clear explanation of how to overcome this notice.
4158	this will never return true, because the values in your select input in your html code are not the keys of $array, but the values.
4159	so $_post["location"] will always contain a value in $array, not a key.
4160	so array_key_exists will always return false in that line of code.
4161	that means the else-block will be executed, which will cause "error" to be printed.
4162	did you mean to use in_array($_post["location"], $array) ( php manual ) instead, maybe?
4163	also, you don't need an else after a die() statement, as the program has stopped.
4164	you can leave your structure like:
4165	i think you need to wrap your variables in quotes if they are strings:
4166	take a look at your code.
4167	if you're having an issue with a query, echo it to the screen.
4168	in your case (just by looking at your code), the query you pass ( $statement ) looks like this:
4169	in php, you can define a string over multiple lines in order to avoid such mistakes.
4170	in response to your comments below, i would recommend using pdo to set up your query:
4171	take a look at this overview to learn more about pdo.
4172	what you could do is simply add the $_post into a database (mysql) (just make sure to sanitize it all).
4173	if the user wants to edit a post they could simply just add an edit button which loads, say a textarea, with the value of that post (the one stored inside the database).
4174	from here you can just adjust the values needed to make the proper post.
4175	maybe add an edit button or what have you.
4176	your main problem is making a json response by concatenating strings.
4177	in such case you miss required encodings/escaping and so on.
4178	so, first of all you should create an associative array and then do $json_arr = $_get['callback'].'('.json_encode($your_json_like_array).
4179	')'; exactly like in the else clause.
4181	store all the brand names in that array, then loop through it.
4185	that means variables assigned a " ", 0, "0", or false are set, and therefore are true for isset.
4188	if you do not select any checkbox then you will not get $_post['fruit_list'], array index fruit_list does not exist in array
4190	$_post array does not contain $_post['fruit_list'] 2. first answer is " no ".a variable is considered empty if it does not exist or if its value equals false.
4191	empty() does not generate a warning if the variable does not exist.
4192	empty checks if the variable is set and if it is it checks it for null, "", 0, etc.
4193	isset just checks if is it set, it could be anything not null.
4194	andreas suggests that you need to do an assignment = rather than testing for equality with == .
4195	this is correct, and i think the reason your code doesn't work.
4196	there is, however, a nicer way to structure the whole section of code, using jquery's map function:
4197	note that i have also used the same technique as kanishka , so you can access the values as $_post['productid'] .
4198	blindly concatenating strings together may lead to syntax violations if the strings are supposed to follow a special syntax.
4199	at best this is an annoyance, at worst a security problem.
4200	all the different functions are escaping values properly for different syntaxes:
4201	if you database doesn't have it's own function in php, you could use: addslashes() , but it's not recommended to use when you have something specific that is better (mysql_real_escape_string()).
4202	a lot of info is also available here on stack overflow.
4213	never use it, but htmlspecialchars() .
4214	for printing untrusted user input into browser.
4215	mysql_real_escape_string is mysql database specific function.
4216	here is a comprehensive guide i wrote exactly on topic where to use it and where not and what else you need to know on mysql database security addslashes().
4217	most of time you just don't need it at all
4218	not exactly an answer but i think you might also consider php data objects (pdo) http://php.net/manual/en/book.pdo.php and pdo for mysql http://php.net/manual/en/ref.pdo-mysql.php
4220	you can tell the mysqli_connect or mysqli::__construct to use persistent connection, if you prefix your hostname with 'p:'
4221	the browser interprets the text between &lt; and > as an html tag (at least the ones that don't start with a digit).
4222	if you look at the source of your page, i'm sure you'll find the complete text.
4223	ignoring the problematics of opening files directly from the $_get array for a moment, you need to turn the brackets into html entities.
4224	to show the newlines correctly you can either add &lt;br&gt; to the end of each line, or use &lt;pre&gt; and \n like so:
4225	it is a really, really bad idea.
4226	if you are only using the code for your own use then okay, but even so it may cause problems that you have not thought about.
4228	you have a return; statement that wont run your function fsaveipuserlog() you are also using.
4230	this one will test the mysqli extension, if it's available:
4232	you need to use parametrized queries.
4233	how can i prevent sql injection in php?
4235	$_server['http_referer'] is the full url that led to the page that checks it.
4236	it's not guaranteed to be set, though it's the only way to know what you're looking for.
4238	here is the full reference to the $_server superglobal array.
4239	you should check the keys, especially those starting with http_ .
4240	you could, for clarity, use one file per ajax action, and put them all in the same directory, like /ajax/logout.ajax.php , /ajax/login.ajax.php etc.
4241	if you only have a couple of actions you can just use one file to serve them all.
4242	this is just a matter of convention between you and the people you work with (including your future self, say 6 months later, when you will have no idea what you did in that project).
4244	try to separate your explode for the next line and explode for the white space.
4245	cause on your code above it's reading the whole string as one causing your program to store it on a single array.
4246	so it would be a nested loop by then.
4247	you have to pass your connection to the mysqli functions:
4248	in you php code, you are not executing the insert query.
4249	you need to do something like this:
4251	you control the output of array_map , so instead of just returning the formatted logo, update your $logo object and return that.
4252	you should look into how to use bound parameters.
4253	you're already using pdo, but you're still writing user-entered code in your sql, and bound parameters avoid that - it would also have avoided this problem, too.
4254	so, please use this resource and then fetch the records.
4256	i spent ages looking for the answer for a similar problem.
4257	it wasn't an issue with the code or the setup, as a very similar code worked perfectly in another .php on the same server.
4258	turned out the problem was caused by a very large amount of data being saved into the session in this page.
4259	in one place we had a line like this: $_session['full_list'] = $full_list where $full_list was an array of data loaded from the database; each row was an array of about 150 elements.
4260	when the code was initially written a couple of years ago, the db only contained about 1000 rows, so the $full_list contained about 100 elements, each being an array of about 20 elements.
4261	with time, the 20 elements turned into 150 and 1000 rows turned into 17000, so the code was storing close to 64 meg of data into the session.
4262	apparently, with this amount of data being stored, it refused to store anything else.
4263	once we changed the code to deal with data locally without saving it into the session, everything worked perfectly.
4264	basically, your php.ini should be set to no cookies, and session parameters must be consistent with what osc wants.
4265	you may also need to change a few session code snippets in application_top.php - creating objects where none exist in the tep_session_is_registered(...) calls (e eg.
4266	navigation object), set $http_ variables to the newer $_server ones and a few other isset tests for empty objects (google for info).
4267	i ended up being able to use the original sessions.php files (includes/classes and includes/functions) with a slightly modified application_top.php to get things going again.
4268	the php.ini settings were the main problem, but this of course depends on what your server company has installed as the defaults.
4269	you have to concat the value with the two other parts of the string and it's $_post instead of $post :
4272	you also don't need to use parenthesis when you use echo (doesn't harm though...).
4273	instead build an array from $investmentprogramexistingcriteria containing just the field you are interested in, and use in_array() to do the test just once per outter loop
4274	in order to keep a list of the failures, we must first turn all the elseif's to if's.
4275	then we are going to collect the errors in an array.
4276	when using the [] operator this just means add this to the end of the current array.
4277	in your case, it would be something along the lines of:
4278	php is separate from js, but you can 'echo' to javascript from php the same way you would normally do with html.
4280	you make a ajax call to get the value from a php file
4282	i can't remember how mysqli parses them and when they're bound, but logically it makes more sense in code to set them first then bind anyway.
4283	in your case before header.php line 11 is being executed.
4284	load the javascript at the bottom of the page and have the php file (ie jscommentscallback.php ) hit your $url , using $_get['id'] .
4285	if you need to do something with the content of update_comments.php , you can package it up in json and send it back to the browser to insert into the page or whatever.
4286	you are only splitting on spaces, but you want to also split on the comma to remove them.
4287	because explode is splitting the string on the spaces - you didn't tell it to do anything with the commas.
4288	because your separator in the explode function is " " (space).
4289	why do you think the commas will disappear when you split the string from its spaces?
4290	this will give you the list of the full names.
4291	later you can split it once to get first name and last name separately:
4292	but in my personal opinion, instead of binding all these names and surnames to different variables.
4293	put them into an array and print the names by iterating over the array.
4294	then, note, you should use json_decode on one really json string!
4295	you should decode url data variable(result of $this->_getparam('data','')) and then pass it to json_decode!
4296	either add all of them using hidden input fields (you can access them via $_post then) or start a session using session_start() and save them in $_session .
4297	make sure to start the session at the very top, there must not be a single byte sent before!
4298	you need to pass connection link to mysqli_error() function like the error says.
4299	keep in mind that for a post (unless using ajax calls), a refresh of the page is required.
4301	the following expression does a string "subtraction" to find the common path.
4302	you have a known prefix (document root), an unknown (the root folder) and a known suffix (the script path), so to find the first two, you take the full absolute path ( __file__ ) and subtract the known suffix:
4303	therefore you will not be able to access your $_session variables.
4304	apart from this there's a lot of things awfully wrong in your logic, i mean:
4306	make sure your html form does hold a post method and that all inputs bear the name attributes and no typos.
4307	using error reporting, will signal that.
4308	your present code is open to sql injection .
4312	having said that, your query is incorrect.
4314	you should instead, select the string literals you are trying to insert along with the one value you'd like to select.
4315	if my comment above is wrong, and your question is literally "how do i pass data from a url to a php script", the answer is that you use the $_get superglobal variable to access query strings in the standard format .../path/to/script.php?var1=value1&amp;var2=value2...
4316	so the url http://amjad-test.site40.net/arabictest.php?username=imsop will execute 'arabictest.php' and populate the variable $_get['username'] with the value 'imsop' .
4317	you then use that variable wherever you like in your code.
4318	do the following: until the form is not submitted, the $_post['name'] variable is not set
4319	i am assuming you are receiving undefined notice if so please fallow one of these steps.
4320	your code is only checking one and then doing well i am not sure what
4321	i hope this is what you intended, its not totally obvious from your code.
4323	your code is in serious danger of sql injection.
4324	pdo's lastinsertid (and mysql's last_insert_id to which your pdo delegates the call in this case) gives the last autogenerated id on a per-connection basis .
4325	concurrent connections will not compromise the integrity of the returned id.
4326	and as you mention in your comment, transactions have no bearing on this.
4327	i'll also mention there is the unlikely possibility, if you run multiple statements on the same connection, and if your execute method throws an exception which isnt handled correctly, that lastinsertid could return the id of the last successful insert on that connection.
4328	but it can never return an id from another user's query.
4329	you're trying to access the first object in your array, $comments[0] .
4330	since that it is object, and your data property is private, you cannot access it in smarty.
4331	you would have to edit the modcomments_commentsmodel class to give you access to either the data property or the crmid key of the property.
4332	i'm not sure why you can't use explode to split on commas.
4333	you don't need to know the number of elements to do that.
4334	however, a regex like this should work:
4335	i posted the following answer because this is what i feel is the solution to the problem.
4336	your password column's length is likely to be too short (less than 60) and you would need to do the following and in the order shown:
4337	do make sure that you have data to start with, being a hash and not a plain text password (and other relevant data to query the database), and that the column types are correct, including the length for the email column, or any other for that matter.
4338	password_default - use the bcrypt algorithm (default as of php 5.5.0).
4339	note that this constant is designed to change over time as new and stronger algorithms are added to php.
4340	for that reason, the length of the result from using this identifier can change over time.
4341	therefore, it is recommended to store the result in a database column that can expand beyond 60 characters (255 characters would be a good choice).
4342	i don't see the need for global $mysqli; .
4343	that is mostly used when a custom function is introduced.
4344	if you are not using a custom function, it can safely be removed.
4345	however, if you are using a custom function, you have failed to post it in your question.
4346	the mysql api connection is also unknown, so make sure you did establish a successful connection with the mysqli_ api.
4347	as far as i see, self::get_by_query will never work cos it is not defined as static function.
4348	1- you can define it so: public static function get_by_query opt.
4349	2- you can call it so: $this-&gt;get_by_query
4350	preg_match("#5#", "#51#;#55#") returns true because preg_match uses # as delimiter.
4351	in order to match #5# you have to add delimiters around the regex:
4352	if all you need is to find a string you know ( #5# ) in another string then the best way is to use function strpos() .
4353	it returns the boolean false if it cannot find the string or an integer number that represents the position of the searched string into the other string.
4354	you have to pay attention to the comparison operator: using $pos != false is not enough because 0 == false .
4355	you have to compare using === or !== to avoid this.
4356	this means the regex in #5# is: 5 .
4357	and this regex , of course, matches any 5 it finds in the string.
4358	to fix it you have to surround your regex with some delimiter ( / is usually used):
4359	you run your queries with the same variable $sql .
4360	you should call them differentely like that and call them after.
4364	you did require_once config.php, which means, it will only be included once (in the first condition) you did close the mysqli connection on the first condition, so mysqli is not accessible anymore after that.
4365	you should not close the connection in the first condition, so you can reuse it in the second condition (tabs).
4366	good practice is to close the connection on the end of the file.
4367	if you just want to remove duplicates from the second entry of your array, use array_diff() :
4368	iterate if you want to apply it to an arbitrary length.
4369	so, date_format doesn't look right at all.
4370	it should be "yyyymmdd't'hh:mm:ssp," or something like that, in php date formatting lingo (i quoted the t, since it's the literal 't' and not a timezone abbreviation).
4371	granted, php just abbreviates it as 'c'.
4372	i would probably check with the people on the appropriate zend list, but at first glance, this looks like something worthy of a bug report.
4373	maybe they just don't support checks this particular type of date string yet?
4374	and in your function you make some one how this
4375	no need to join tables no need of 2nd select query no foreach
4376	your card_id's are indexed from 1 to n. but comments are indexed from 0.to get comment by card_id you need to use $comment = $_post['comment'][$commentkey]; where $commentkey = $card_id-1;
4377	you are almost correct about what you have said, but if you destroy the session and the script ends in php, thats the time file is deleted.
4378	if you just try to destroy and create it again, it uses the same file/session id.
4379	its not only the file that is created, but also the file contains all the data you are storing in the session.
4380	have a look at your session data in your server, its very interesting.
4381	update more interesting things you can do.
4382	now have a look at the session file, it should be deleted after 20 seconds.
4384	so start_session() tries to find the file for the session id in the cookie, and it fails of course, and it just creates a new empty file for that.
4385	so your id does not change.
4386	if you really want to change that, try to delete the cookie.
4387	while the better idea would've been to just create a sub-array within the session superglobal, so that you could use $_session['test_variable'][1] and the like, you can use something like preg_grep to scan for these keys:
4389	if you insist on using mysql then i would suggest adding before your mysql query:
4390	this sets username and password to merely a boolean that indicates whether the posted values are there or not.
4391	since you use these variables in the query, the query will fail (unless you have a user '1' with password '1').
4392	a possible, but not very good, way to fix it would be:
4393	but then you are open to sql injection, since anyone could just post any character to break your query.
4394	what if a password contains a ; , or worse: a partial sql statement?
4396	but then, still, you are using an outdated, deprecated set of functions to connect and work with mysql.
4397	therefor, please read the warning on the mysql introduction page (which is also repeated on just about every other page related to this library).
4398	next chapter is sending and storing passwords.
4399	you should do this preferably over https (maybe you do already, i hope so).
4401	actually you should not store them encrypted either.
4402	and even then, add some salt .the exact details are to long to explain here, but there are good explanations for this.
4403	here is a random one: serious security: how to store your users' passwords safely
4404	setting the return value of isset function in the var replaces original value you posted through browser.
4406	this is not a two dimensional array, it's a one dimensional hash/map.
4407	array_values() returns a one dimensional array as well, but it's map is 0 => 22, 1 => 4, 3 => 0, etc.
4408	it can be treated like a one dimensional array.
4409	by the way, if you need to ignore the keys for the purposes of iteration, you don't need to use array_values() anyway.
4410	the reason your cookie is always the same as the previous value is because the $_cookie array is populated before your php code runs, it isn't changed if you create a new cookie in your code.
4411	i would try to fix your server setup issue but if you can't you can force the session id to be consistent.
4412	also if the cookie already exists you don't need to create a new one:
4413	use array_sum() to add the numbers in an array, and use array_map() to apply it to each element of the $campus array.
4414	both of them use strtotime to convert your string date representation to the timestamp and then compare timestamps.
4415	pay attention to that fact, that this only shows a concept.
4416	meaning, that this code won't catch parsing errors and strtotime can return false if your date keys are invalid.
4417	in such case, the code won't fail, but the results will be unpredictable.
4418	try a loop over the array and then inside the loop use the strpos..(adatpt to you need the strpos evalutation
4419	i think you are missing some concatenation dots .
4420	btw your code needs serious refactoring.
4421	there are a lot of redundant calls that you can avoid by saving those return values in local variables.
4422	mind you, to see the html equivalents you have to view source as the browser renders them accordingly.
4423	there may not be anything wrong with what you're seeing.
4424	you may not need to mangle the $_post with htmlentities corrections or otherwise.
4425	it could be that you're looking at a barebones browser output.
4426	in case you're debugging this by spitting it out with something like print_r( $_post ); die; , make sure that somewhere above it in your page you have a meta line setting your character encoding to utf-8:
4427	first, you have to work with the connection.
4428	where $db is a pdo instance with a valid connection.
4429	so, if we have an script to call the functions, it should be like this:
4430	so by the looks of the example code i get the impression that you're migrating from the deprecated mysql extension over to pdo.
4431	something the mysql extension does that may be tripping you up is that if you don't specify the mysql link resource to mysql_query it uses the lastly created link resource that was created by mysql_connect .
4432	once you move to using pdo you're going to have to have the pdo connection available in the user_data and user_active functions.
4433	the simplest approach would be to create a pdo connection in each function, it's terribly repetitive and not a good solution at all, but it works.
4434	there are also some issues with sql injection vulnerabilities in the code.
4435	aside from that you could write the functions like this:
4437	and to show all, just reverse the arrays order
4438	as you are sending an object in your service key, you probably have a multi-dimensional array in $_post['service'] .
4439	if you want to send a string, you should convert the object to json:
4440	now you can decode it like you are doing in php.
4441	also note that you can only send json back from php if you set the datatype to json .
4442	anything other than valid json will have you end up in the error handler.
4443	the sql query seems fine, but there is a problem with the way it is executed in php.
4444	when you run the mysql_query you get a resource on success.
4445	you can then use this resource to fetch the data, so you would replace
4447	you need to learn basic coding culture.
4448	you are writing all the stuff twice always check for error do not stack too much code in one line.
4449	make your code distinct, step by step.
4450	need a program to create an sql query?
4451	get the product of this code in a variable and pass it over.
4452	do not fold all the program in a single line.
4453	this way you'll always know the reason of the problem and have your code run smooth and easier to maintain.
4454	also just noted that your way of selecting a database is quite a... strange.
4455	'chat.sql' is a file with table creation code , not database.
4456	you have to create a database first, then create a table in it, then select newly created database.
4457	as you have been told already, mysql ext is obsoleted.
4458	you have to use use pdo instead, as it's the only choice for php users whose only idea of database interaction is direct calls to api.
4459	strchr() will give you true/false if the character (in your case, ".")
4460	so to get the file extension, you could use something like:
4461	.. but maybe a function like pathinfo() could be usefull in this case too.
4462	furthermore, in your error message you use $extensions .
4463	this is a var with type "array", and thus the string representation is "array".
4464	i think you meant $extension (without the s) there.
4465	or, maybe, you want to list all correct extensions this way: implode(',', $extensions) .
4466	note that checking on extensions is not a safe way to check what kind of content is present.
4467	i can easily upload a .exe, by just renaming it to .jpg.
4468	are you sure that $ss isset ?
4469	there is a post variable with the name ss.
4471	all the code that you want run after the if should be contained there.
4472	every time you loop over the array, $t will take the value of each element of the array, which in your case would be an integer.
4473	the problem is that implode() expects the second parameter to be an array, not an integer.
4474	check to see if the session is set (with an optional " if { equal to something } "), and if not, else { kick them out } .
4475	the logic is, and to be part of every page using sessions that you wish to protect and assuming $secretcode equals 12345 as an example:
4477	use it once and at the "top" of every page, while making sure you're not outputting before header.
4479	if you want to sort the entire array, you need to do that outside of the for loop.
4480	you need to use the loop to parse the file into an array, but then you need to sort it (using usort ) outside of the loop.
4481	you are just sorting each individual element of the array as you are reading them in.
4482	you're not comparing them with the other elements, so your array_multisort doesn't actually do anything.
4483	using str_replace would mean you have to looop through the string and then use the offset of the first s found to decide where and what to replace.
4484	instead, use preg_replace, to do this in a single statement.
4485	for mysqli, there's mysqli_result-&gt;fetch_fields() , mysqli_result-&gt;fetch_field() and mysqli_result-&gt;fetch_field_direct() .
4487	here is a simple class based on mysqli .
4488	this method will work on empty tables as well.
4489	of course, add your own error checking as needed.
4490	success will return a numerically indexed array of column names from $table.
4491	failure or non-string input will return false .
4492	if method returns false (var_dump returns bool(false) ) you can check the current error with $mysqlz->error .
4493	for more information on error checking, take a look at the php mysqli manual at http://www.php.net/manual/en/book.mysqli.php .
4494	i'd say it is not a dead end but on purpose.
4497	next to that this is also not what the warning precisely wants to tell you.
4498	swapping a superglobal like $_get with an equally superglobal function like filter_input(input_get, ...) shows the same design flaw.
4499	but netbeans can't warn you as easily about it.
4500	instead, inject input data to your application at a low-level place, e.g.
4501	bootstrapping the request information and do not use any superglobals nor the filter_input function in the rest of your code.
4502	the $email variable has to exist on both pages, which means you have to transfer it to the second script somehow, either by $_get or $_session
4503	but since you know it should be an integer, this will get the proper number if it begins with the number or 0 if not:
4504	you can use the filter_var function.
4507	by default (and unless you have renamed the cookie with the session.name php configuration option ), the name of the cookie is phpsessid .
4508	after logging the user in, subsequent requests need to be issued with a cookie header containing the session id.
4509	before submitting each request, simply make sure that you re-use the cookiestore object that you used to log the user in (call abstracthttpclient#setcookiestore on any new httpclient instance).
4510	you're seeing $_get['reff']=index.php because your rewrite rule is running twice .
4511	first on /username/splash uri and then 2nd time on /index.php uri.
4512	it is due to the fact that your uri pattern ^([^/]+)/([^/]+)/?$ matches both uris.
4513	to prevent this unwanted behavior you need to have your rule like this:
4514	you can't check $conn-&gt;errno after connect, there is a special property $conn-&gt;connect_errno for that.
4515	also in php, when you don't want any errors or warnings to be generated (e.g.
4516	because you don't care, or because you are handling them yourself like in your case), you are supposed to use the @ error control operator .
4517	but that means you are doing the checks yourselves and you are not using exceptions at all!
4518	as explained in the documentation , this makes mysqli " throw mysqli_sql_exception for errors instead of warnings ".
4519	you don't need the @ operator then, neither the check for errno value:
4520	update your code similar to the above and it'll work.
4521	do the same with the rest of your queries.
4522	in the future, if you need to encode/decode a url, use urlencode or urldecode instead of str_replace
4523	cakephp ships with an authentication layer, there's little to no need to implement your own.
4524	if you need custom authentication, then you should implement it using custom authentication objects, see
4525	what you are doing there is not how cakephp works, you do not instantiate controllers manually, also you do not access superglobals like $_session directly, instead you use the abstracted interfaces that cakephp provides.
4526	before throwing code together, read the docs and make sure sure that you understand the apis that you are working with.
4527	as you can see, components do receive a reference of the controller on which they are being used in every callback, so if you need to access controller functionality, you use that reference.
4528	if you need to use it at a later point, store it in a property, like
4529	the session can easily be accessed via the session component that you can include in your custom component, like
4530	there is absolutely no relation between pdo and class variables.
4531	you can bind any variable, all the same way.
4532	if $row is a result of a query you need to specify a column like $_session['permission'] = $row[column_name];
4533	you are assigning the row array to the $_session['permission'] variable so when you print it you get array.try using print_r on that array and you'll see what's in it.
4534	example: print_r($_session['permission']); print cannot print an array.
4535	use print_r or var_dump to find out what's going on when you see this happen again.
4536	this allows you to make an ajax call by calling getmodels() .
4537	so all you have to do is call it:
4538	this way the code is also more testable.
4539	this isn't a perfect solution and you should definitely consider using $(function(){}); to make sure the document is ready.
4540	ajax request also needs time to complete, so that models won't be there instantaneously when the page loads.
4542	secondly, you should post the notice.
4543	it looks like you are using undfined variables.
4544	as long as you have no value for your checkbox, the variable will not exist.
4545	for example when you are browsing to this site for the first time.
4546	it would also be wise to look into replacing all mysql() functions into mysqli or pdo, or a library that makes use of them.
4547	the reason you get this output is because you are echoing $finalnum 5 times.
4548	the value of $finalnum is not changing.
4549	as andrew already stated, whatever is inside a &lt;select&gt; -tag must be of type &lt;option&gt; .
4550	so for you to list the session-variable you're looking for, you'd need something like this
4551	i didn't test your code but i think it's because the session is not started yet when after the signs up.
4553	as long as you use the same connection your user variables will remain intact.
4554	maybe it would be better to create a view from the generated select statement instead for later re-use.
4555	with php 5.3 and pdo you should be able to execute it at one go: have a look at pdo support for multiple queries (pdo_mysql, pdo_mysqlnd) .
4556	the correct function to use given that input is explode .
4557	note that arrays should actually be defined like so: $id_arr = array(1 =&gt; 'value 1', 2 =&gt; 'value 2', 3 =&gt; 'value 3'); etc... unless you are forced to use a string as the key set.
4559	the danger is if you are using any of the $_post content in something like a sql query (sql injection), or putting the input directly into an exec(...) call (not good practice anyways), etc.
4560	as long as you are cleaning the input (validation / scrubbing) there is no danger.
4561	to fix it, you need to use the !== operator (the not equal equivalent of === ):
4562	if your intention is to learn how to write sql queries and to create something for your own, use mysqli or pdo.
4564	with 3 pages tutorial, you can do the most general things.
4565	however some very special cases are better coded in raw sql than with doctrine.
4566	but if you know how to do things with doctrine it is a very useful library and you end up writing better, consistenter, more readabler and extensiabler (:-)) code.
4567	you should inherit from newsform creating a new form (unsetting the fields you like) to be used in the frontend.
4568	this way you let the original form with the most fields for use by the admin app.
4569	if you need to tell the admin generator which form to use, you should modify the generator.yml like the following
4570	when you are updating client-side data via jquery, you need to set the value of result to whatever it is that you want to pass through.
4571	you can serialize a js object using jquery.param() , so you can then pass through json-encoded data to php.
4572	when processing the post data you would then need to decode the json data in $_post['result']
4573	if i'm reading your sample correctly, your items are std objects instead of arrays.
4574	you may need to reference them like this:
4575	your print_r sample above is difficult to read.
4576	if you could provide it with the indentation it would be helpful.
4577	what helps me in problems like this is to try to print inside the foreach loop.
4578	for example, you can do a var_dump of each $result and see what that structure is, and it could help determine how to proceed.
4579	you need to wrap it within quotes.
4580	also, it would be better if you use some debugging along with it.
4581	if more than one file has the same mtime, it will overwrite that file from your $oar array.
4582	instead store each value as an array of files to solve that issue.
4583	and this statement return explode(" * ", implode(" * ", $oar )); seems like it can just be replace with return array_values($oar); with the above adjustment i mentioned, you may have to loop over the $oar array and push each set of values to a new array and return that instead.
4584	please read mysql functions manual ant php.net.
4586	first of all this $codigo= mysql_insert_id(); does nothing unless you have insert query before that.
4587	also, main reason that this script doesn't work is incorrect usage of mysql_fetch_assoc , this function returns associative array so you have to address to the value by key to get it.
4588	like this $email=mysql_fetch_assoc($pesquisa)['mail'] .yet again i recommend you to use proper mysql extensions and to find proper guide on mysql in php.
4589	create a variable which houses the information form the db.
4590	also i agree with the previous answer, try switching to pdo or mysqli.
4591	from the release php 7 later this year mysql_query will be removed.
4592	the /* process $_get['images'] to recover the path */ part implies any sanitizing you need to do on the input to avoid that someone requests a forbidden file.
4593	if your script input is a file path, this may mean checking from a predefined list, stripping of possible directory separators, checking against a regex, etc.
4594	another way would be to store paths inside a database and pass the script a simple id, and recover the file path with it.
4595	this might be a better idea, as users will see no mention of any file path on the script url (if you just pass a path, people can actually guess where files are, and that's what you're trying to prevent).
4596	it's not working because somewhere in the regex you are asking for a dot in between http:// and / .
4597	http://localhost/whatever has no dot, so it fails.
4599	but a better way would be, when you would prepare your sql string before you execute it.
4600	have a look at php pdo mysql connector.
4601	there you have some methods to prepare your string.
4602	you can use something like this.
4603	proper use of isset and proper use of empty function.
4604	i'm not sure how you're getting the variable $id though.
4605	and you will have to use empty() , it checks that is there any value in it or not?
4606	if lead_id is a primary key or unique you wont be able to insert it twice, or have multiple lead with the same lead_id .
4607	insert and update will only give you one note .
4608	also: there is a typo in your form.
4609	in the &lt;input input type="submit" value="submit " &gt; .
4611	you have to use is_empty(); method to find it.
4613	yes, it's possible to use the ternary operator in php.
4614	replacing (a == b) with isset(expression) (returns boolean value) should do the trick.
4615	just make sure that the = operator doesn't take precedence.
4616	it may not be necessary but i'd wrap the ternary statement in between curved brackets.
4617	no this is not expected behavior and must be a bug in the pdo pgsql extension.
4618	however i looked into it a little bit more.
4619	comparing the code from the patch 2 years ago ( source ) and the current code one ( source ) shows that nothing has changed since they patched that error.
4620	at least not in those direct affected functions, and it might also been a slightly different bug back then.
4621	so my guess is that there is something else which of course won't help you solve your problem.
4622	you could check if your connection has an outstanding transaction.
4623	for this you will need to create a second connection when hitting the exception.
4624	first off determine your current connection id.
4625	in my case it returned the number 19339 .
4626	you should save this number before you fire up the query that will cause the exception.now in your catch block, you need to look inside the table pg_catalog.pg_stat_activity .
4627	if it returns idle there is no current transaction for that old connection.
4628	if it's one of the upper three, there is a transactions still active.
4631	and even unhandled, they act as regular php errors providing all the important information, following site-wide error reporting settings.
4632	note that setting this mode as a connection option will let pdo throw exceptions on connection errors too, which is very important.
4633	so, here is an example for creating a pdo connection right way:
4634	connecting this way, you will be always notified of all database errors, occurred during query execution.
4635	note that you have to be able to see php errors in general.
4636	on a live site you have to peek into error logs, so, settings have to be
4637	presuming id is the primary key, you can use the following function to update on a database level which will prevent race conditions:
4638	also note the intval() around the $_get variable to prevent sql injection
4639	as the php is expecting a var named uname as per this $_post['uname'] while you were sending username .
4640	so, the simple change is to swap the properties in the object.
4641	you are posting to checkusername.php {username: uname} and trying to get $_post['uname'] and in js you don't have the uname variable.change { username: uname } to { uname: username }
4644	i wrote a quick example to demonstrate this:
4645	this part throws me for a little loop, and i hope someone out there can correct me if i am wrong.
4646	__destruct() is being called twice because the object is created and then destroyed when putting it into the session.
4647	echoing out the $_session['object']-&gt;myvar reinitiates the object and then is subsequently destroyed.
4648	again, the object is destroyed as the object is called, and the function is finished executing.
4649	basically if you store your object in a session, expect that it will be destroyed every time you access the object.
4650	from looking at your code, it seems like you are not storing your activityeventid in session variable.
4651	and you are trying to access it on createnewactivitybooking.php page, while inserting the event to "clientevent" table.
4652	as "clientevent" table has foreign key constraint for "activityeventid" column.
4653	as this constrain will fail, the query will not be executed and you are getting the error.
4654	so basically you need to find a way to pass correct value there.
4655	edit: as for your comment, the script that you posted doesn't seem to store 'activityeventid' in the session as the lines you quoted are actually commented on the script that you posted in question.
4656	to be specific here is what you need to do.
4657	so now you are passing activityeventid in query string for each link.
4658	and you can retrieve this in createnewactivitybooking.php as following:
4659	you may need to reformat few things layout wise, but i think this is how it should be done.
4662	$_post is an associative array, so you need to be accessing it using single quotes, for example:
4663	this means you will have to use the concatenation operator in your query.
4665	in array_merge first argument will be your that key value pair that you want to add in beginning.
4666	just like you did to unset form fields in the older symfony versions (fx unset($this['name'] ).
4667	newer versions have introduced a method usefields($array) , but you can still use the unset function.
4668	as you can see here here , you can use it to unset an array element.
4669	and symfony's sfform implements arrayaccess .
4670	from what i can read over at the session_register() php documentation ( link ), it seems that session_register() is deprecated and that $_session["email"] = "email@example.com"; is the new way to do it as of php 4.1.0.
4672	so in your case, this would technically work:
4673	just like you generate the rows in the html snippet you can collect the data from $_post .
4674	one of the results would be: [0,3,6,null,11,null] * which means that gfx was included.
4675	you could filter that result if you don't want empty values with
4676	'is_int' param is needed only to handle 0 correctly.
4677	if 0 is not valid id then you might skip it (and may use 0 instead of null then)
4678	as your app grows using $_request instead of the appropriate array will most certainly make your documentation a nightmare.
4679	using $_request to get $_get or $_post values is just unnecessary.
4682	if you want to get the value of that array element, you should do something like
4683	if you also need to remove it from the array, then you need something like this:
4684	i create a function that returns a default value if the key is not set:
4685	it's great for things like reading from $_get and $_post , but you can use it on any array:
4686	the mysqli class does not have a -&gt;connect() method, and you might be working with a duplicate class name which is never a good idea (this is also the reason you're getting null and can't call the prepare method).
4687	you can add new fields to the form if you alter the html code.
4688	there are many different form elements, see if there is something you need here: http://www.w3schools.com/html/html_forms.asp
4689	you can access the value of each element with $_post['key'] , so to add it to the array you would have to write $thisarray[] = $_post['key'] .
4690	note: replace key with the actual name of the form element.
4691	i named the field the_new_element , change this to whatever you want.
4692	of course you should also sanitzie the contents.
4693	if it's realy array_unqiue() i would generate a new array and push the unique numbers in this new one.
4694	you can check if it's already in the new array with in_array(number-to-check, $array) .
4695	if in_array() doesn't return true, add it to the unique-number-array.
4696	there are many logical ways to check that, but one particular function - ctype_digit() - happens to do exactly what you want.
4697	it's probably worth noting that i'm saying "happens" and "what you want " for two specific reasons:
4698	ctype_digit() is designed to check if a string value (it won't work on values that are actually of the integer type) consists entirely of digit characters , meaning that it won't accept the minus/dash sign.
4699	any $_post value (excluding arrays) is guaranteed to be a string unless you've modified it from within your code - user inputs always come as strings ... you're just calling it an "integer" here.
4700	you are correct with your second code-block.
4701	explode , and other functions can't return a fully formed array for immediate use,and so you have to set a temporary variable.
4702	there may be code in the development tree to do that, but the only way to get the elements you need for now, is the temporary variable.
4703	as others have said, php is unlike javascript in that it can't access array elements from function returns.the second method you listed works.
4704	you can also grab the first element of the array with the current() , reset() , or array_pop() functions like so:
4705	if you would like to remove the slight overhead that explode may cause due to multiple separations, you can set its limit to 2 by passing two after the other arguments.
4706	you may also consider using str_pos and strstr instead:
4707	edit another way would be to use list() (see php doc ).
4708	with it you can grab any element:
4710	explode returns an array on delimiter array_slice($arrayname, $offset, $length) gives you a new array with all items from offset, lenght array_shift($array) gives you the first (and in this case, the only) item in the array passed to it.
4711	there must be a better way to do this, but i have not found it.
4712	in my case i wanted to get the number 188 from the url, and all the rest of the url was static, so i ended up using the substr method, but for a dynamic version where lenth may change, the array_get method above is the fastets and cleanest.
4713	you are executing the query directly by calling $mysqli-&gt;query(...) , the result is a result object of everything found in the database.
4714	you are then adding strings to that result object.
4715	problem is: the query has already been executed.
4716	you have to add strings to the query string before calling query() .
4717	either that or instead of appending to a string, append to an array and use implode .
4718	it is used to try to find a file with the same name as the class ( faulty class => faulty.php file) in any of the directories returned by core function get_include_path .
4719	the only odd thing is that the $flags variable was set to be included as one of the parameters for the str_replace function they are actually not used at all; but i don't know if they are really needed.
4720	if i understand you correctly, you want to fetch the data into objects?
4721	mysqli has a fetch_object method/function: http://www.php.net/manual/en/mysqli-result.fetch-object.php use it like this:
4722	as @sudhir said, you can use in_array() function in php.
4723	this function search your expected item through an array and will return true if it can find it.
4724	so using the code that @sudhir suggested, will work for you as you want.
4725	to know more about in_array() function, see http://php.net/manual/en/function.in-array.php
4726	imo all session data must be managed in the server, if you really need it in the front-end get it asynchronously.
4727	the reason i propose to you this solution is that i think it is better to get the session id dynamically when needed, instead of having it stored in a static way, is that this identifier may be modified, deleted, etc., while the user takes his time to fill a form.
4728	unfortunately this defect is very common and annoying.
4729	submit a form and instead of being processed, we are redirected to a login page, losing all data sent.
4730	as well, you just needed to add a "where" to you sql query.
4731	as well, this code was meant to match your code as close as possible, however... a much better way would be to make level an int value, as well using a case with default being the line $query = "select *,lpad(id,4,'0') as id from students $max"; .
4732	you don't need imagick to complete this task.for example you wont to resize your svg (w: 60px, h: 70px) => (w: 36px, h: 36px) to get an icon for a button.
4733	my script above works proper only if your initial translate is set to (0,0).
4735	after a quick look at the question i noticed that you have a comma separated values in id column.
4736	that is certainly causing you troubles, and will cause you more troubles in the future.
4737	i'm not a database design expert, when i started with programming i was doing the same thing.
4738	i wanted to do something quick and easy, without too much hassle with relationships, and it always turn out into a mess so that eventually had to start over from the beginning, and do it properly.
4739	this design anti-pattern will make querying much more difficult, also, you have to write a lot of code to reinvent the built-in functionality of the database that is lost ( you have already started to do that, strpos(",".$v2['idsroom'].",",",".$v['id'].
4740	i took some time to rewrite the example.
4741	for the range of dates i use the dateperiod class.
4742	it can be used in foreach loop so it is suitable for calendars, etc.
4743	also, here are two associative arrays ( $rooms and $bookings ) that are identical like in example.
4744	after converting the $bookings array to separate the idsroom values it looks like:
4745	if you're trying to word wrap the images you're constructing, perhaps you could put them all in individual div's in order with the float:left style.
4746	all of the answers so far make it much more difficult than it is.
4747	why not put it back together as you modify it?
4748	i think this is what you are looking for.
4749	the truncation indicates that it is not utf8.
4750	check show collation like 'cp125%'; if you don't see cp1252, then latin1 is probably what you need.
4751	i'd recommend pdo, because if you change to a different db at a later day, or if you wish to use a different db in another project, then at least you won't have to learn another api, since pdo supports a lot of the more popular dbmss.
4753	my guess is that it has something to do with your function being recursive, and you are returning the array reversed with array_reverse.
4754	when it gets to the end, the array is reversed and php is having trouble reconstructing the original array.
4755	i think the problem in your code is that, if you do the print_r inside the recursive loop, it shows the current breadcrumb as expected.
4756	but if you do it from the outside, it won't because you aren't returning anything really from your chain of recursivity (you are doing calls to the function, but you're not returning the last call).
4760	if you want to rewrite the entire database logic i recommend you to give a try to doctrine2 orm .
4761	it is really powerful and handle a lot of dbm (through pdo or custom connectors in order to support mongodb in example).
4762	by tailing the log, you should be able to see the exact query that was submitted.
4763	one final note, i notice you're using a fixed salt value.
4764	wouldn't it be better to generate this value randomly each time you need it and then store it in the users table?
4765	generally, a salt is not intended to be secret, it's just there to prevent people precomputing tables of passwords using the hash algorithm that you use.
4766	xml parsers understand the xml specification.
4767	explode can only handle the simplest of cases, and will most likely fail in a lot of instances of that case.
4768	this means your $addview will have value of $view before ++ increments the value.
4769	also variable $view contains result of pdostatement::fetch(pdo::fetch_assoc) and it is an array with key post_views so you should change the code to:
4770	or if you want to spare one sql query executed you can just call this:
4771	no need to call first query to ge the old value unless you want to do something extra with it
4772	another note to your code: you do not need to use while loop if you expect to have only one result (page_id tells me it should be only one).
4773	however as you are fetching an assoc you could just change your foreach loop to this:
4774	there may be other issues, have you tried using print_r on the result of each pdo function call to check at what point it is failing?
4775	as far as preventing duplicates, insert ignore should stop that provided you have a good pk set.
4776	otherwise you can run a select quick query to check if any rows exist, then do an if test around the prepared insert saying something like if($numrows == 0) then insert.
4777	this i sent will also show a successful submit message
4778	you appear to build up the sql at the start but only ever use the first element of the checks input array.
4780	i would advise you to swap over.
4781	this would also allow you to use parameterised queries which are safer.
4782	your current query is wide open to sql injection attacks.
4783	add hidden fields to your form.
4784	in your click handler, write whatever value you want to the hidden fields and call form.submit() .
4785	first this do see what you are getting in the $row within the foreach by using the print_r() .
4786	and i hope that you need to replace the below line
4787	you missed one ' at the end.
4789	they are no longer maintained and are officially deprecated .
4791	if you choose pdo, here is a good tutorial .
4792	as others have mentioned you can't read it, without parsing the output of var_dump .
4793	but if all you are looking for is a way to uniquely identify an object, then you should use spl_object_hash .
4794	put it in the cillosis wayand it should be faster.
4795	you have an array with all possible values.
4796	you have an array with actual provided values.
4797	you want to know whether there are values provided that are not in the array with all possible values.
4799	the call to array_diff gives you all items in $all_barristers_faves that do not occur in $allfavourites.
4800	when the count of these items is 0, you can be sure that all 'skills' are in 'faves'.
4801	i would suggest for u to turn the in_array($all_barristers_faves[$i], $allfavourites) to in_array($all_barristers_faves[$i], $allfavourites, false); .perhaps the 18 is taken as a different type in one of the arrays.
4802	by putting the third parameter to false it does not check for same type.
4803	i am not sure about the pdo part, but to write it to a file you would do something like this
4804	well, the most reliable would to use array_search which would eliminate your whole function -
4805	write array search inside your searchforid() function or try by trimming the values of array like shown above.
4807	using in_array you won't directly get the key, if that's your aim.
4808	you could check if the return value is false|null at the place you call this function.
4809	i would do return $key ??
4810	here's how you can do with the last array you have given.
4811	just for academic reasons, i think you could still have used array_diff to arrive at the same result (i.e.
4812	following your original code pattern instead of the second foreach loop):
4813	as a basic rule, to figure out where the error is, break it down to it's basic pieces.
4814	in your case, look at what drives that specific error.
4815	in this case it is because of this line if ( !empty($result) ) .
4816	you instructed it to print that message if this isn't the case; it's coming from your else statement.
4817	this means that $result is empty.
4818	if it's not empty, you need to figure out why.
4819	in this particular instance it appears that you don't appear to be doing any kind of row count in your query, so by default, it will show as empty.
4820	you can get a row count by doing something like this (using your code example):
4823	and ensure session's values are returned correctly:
4825	instead, you have to use the break keyword.
4826	what is &lt;&gt; doing in php code?
4827	the "standard" operator for "not equals" is != in php.
4828	use it correctly or no one will want to use your code.
4829	your example shows line-breaks within the strings.
4830	depending on platform, those can vary.
4831	it's perhaps just the case you're looking for a multiline string that is differently encoded within the string of the file you read in and the string you define inside your php code.
4832	you can easily validate this by making the binary sequence of the strings you operate with visible by creating hexdumps of them:
4833	in fact, you don't even have to use preg_replace here, if each param=value string begins from a new line; str_replace("\n", '&amp;') should do the trick.
4834	here you first create an array of 'key-value pair' strings, then split each element by = : the first part would be the key, the second - the value.
4835	you can use the regular expression reported by @raina77ow or you could use explodes (riskier):
4836	you can achieve this by setting a cookie / session variable, which tells you the form was already processed.
4837	of course, this doesn't address the issue of actually sanitizing the data which i did with the filter_var method i mentioned above.
4838	so i finally solved it with this:
4839	the 0 you are getting is not false it is because the targeted value is the first value of your string.
4840	p.s : you should use pathinfo with pathinfo_extension instead of an explode , because if a song contains several dots it won't be matched.
4843	that is because you are overwriting the variable $cartoutput each time your foreach loop runs.
4844	so that means that only the last element of your cart is visible.
4845	you can remedy this by either appending to $cartoutput or by making it an array, and imploding it afterwards.
4846	alternatively you can also just append all output to the already existant output in $cartoutput like so:
4847	assuming the result of the first explode is in $my_first_array (for clarity) and so for $my_second_arraythe you could use a foreach over the two array checking for isset values
4848	i guess there's no way to automatically explode it to multi-dimension array, so you have to write your specific algorythm to do the job.there is a logical sequence in the string so it can easilly be transformed.
4849	start with exploding by "@", then for each element explode by "a%", and then by "|".
4850	if i understood your question correctly you have the entry in your database but it is not shown on your page until you make another post.
4851	when you make post your page gets refreshed and you see the previous post.
4852	if you add a bit of php code (for example: header("location: $_server['request_uri']"); ) to manually refresh the page after a post you should see it right away.
4853	hi i think you messed up on your line 3 mail script.
4854	if (isset($_post['name'], $_post['mail'], $_post['text'])) { because you will use comparison operators for that.
4855	the more abstract you get downstream, the more you can reuse your code you don't have to go digging through your code every time you change a variable.
4856	all you change is the injection point
4857	by doing this: produk::where('jumlah_stok', 0) you're getting a query builder object.
4858	i assume you want one single record, so you should do: produk::where('jumlah_stok', 0)-&gt;first()
4859	when you try to use your variable in your view, you use double brackets ( {{$stok}} ).
4860	laravel will sanitize this input, and try to force it through htmlspecialchars() , which won't work, because htmlspecialchars() expects a string, and right now, you're feeding it a query builder object.
4861	if you wish to use unsanitized variables in your views, use this syntax: {!!
4862	even if you were to update both of the previous things, you'd most likely still not end up with the wanted result, since you'll echo a collection to a view.
4863	now, i don't know the structure of your database table, but let's say the product table has a row called name , you'd have to do the following in your view: {{ $stok-&gt;name }} (* {!!
4864	would also work, but it'd be unsanitized).
4865	correct or not, you can do it easier and safer.
4868	as an alternative, you can make the operation more concise using array_map() :
4869	your code seems to be fine.
4870	the problem may be that your query returns nothing when there is no corresponding entry of the value $_session['uname'] stored in unme column in regst table.
4871	could you please confirm if there is an entry in the regst table with value in unme column as that stored in $_session['uname'] and corresponding value in point column, in this case?
4872	you have to make it comma separated as @jetawe said but i think his query won't work.
4873	i suggest you make it in two queries to keep it simple :
4874	but i have to mention that naming the variable should be done better to avoid confusion.
4875	make some effort in naming the variable to decrease the errors in your code.
4876	also you have to use another way for connecting and querying the database.
4878	i don't think security is going to be effected, simply because this is a url, being printed to a browser... the worst that can happen is exposing the full directory path to the file, and potentially creating a broken link.
4880	... and if possible, update the calling code so that it just passes the path, so i don't need to even consider removing the 'document_root' (i.e.
4881	what happens if the path does not match the 'document_root')...
4882	on my websites, i simply have a variable defined at the beggining of script execution which sets:
4883	do exactly the same thing: put a record (row) from a query into an array, using field names as indexes.
4884	this way it's easy to use the data, because you can use field names (with a little bit around them) for displaying or manipulating the field values.
4885	it checks if there is a row still to fetch from the query results.
4886	and while there is one - it puts it into the array $row for you to use, and repeats (all the stuff between { and }).
4887	5.you should avoid using commas in the from clause in a query.
4888	this notation can be used only if the fields joining the tables are obvious (named the same), but it is bad practice anyway.
4889	the joins between tables should be specified explicitly.
4890	in the first query you want the header only, and there is no additional table needed in your example, so you should have just
4891	whereas in the second query i understand you have a table parts, which contains descriptions of various parts that can be ordered?
4892	if so, then the second query should have:
4893	if in your orders table you had a field for the id of the supplier supplier_id , pointing to a suppliers table, and an id of the person placing the order customer_id , pointing to a customers table, then the first query would look like this:
4894	will return true if mysqli will successfully close the connection.
4895	so you are not checking if the connection is closed, but you are closing the connection with success.
4896	you are connecting twice to the database, but only closing the connection once.
4897	normally you will store the connection in property and reuse the connection and then close it at the end of the calls or script.
4898	you could be the victim of bots, or some joker visiting your site ever so often just to tick you off.
4899	sidenote: || checks to see if one or any are empty.
4900	then check if the button is set and that the inputs are not empty:
4901	plus, if you decide to use radios/checkboxes later on, use isset() against those.
4902	you could add a checkbox to your form to check if it was checked or not, and handle it with a conditional statement.
4903	note: you can also compare the cookie value by adding the extra comparison on the query, like and b.userid=$_cookie["id"] (better to save the cookie value in a variable)
4904	i did a few things in the source.
4905	i believe it all should be documented fairly well.
4906	here is a list of things i added:
4913	you can access a specific index of the array this way:
4915	and you can just keep using var_dump as you already are, but put that die inside an if statement like this
4916	in stead of using array_map, you will have to fallback to writing your own code, and checking if you are facing an array inside the $_post array.
4917	and to retain the selections after a failed page submit, you need to change:
4918	after you process the $_post data, use a select query followed by an if statement to check if there are any rows in the table with the same first name and last name as the $_post first name and last name data.
4919	if there is, display a message that this data has already been inserted.
4920	if there isn't, use an insert query to add this data to the database table, and display a message that this data has been added to the table.
4921	make the column this key goes into te primary key.
4922	then you use an insert ignore and you can ignore any errors.
4923	then you run a select on the $key to return everything related to $key and display any info you have on the user in a friendly format.
4924	you don't have to show the user an error at that point, simply provide them with the info already captured.
4925	if you are worried about users with the same name seeing each other's data then the data can be obfuscated.
4926	for example instead of showing a phone number (333) 444-5555 you show (333) 444-5* 5 or (333) * *-5555. something that gives the user enough info to know if it is them or someone else with the same name.
4927	in your query you need to have your php variables outside the string, otherwise they will be parsed as text (ex: "$title") instead of the actual values of the variable:
4929	along with this as @bhttoan pointed out.
4931	instead of using file+implode, use file_get_contents you cannot use array_diff here since it compares the contents of the array, not the particular order as you need it have a look at pear's text_diff for creating textual diffs.
4933	you should probably use scandir() or equivalent php functions that are specifically made for this.
4934	alternatively, you could just iterate over the part you want with a for loop instead of a foreach loop.
4935	as i have stated in my answer to your question on wpse, you will need to get your posts sorted by the date in your custom field.
4936	this is as easy as adding the correct parameters to your query arguments
4937	all you need is to add the correct values to the order and orderby parameters.
4938	if you need to sort by month regardless of year, then you would need to use usort() to sort your loop before executing it.
4939	if this is the case, let me know so that i can adjust my answer accordingly.
4940	all you need to do now is to check the dates (months) between the current post in the loop against the previous post in the loop, and if they differ, output the month.
4941	you don't need a foreach loop, neither do you need output buffering or creating a new array with posts from the original array of posts
4942	the following code is untested, also, make sure that date format in your custom field is correct.
4943	inside your loop you would want to first do var_dump( get_post_meta( $post-&gt;id, '_edate', true ) ); to verify that you get the correct value in the correct format.
4944	everything in my code relies on this small piece of info.
4945	if the value or format is incorrect in your _edate custom field, my code will fail.
4946	please adjust, modify and abuse my code as needed
4947	i have fixed the code above and tested it.
4948	everything is working now as expected.
4949	please see the comments in the code for the bugs fixed
4950	change related line to following: the problem is when activatebox is not empty it assings itself to $activemain naturally.
4951	updated answer due to updated question : i removed session_destory if you execute that and if you have another session variable ex: user isloggedin it would be destroyed too.
4952	unset is ok for the purpose.
4954	in addition you have all functions with mysql_* they also need some care.
4955	if you don't want to use a foreach , you can use a combination of array_keys , array_map , and array_combine to achieve this.
4956	as @wrikken pointed out, the use of array_values is redundant and not needed.
4957	you forgot to specify the database you want to connect to as the last parameter
4958	so, in your original script, you were connecting with mysqli_connect but then using mysql_select_db... this is where the error was coming from - the mysql_select_db.
4959	if you change the call to mysqli_select_db([conn id], [db name]) that particular error will resolve itself.
4960	but, you can also bypass the need for the additional call by passing the dbname with the initial mysqli_connect(..).
4961	i recommend taking a look at this page which provides you with a nice example of how to properly use the mysqli connector.
4962	it will make your life much easier and you will be able to properly see the errors mysql throws if any occur.
4963	so i'm not actually sure what you are trying to do.
4964	if you are trying to add headers that start with x from your request to your response then i would use this in your htaccess file.
4965	if you are trying to use header values in your php script then they should be in your $_server array, but the names are normalized.
4966	it sounds like you want to get the values from a dynamic number of headers that start with x. if this is the case then your code won't work either way.
4967	your code (if it worked) would always contain the last value of a header that starts with x. so if you have more than 1 header that starts with x then you would be missing values.
4968	using your code, you would need to create a rule for each header that you wanted to pass to your php script, which sounds like a pain.
4969	however, you can still use $_get["profile"] while it has a null value in your script without it generating a notice.
4970	this part of the code would cause the query to fail because of the quotes.
4971	you you can use the function addslashes() to escape those values before inserting them.e.g
4973	a better method would be to explode $dservices into another array, instead of using strpos .
4974	check if you have magic quotes turned on and make sure you turn them off .
4975	also, you'll want to use htmlspecialchars to escape the special characters.
4976	otherwise, they can just close your textarea and wreak other havoc.
4978	try changing those lines in add.php.
4980	it's a little tricky, though - it's going to be the script that runs that code, which may or may not be the one loaded directly by the browser.
4981	this means that when you submit, either manually or with jquery, you are going to send the data and request to whatever corresponds to $_server['php_self'] .
4982	if you want to arrive somewhere else, you probably want to set the action of the form to be something besides this "current script" value.
4983	in this case, add-album.php is the file that is calling &lt;?php echo $_server['php_self'] ?&gt; , so you get add-album.php in the action.
4984	to see what i mean, look at the rendered code of the index.php page.
4985	you will see that the form tag renders with action="add-album.php" or something similar.
4986	that's why add-album.php loads when you submit.
4987	you may find that setting the action with a static value is what you want.
4988	you left out one important detail - where do you want to send the form data?
4992	if you do htmlentities on it when you save then you have to do html_entity_decode on the text when the user wants to edit the input.
4993	so you sanitize for what you need and nothing more.
4996	also, i am not sure if you saw darryl hein's comment, but you really do not want magic_quotes enabled.
4997	they are a bad, bad, thing and have been deprecated as of php 5.3 and will be gone altogether in php 6.
4999	this replaces any need to use mysql_real_escape_string() .
5000	try using mysqli::multi_query() instead of mysqli::query() .
5001	it allows the execution of multiple queries at once.
5002	if something goes wrong with your query in db pdoexception is thrown.
5003	so you can use try ... catch block getting exception and process this situation correctly.
5004	only if the storage engine supports transactions (innodb does, myisam does not), and you are not in autocommit mode.
5005	this can be easily accomplished without using a regex.
5006	you can use strpos() to find the position of cnt= string, then use substr() to get everything after it (which, in this case, is what you want), and add the values into an array.
5007	once the loop finishes execution, you can simply grab the largest value from the array using max() function.
5008	the regular expression needs to be wrapped in valid delimiters and you're not having one in your code.
5009	also, even if there was one, it wouldn't work, because you're only checking if the line contains cnt= string -- which will be true for all the lines in this case.
5010	you need to use capturing groups in your regular expression.
5011	it would help us answer the question if you provided the error.
5012	being that i answered your last question:
5014	at the end of your query.
5015	i'm guessing that you are using a $_get request or something similar to determine the product id.
5016	maybe this has something to do with your issue, possibly just remove it from the query?
5017	you should only need to use 1 unique key for your sql query, especially as unique as the hash you're creating.
5018	option 1 allows you to re-use the $data variable so you can display the results twice, but the cost of this is that you potentially have a large amount of data stored in a variable.
5019	you can clear this by using unset($data) once you are 100% sure you've finished with it.
5020	option 2 requires less loops (only one instead of two) and doesn't need a extra variable to store the data.
5021	the cost of this is that the while loop can only be used once.
5022	i would recommend option 2 providing that you'd only need to use the while loop once.
5023	also, you could benchmark your scripts to see how they perform against one another.
5024	one think i spotted was the undeclared $category variable which i assume to be $_get['category']you might wish to perform some better sanitation of user input here.
5025	to get the records displayed when the user selects view by category and thus causing the url to become http://localhost/edit.php?category= you should set a test that selects records according to whether $_get['category is empty.
5026	update: since the posting of the db logic and sql, some of the above could be simplified to
5028	instead, you should absolutely use prepared statements, and an api like pdo or mysqli instead:
5029	you need to ensure that array member is set first.
5030	try using the result of isset($_post['s']) to ensure it is set before trying to access it.
5031	if you are merging lots of items and you expect to have a substantial number of duplicates then it may be worth it to explore more efficient alternatives, but don't worry about it preemptively.
5032	you can always work with the rows from a result set as an array and use foreach to loop through them.
5033	you didn't include your php code so we don't know whether this is via pdo or mysqli .. so this may be a bit off the mark.. but ..
5034	to accomplish what you're trying to do, simply output the setcookie call when you've submitted your form in php :
5035	this code actually does not work, as mentioned there are very basic syntax error that even prevents it from actually being run at all.
5036	i'll assume this is a simplification error, however even the concatenation is wrong: the statement is duplicated each time (.= and the string itself.
5037	either of these will work, both will destroy the query)
5038	the problem of having a dynamic number of parameters is interesting, and depending on the needs can be fairly convoluted, however in this case, a fairly simple param concatenation will allow you to achieve a dynamic number of parameters, as suggested by abracadaver .
5039	more exactly, when a condition is added to the statement, separately add the sql to the statement, and the values to an array:
5040	the db connection should be injected through the constructor, not recreated every time you execute a query (as it will, if you connect in the index method).
5041	notice that $pdo is a private property.
5042	it should not be public, accessible by other objects.
5043	if these objects need a database connection, inject the same pdo instance in their constructor as well.
5044	one of these methods should be private, called by the other (public one) that would receive in arguments everything that is needed to run the functions.
5045	in this case, there does not seem to be any arguments involved, everything comes from $_get .
5046	we can adapt index so that it accepts both the sql and the values for the query, but these three lines could easily be transferred to the other method.
5047	escaping values is not needed, for sql injection protection that is, when using parameterized queries.
5048	however, sanitizing your inputs is always a correct idea.
5049	sanitize it outside of the function, then pass it as an argument to the "search" function, decoupling the function from the superglobal $_get .
5050	defining the arguments for filtering is out of the rather large scope of this post, consult the documentation .
5051	return by it self wont be enough sometimes.for example, if you want to recieve the json on an ajax call it has to be echoed.
5052	other thing, you should take a look on pdo instead of using plain old mysql functions.
5054	since the queries you are executing are identical, you can just do this:
5055	you can't plug a value like that.
5056	array($_get['cats']) is equivalent to array('3,328') , if the value of $_get['cats'] is 3,328 .
5057	so basically, the value is a string, not a list of integers.
5058	if you want to get 3 and 328 as seperate values you need to use explode .
5059	you can than use foreach to print your exploded values.
5060	array($_get['cats']) will create an array containing the single element that’s value is the value of $_get['cats'] , no matter what value it is.
5061	in case of the string value 3,328 is would be identical to array('3,328') .
5062	if you want to turn the string value 3,328 into an array identical to array(3,328) , use explode to split the string at , into strings and array_map with intval to turn each string into an integer:
5063	however, if you change your uri querystring to ?cats[]=3,328 then $_get['cats'] will be the array(3,328) ready for you to use.
5064	you just need someone's phone number and you are doing a whole background check :)
5065	that means $output is an array with 1 element which is on index 0. element type = string and its length = 2 and its value = 35
5066	your problem is, that $_server['document_root'] seems to return the wrong value, so your $uploadsdirectory is not within in the allowed path (see line 11 of your script).
5067	certain characters have special significance in html, and should be represented by html entities if they are to preserve their meanings.
5068	this function returns a string with some of these conversions made; the translations made are those most useful for everyday web programming.
5069	if you require all html character entities to be translated, use htmlentities() instead.
5070	if the input string passed to this function and the final document share the same character set, this function is sufficient to prepare input for inclusion in most contexts of an html document.
5071	if, however, the input can represent characters that are not coded in the final document character set and you wish to retain those characters (as numeric or named entities), both this function and htmlentities() (which only encodes substrings that have named entity equivalents) may be insufficient.
5072	you may have to use mb_encode_numericentity() instead.
5073	in php, as in many languages, the order of things matters.
5074	so, when your script is executing, and it reaches a function call, that function must already be defined somewhere.
5075	you can't just place a function anywhere (like inside an if block) and expect the code to search it out and use it.
5076	make sure that your functions are all defined outside of any if blocks, because if the condition evaluates to false, the functions will never be defined.
5077	while you're learning, just keep all your functions together at the top of the script, outside any logic blocks.
5078	for processing the checkboxes, you'll need something like this.
5079	this will define an array called $service:
5080	you are binding parameters to placeholders in the original query, not in the result.
5081	yes, you could do another query, but it probably makes more sense to just alter the first query to include all the data you need, which would look something like this:
5082	edit: added in the user from session per your comment.
5083	i used intval because i am assuming you are using an integer for the id of the user, and i don't know how the $_session value got set - if it is from user input then it should be escaped.
5085	as people mentioned in the replies, you should select the database before the query, not together with the query.
5086	select the db when opening the connection)
5087	also, you should use binding, either the one provided in mysqli, or even easier is pdo.
5088	during explode: maybe there is a chance that the string is not containt exact match whatever you given as reference in explode and due to that the notice occur.
5089	the error message is quite clear.
5090	when you see an error message like this the first thing you need to do is go to the manual .
5091	if you did you would see you must provide your mysqli link as the first parameter:
5092	a blog post on how i managed to work around this using the excellent php utf8 lib .
5093	what this lib does is convert everything to unicode then you can work on it from there.
5094	it might be cumbersome in this instance so try to get the above going.
5095	you need to make sure you start your session with
5096	i may be wrong, but have you checked your "password" column in your database , i am getting the impresion that it has set a "charlimit" that truncates your passwords when you save them.
5097	so when you retrieve it it shorter than your hash.
5099	you can check by type first, then use a htmlspecialchars and then cast to the type... although that would defy the use of htmlspecial chars.
5100	also, i think the $a will probably come from some request variable, which will always be a string in that case.
5101	it almost sounds as if you would like a function to determine the context for you.
5102	since if it is already typed int, what 'escaping' do you want to do?
5103	there is no need to use htmlspecialchars on an integer value.
5104	i just get the type, and do something like i show in the code below, even you can settype again later.
5105	assuming everything works ($acars and $ncars) have values and you want to know which were selected.
5106	you need to convert the array to a sting so it can be printed.
5107	have a look at the implode function.
5108	that function allows you to 'glue' array elements together into a string.
5109	when you confirm the user login use session_start(); and set a variable such as `$loggedin=true;
5110	on each page, check the $loggedin to see if it is there and set to true.
5111	just simply use array_map() to check if the value isn't empty and array_combine() it with the keys, like this:
5112	one way is to use array_merge() , you can make a function like this:
5113	and if you call the function without passing parameters it is ok, its not mandatory and will return an array with all those 6 attributes all null.
5114	you could set a session variable on your login page (or any page that checks the login) that stores whether or not they're logged in and it will persist across pages.
5115	then you can simple wrap your admin html in an if statement like so:
5117	as mentioned, if you use explode you will get an array with more than one element which is what your current method does.
5118	however, i'm not sure why you would want to encapsulate the array values in quotes as you do?
5119	unless there is a specific need to encapsulate the array values within quotes then a minor alteration to the above could be:
5120	first, you are mixing the mysql api's at somepoint you are using mysqli_* at some point u using mysql_* they don't mix.
5124	another error : &lt;input type="text" name="name"&gt; &lt;input type="text" name="name"&gt; these two inputs fields have the same name attribute php will only read one.
5125	and you will get an undefined index here $misure = $_post['misure']; you need to activate error reporting while you are still developing so you can see your errors and notices:
5126	add this at the top of every php page : ini_set('display_errors', 1); error_reporting(e_all);
5127	because you do not have post value with the submit attribute name.
5128	your submit does not have a name attribute.
5129	this is what u need to do to solve that :
5130	the thing is that array_shift() (link to documentation) returns the removed value so you can store that in the array and use it for the key.
5131	and the array after shifting is ready to be used.
5132	if you think about it in a logical way, what does php need in order to execute the function?
5133	so, strip_tags needs the $record['value'] to be inputted before it can execute the function and strip the tags from it.
5134	that function will return a value.
5135	addslashes takes one argument, in your case it is strip_tags($record['value']) .
5136	addslashes can't be called when it's argument isn't resolved.
5137	it always puts them in sequentially.
5138	if you are seeing this behavior then you must have extra in the document that are being exploded upon resluting in empty array elements.
5139	you will either need to pre-process the string or prune empty elements from the array.
5140	note: you should probably use pdo instead for this, since the functions you are using have been deprecated if i have understood correctly.
5141	apparently my answer below didn't work as you expected and even got a down vote, but it should work.
5142	maybe not if you just copy and paste it, cause i might have missed something in the rest of your code, but the principle is there.
5144	loop over the array and check the key for the special cases you want to handle differently.
5145	either way, you need to learn how to read documentation and more importantly how to use for example the function var_dump to see exactly what you're dealing with.
5146	for example try to run the following:
5147	does it give you what you thought you had?
5148	is it in fact an array?
5149	does the keys look like you expected?
5150	next you can try to run this:
5151	is name and value what they should be?
5152	what you're trying to do isn't too difficult and if you just copy and paste code without trying to understand what's going on, you won't learn much :)
5153	in your loop i'm not sure what you're trying to do, but this should work:
5154	4th line of the html is a link that will give get variables of $_get['artikelnummer'] = artikelnummer and $_get['action'] = del if you click the link final line of the html is a hidden input that will give a get variable (since no method specified in the form element) of $_post['action'] = upd , there is a hidden input for the artikelnummer, and a text input for the number.
5155	you get this if you submit the form (there is no submit button in your current html)
5156	if multiple items, there is no way to tell which name=aantalartikel text input refers to which artikelnummer
5157	a separate form for each product that you want to update so multiple submit buttons or, each name=aantalartikel text input must have a unique name e.g.
5159	thats the white page of death :) there is an error, but it doesnt get shown.
5160	you can try adding this to the top:
5161	that piece of code will go to home, you can just to to your $page directly:
5162	you need to change the "name" attribute of your "input" elements to indicate that it's an array by adding square brackets [] at the end.
5163	$_post['incharge'] will be an array instead of a string.
5164	you need to call session_start() on the iframe code too, are you actually calling it ?
5166	you don't need to check session_id() .
5167	the problem is with your last conditional statement being else instead of another else if .
5168	having error reporting set to catch and display, would have thrown you something like this:
5170	the session array works like any other php arrray.
5171	so if you want all your multiple arrays to be kept under $_session["savearr"] then just add a [] like this
5172	currently you are using one big &lt;form&gt; element for all your entries.
5173	when sending that form, the actual values get overridden many times and you just see the last one.
5175	have a look at pdo or mysqli as a replacement!
5176	your undefined index error is because you are using $_request['sessionsdrop']=='' , but your form code is -
5177	so you should use $_request['session']=='' , instead of $_request['sessionsdrop']=='' since the super globals ( $_post , $_get , $_request ) reference the name , not the id .
5178	you can just use str_replace once you've used array_keys and array_values to get each side of the array:
5180	you should use validation to implement data security.
5181	also, just use isset() instead of array_key_exists (it's more efficient, and less wordy):
5182	just add unset($set); at end of your loop.
5183	or you can do something like...
5185	something to watch out for if you want the "set" class applied even if the value of $short_list[$result['code']] is null.
5187	your problem is in this area of code.
5188	try using mysql_num_rows instead mysqli, and try to output the value of mysql_num_rows() to see if it's 1.
5190	and you can remove the database connection calls above session_start() -- they aren't needed since you are doing a perfectly good call to mysqli_connect() after checking to see if the user is already logged in.
5191	i'm not seeing any session_start() you need it (see the manual ) in the beginning of any php file that uses sessions...
5192	step 1: try to understand what your error is trying to tell you.
5193	there is a variable issue on line 10.
5194	this would concatenate the value of $id++ into the href under each item.
5195	then all you need to do is create a landing page for product_page.php , define the $id on that page again and pull the data for that product from the db.
5196	you can do this without using any arrays.
5197	you would define $id on your product_page.php using $_get['id'] , as it is in the url, supplied by your href above ^
5198	a good practice to get into whilst in the development stages would be to echo $id; to see if it is echoing the correct data from your while loop.
5199	if it echo's the correct $id then you can send the $id to the url through the href.
5200	you have to return the statement , not rows.
5201	it will make our function extremely handy and way more useful yet it will be kept as simple as this "illustration code".
5202	and it will solve your problem as just a side effect.
5203	want to get all the rows at once?
5204	just call your function this way
5205	as you can see, in such a case fetch method can be simply "linked" to the runquery() method call, thanks to the very neat oop syntax feature called "method chaining".
5206	all you need is to return the statement, not result.
5207	not much writing, but enormous flexibility.
5208	now you can get any result type you want.
5209	in fact, you're limiting yourself to just one result set type, making it complicated to get another type.
5210	but pdo already has billions of result set types - you need only to use them.
5211	or, if you want to get a column, but not as a nested but simple one-dimensional array?
5212	again pdo has a method for you:
5213	or, take your initial problem with dml query.
5214	what if you want to get the number of affected rows?
5215	look - all you need is to return the statement and then use method chaining to get the result in the desired form.
5216	as a bonus, you don't even need to rewrite your existing code that was using inner fetchall() call.
5217	if you were looping over returned result using foreach - you still can use the same code, using returned statement all the same:
5218	you don't have to use double quotations " for column name!
5219	if $_post['selected-items'] is an array you should implode it's items with ,
5220	after using implode the $string will be like code below and you can use it for sql:
5221	i assume that the $user_data['username'] is set or available,if yes then you could pass a variable name of you choice which points the message id instead of sending only the id (eg: i am setting it as msg_id ), now you can access the message id via $_get['msg_id']
5222	you are going to need to do something more in depth than just a simple array_merge .
5223	the data provider provides an array of which each entry is an individual test case.
5224	each test case is an array containing the arguments.
5225	since you said that you test is being run twice each data provider must be providing only one entry.
5226	array_merge appends the second data provider array to your first array making two test cases.
5227	if you want to combine the data provided by each data provider you will need to do something like the following:
5228	this takes the arguments from the second set of data and appends it to the arguments in the first.
5229	now your test will receive the combined arguments from both data providers.
5230	this assumes that both data arrays are the same length.
5231	if they may not be, you will need to add some logic for handling that case.
5232	also keep in mind for the list of arguments, phpunit does not reference the keys for matching the arguments to the variable.
5233	it is only based on the order of the values in the array.
5234	so be careful with the arguments in your test case with this.
5235	the loop for($i=0; $i &lt; sizeof($player_id); $i++) is an excessive loop.
5236	you are not using $i from this loop so you need not it.
5237	just imagine, if your $player_id array has 3 items, you will loop it, and on every step of this looping, you also will loop whole $player_id array one more time by using foreach loop.
5238	also, you are using unsafe method to pass variables in the query.
5239	best practice i think is acquire a habit to convert income $_post variables to int if they are suggested be numbers.
5240	it's just one string $player_ids = array_map('intval', $_request['players']); , or $id = (int)$_post['id'] , or $number = (int)$_get['number'] , etc.
5241	another thing is overquering your database.
5242	instead of creating separate query for every id, you can use one query with in operator, which right side is all ids joined by commas.
5243	also, if you want to know why you need the use of "!==" or "===" read this: how do the php equality (== double equals) and identity (=== triple equals) comparison operators differ?
5244	the good solution would probably be to alter your set up so your json returns an array of dates rather than a string .
5245	the other way to solve this would be to explode the string into an array like so:
5246	that way you have an array you can loop through.
5247	you could use array_diff to compute the difference between the $a array against $array .
5248	this would give you all the values not in $array or $a .
5249	or you can use array_intersect to find those that are in those arrays.
5250	if you are using codeigniter and the value of $var is coming from a get request then you dont need to type such a long expression.
5251	if you want play with true of false value in your url queries do it with "1" for true and "0" for false
5252	you can use the $_server['server_name'] for this.
5253	you only need to configure the server accordingly that it returns the expected value.
5254	you're apparently using newer than apache httpd 1.3.
5255	you need to set usecanonicalname directive to on in the &lt;virtualhost&gt; entry in httpd.conf (also check the warning at the bottom of the linked document!
5256	mysqli_ functions are deprecated, don't use them anymore.
5258	this allows you to store information for the life of the user's session.
5259	when the session is destroyed (user navigates away, closes browser, etc.
5260	), the information is no longer there.
5261	alternatively, you can use cookies to store this information long-term.
5262	these methods are also more secure than storing the information on the page, as users can modify the dom elements on the page using a dom inspector, which most browsers now have.
5263	the most secure method is using sessions, as cookie information can also be changed, but is relatively safe if you validate the information there first.
5264	database has no idea what data is stored in it.
5265	all quotes or whatever are escaped properly) - then data is correct and will be stored correctly.
5266	but for what purposes - html/javascript/executable code/script code/or/whatever - db has no idea, so you'll need to take care about that in your application (or another layer which takes output responsibility).
5267	different data needs different ways to maintain safe output.
5268	for html, it's htmlspecialchars() / htmlentities() - but for other data types it will be other things.
5269	and you should know exactly what are you doing (i.e.
5270	main idea would be - store your data as it is - in database and provide safe output when it's needed (i.e.
5271	split database, data logic and output and provide correct functioning for each of that part.
5272	you just need some adjustments about encoding.
5273	in order to make sure the filename is encoded correctly when the browser sends it (so that the server receives it correctly, you must define a correct encoding but on the page that includes the upload form.
5274	indeed, once a browser sends a request, it cannot change it, even if the response (as other responses suggest it), defines an encoding.
5275	this means that, if you want to get a clean filename, you must set properly encoding on the upload form page.
5276	on the file that receives the post (here send.php ), everything should be received correctly.
5277	you can check whether the sent name is correct using var_dump($_files) .
5278	if that's not the case, then your form probably doesn't include a proper encoding declaration (which means you didn't include the &lt;meta&gt; tag, or an header is maybe overwriting the &lt;meta&gt; tag.
5279	in that case, include &lt;?php header('content-type: text/html; charset=utf-8'); ?&gt; at the beginning of the file handling the upload form.
5280	somebody else was thinking to use pdo::attr_connection_status , but he figured out that: " $db-&gt;getattribute(pdo::attr_connection_status) keeps replying “localhost via unix socket” even after stopping mysqld".
5281	i also notice in your code that you're nesting a lot of values.
5282	it may be better if you do this within your php.ini file.
5283	if you do, make sure you restart.
5284	sudo service httpd restart (assuming you're running apache)
5285	so if the condition of the second elseif holds, so does the condition of the first elseif .
5286	the body of the second elseif is therefore never executed (the body of the first elseif is executed instead).
5287	your initial premise is fundamentally wrong if you are trying to update just the quantities, because the session cart will never have any products to update, and from the solution to the first question you raised, the setting of $_session['cart'] to array() would always guarantee an empty _session cart.
5288	will fail with an undefined error on the unset() line if the cart is initially undefined.
5289	see the answer to your first question for elaboration of that.
5290	in your page display code at the top you have
5291	if you implemented the solution to the 'clear' question, this will always return true since you initialise the cart to an empty array.
5292	(btw - please update the code above to reflect the 'clear' solution from that question)
5293	as for the rest of the update code, i could suggest several improvements, but unless you can implement a method of populating your cart, then it's all a bit academic.
5294	if, on the other hand, this is omly one from a set of scripts, and if it expects the cart to have been populated by another one before it does anything, then you will need to explicity add a test to make sure $max is not zero and do nothing if it is.
5295	the problem is in the sql query syntax, which is wrong.
5296	this is not how it works in zf.
5297	you cannot pass the form name to ispost() unless you override ispost() in your code.
5298	or use a hidden field named formname and check in your code what's its value is.
5299	you can also use a different action for each form and in the end redirect to the signupaction wich would yeld the same result without the hassle.
5300	as you mention the quote() function for pdo can be used to escape both the column names as well as data.
5301	alternatively using prepared statements such as create table ?
5302	and then just execute the query.
5303	you always want to escape ` identifiers, even table names and field names, as maybe tomorrow they will be reserved words and break your query.
5304	as long as you are using prepared statements (pdo, mysqli, or whatever) you will be fine.
5306	you just need to fine grain your filtering mechanism, as to what table name, etc is allowed and not.
5307	btw: don't do it like you are tring to do: "create table {$quoted_table_name} like {$table_name}";.. user prepared statements with placeholders (?, or :name, etc.)
5308	edit: since you need to secure identifiers, i see 2 ways:
5309	surround them with (`) filtering &amp; escaping incoming values (mysql_real_escape_string or better).
5310	filtering will include striping away any unnecessary characters (you might want to allow only letters [a-z]+ or letters with digits.
5311	what you are asserting is if variable $testvar is set (not if it's empty or not).
5312	the variable themselves don't have a return type, but it's in the context they are used in a control flow operator such as an if statement.
5313	in this case, you will get "empty" because $testvar is evaluated as a int 0 .
5314	when you want to check for empty string, you have several options:
5315	it would be helpful to clarify how this isn't working.
5317	without knowing further what is not functioning it's hard to suggested anything further.
5319	if you are passing a user with a session on one server to a page on another (where you would like to persist the session) you will need to develop a method of handing that off.
5320	preferably with a token and encrypted serialized $_session which can then be authenticated and loaded.
5321	you are displaying the data from the database before you update it.
5323	in your code (even if a user has submitted an update), you query the data, pull it from database and display it, then run the update with what the user submitted.
5324	changing your code to this should do the trick (do read the note below though):
5330	edit 2: the page is being updated after the user submits the form, but the page you display to the user is querying the database before you update it - and using that to display the page to the user.
5331	string offsets provide a mechanism to use strings as if they were an array of characters:
5332	as for the isset($model['service'][0]) return value, i'm a bit surprised.
5333	this is a simplified test case:
5334	use array_key_exists() or empty() instead of isset() .
5335	php caches old array values strangely.
5336	they have to be manually unset using unset()
5337	here's a cleaned-up version with more descriptive variable names, and less code duplication, that you can examine if you need some inspiration.
5338	once the query has been sent to the database, what is done on php variables doesn't matter anymore the only thing you'll do that will have an impact is when you'll commit or rollback .
5339	which means that unsetting the php variable will have no impact on the transactions/data on the db side.
5340	the array on the right has the keys 0 , 1 , 2 etc.
5341	the $_post array has the keys name , email etc (i assume).
5342	array_intersect_key intersects on the keys of both arrays, not on the keys of one and the values of the other.
5343	but in this case your output will be ended with - .
5344	so, one of the solutions is to collect values in array and implode 'em:
5346	it returns boolean false if there is no match so you should be looking for that.
5347	just pass $_session['gv_1'] as a parameter to sg_gc1() .
5348	then it will automatically be local in that function using the name of the parameter as you define it in sg_gc1() .
5349	in this case it will be $gv_1 .
5350	doing this way doesn't hard code your session variable into your function so if in the future that value isn't in a session but another variable you do not need to refactor your code.
5351	it also makes your code easier to understand and maintain.
5352	you can use preg_match method to catch the stuff between http and .com
5353	i think the simplest way to accomplish this but not error free is:
5354	in old times you could use mysql_result which selects one column into single dimensional array.
5355	however, it is deprecated since php 5.5.0 and the reference suggests using mysqli_fetch_field (which forces you to make a select from the response as zerkms suggest in the comment) or pdostatement::fetchcolumn if you are willing to use pdo.
5356	if you want to check for blank also then please use empty this will return you the true in following cases.
5357	if you access the post data in php using $_post , it mean you need to use x-www-form-urlencoded in request header.
5358	it seems like what you are looking for is array_key_exists(0, $match[0])
5360	but i don't think to have multiple values with the same name is a good choice.
5361	you should better change the way you send your params if it's possible.
5363	0 then empty will return true which may not be desired.
5364	generally, it is recommended to do isset or empty checks first, though.
5365	this will prevent warnings from being generated.
5366	you no longer need the isset (or empty ) in your if since you already checked that.
5367	you can change the condition to $priceperperson != '' if you want to allow eg.
5368	i'd say you think it is false because the string's position might be 0 which evaluates to false (assuming you are using a needle that is present in the string).
5369	you should always compare with === .
5370	explanation: there is an escape sign before double quote (") but it doesn't perform it's function.
5372	that function will convert it to character codes that will prevent it from rendering as actual html.
5373	what you want is to print the actual html.
5377	one thing i noticed is on $_session['username']==$dbusername; shouldn't it be only 1 equals?
5378	as your assigning $dbusername to the $_session['username'] variable.
5379	first, you should not be including the table names.
5381	switch to mysqli or pdo .
5382	third, you have no error handling to tell you whether your query is successful or not.
5383	in fact, you have the opposite of error handling, because you are trying to use the @ operator to suppress your errors.
5384	instead, you should do something like this:
5385	if you do this, your mysql errors will be logged in the same place as your php errors.
5386	you will then be able to tell whether any of your trouble is coming from the query being malformed.
5387	the left join is the key here.
5388	it allows a row to be returned with the data from sales_list even if there is no corresponding entry in accessories_orders .
5390	here's a demo on what i mean on those missing name="" .
5391	i've explicitly omit field 3 so that you can see.
5392	your if statement is totally wrong.
5393	you can't separate 2 statements with , ,it should be separated with || or &amp;&amp; .
5394	the logical operators article will get you familiar with these operators.
5395	also, $_request is very insecure.its best not to use them.the reason for not using them is explained here .
5396	you don't have variable $user defined anywhere, it should be $username
5398	i placed $pagebios in the for loop and had success.
5399	i'm not happy with it because the $$ format is not right - at least i've never seen it.
5400	so while i need to move forward due to deadlines, i would really like to clean this up - so please feel free to show me a non-moronic approach.
5402	in order to preserve all these, try wrapping your print_r output in &lt;code&gt;&lt;pre&gt; .
5403	just a quick guess by looking at your code, you are not escaping the value of $picture when you place it in the database, which could be why the image value in the database is not updating.
5404	also, i really recommend that you use the mysqli extension: http://php.net/manual/en/book.mysqli.php
5406	about database table indexes and "where" to use them... pun intended :)
5408	will only evaluate to true if a blank string was explicitly passed in - otherwise the value of $_get['foo'] might be equivalent to a blank string, but the type would not be since it would actually be an empty value for that index, not a string.
5409	there's obviously quite a lot of repetition going on here.
5410	most of it could be removed by refactoring the code, but as a starting point even with the current process, you could make it perform better by using a better database api.
5414	yes, these could definitely be simplified.
5415	the three queries in the loop could be combined into a single query using group by .
5416	the query would look something like this:
5417	you should get the same three values from this query as three records to fetch.
5424	you should be using mysqli or pdo .
5435	are you sure, you have $ in $_cookie keys?
5436	also i think this is wrong: $_cookie['eadmin'] , it should be $_cookie['admin'] .
5437	the converts the "\r\n" into a string to make it safe to input into the database.
5438	instead use htmlspecialchars when you output to screen:
5440	it won't do what you expect when outputting to screen - so anything that has been mysql escaped() should not appear on screen.
5441	use htmlspecialchars (which you don't have!)
5442	use url_encode for adding stuff into a url there are also many different "escape" function (e.g.
5443	inserting into json, inserting into mysql, inserting into other databases).
5444	use the right one for what you need - and don't use it for other purposes.
5445	as it currently stands your code is not safe even with all those efforts - but it's really simple to fix!
5446	change your code and use question marks as your place holders for your prepared variables.
5447	and you have a syntax error in your prepared statement, you cannot use prepared statement and use your pdo to execute the prepared statement $db-&gt;exec should be $requete-&gt;execute
5448	the specific answer to this really depends on what type of database you are using and whether you want to do this validation in php or in the database.
5449	i would lean towards using triggers on the database to check for overlapping times on any insert, this way, if you end up having more than one interface to insert or update these record (e.g.
5450	front end app and a web service) then you don't need to re-write the logic, and you can let the database take care of maintaining the integrity.
5451	your php could then catch the exception thrown on these particular inserts/updates (you are using pdo?)
5452	when the trigger throws an exception.
5453	if you can add more information about what database you are using and also some more info about your table structures (all fields on both affected tables and their data types etc.)
5454	then you can get more specific answers on how the trigger needs to look.
5455	i raised a similar question to this requirement a little while ago to which i received an excellent answer ( https://stackoverflow.com/a/8182800/1053722 ).
5456	this applies if you are using postgresql.
5457	it doesn't work the way you wrote it in the question.
5458	the function _create_days() is called and it returns a value that replaces the function call.
5459	even if the function returns multiple values in an array, the array as a whole is placed in the outer array you want to build.
5460	the solution is to write the function _create_days() to return an array of values and merge this returned array into the outer array using array_merge() for example:
5461	another option is to use a placeholder when you build $header and replace it later with the values returned by _create_days() using the function array_splice() :
5462	in order to make the code flexible i used the function array_search() to find the position of the placeholder in $headers .
5463	this way, if you add or remove elements before '@days@' the code still works without any adjustment.
5464	solution 2: or you can try this library //this solution will convert print_r to json , and work surely.
5465	you can make it a function and replace latest_receipt with a variable to extract your other data.
5466	you need to make a db connection and execute your query, like
5467	the value of table_name is a string, and must therefore be single-quoted in the query.
5468	failing to quote it as a string value, mysql assumes that the supplied unquoted $table is a column identifier.
5469	if $imgid is also a non-numeric value you'll need to quote that one as well.
5470	we assume it has already been properly filtered against sql injection, if it is the result of user input.
5471	i'll note, since the update includes mysqli-specific code, that you really ought to be doing this as a prepared statement rather than a constructed string call to mysqli::query() .
5472	the error message implies that you have attempted to access the mysqli result property num_rows as a method call with () rather than a property.
5473	it's supposed to be: header('content-type: application/rss+xml; charset=utf-8'); , you are missing a semicolon.
5474	your data is already utf-8 which is evidenced by htmlentities working out &amp;theta; when utf-8 is specified.
5475	since your data is already in utf-8, utf8_encode will make it even worse.
5476	this is just supplemental information, your raw data is correct in the first place so nothing need to be done.
5481	if you send the location header, the browser won't load the response (your script) anymore from the current page but directly change to to the new location.what you could do is to add something like &amp;message=failedlogin to the path before sending the location header and then display a message in the previous page.
5482	you could also store it in the session: $_session['loginsuccess']=false; and then check for this value in the previous php page.
5483	you are getting the error message "could not upload for some reason!"
5484	because, you have told your mysql query to show you that, incase the query fails, instead of the asking it for the real error, by doing or die(mysql_error()) here
5485	so, you need to change the above code to adding or die(mysql_error())
5487	after you call htmlentities() , call nl2br() .
5488	the web browser ignores plain newline characters so you need to convert them to &lt;br /&gt; elements to make them show up.
5489	itinerating over the entities is not feasible if you have a couple of thousandth entities - it will keep getting slower and consuming more memory, forcing you to use doctrine batching capabilities, thus making your code more complex (and innefective because after all you need only the ids to make a query - not the whole acl/entities in memory)
5490	what we did to solve this problem is to replace acl.provider service with our own and in that service add a method to make a direct query to the database:
5491	this way now we can use the code to add filters to dql queries:
5492	drawbacks: this methods have to be improved to take into account the complexities of acl inheritance and strategies, but for simple use cases it works fine.
5493	also a cache has to be implemented to avoid the repetitive double query (one with class-level, another with objetc-level)
5494	you can remove all of this because it is redundant.
5498	if you want to disable cookies for php sessions, just call ini_set("session.use_cookies",0);ini_set("session.use_trans_sid",1);
5499	first, no space after $_post , but even then the single = will cause the value of $_post['police'] to be assigned a value of 1 and always return true.
5500	using the double = will just check if the value of $_post['police'] is equal to 1.
5502	so just use post instead of get in &lt;form method&gt;
5504	for example, if, in that post, i could include a script tag, that could be very dangerous for any user reading my post.
5505	to prevent this, you want to use htmlentities :
5506	now, if you want to save my post in your database, you must beware of sql injections.
5508	so, you must basically prevent your user from including quotes and double quotes in his post, or, more precisely, you should escape them.
5509	that really depends on the library you are using, but in the obsolete one i used, that would be written :
5510	now, to mysql, the whole insert into posts(data) values('test'); delete from posts; select * from posts where data = ''); part is a correct string, so what happens is what you want to happen.
5511	basically, that's all you need in almost all the cases.
5512	just remember that, when you feed user data to an interpreter (it can be a web browser, a sql engine or many other things), you should clean that data, and the best way to do it is to use the dedicated functions that should come with the library you are using.
5513	there would be this alternate boolean evaluation approach, but it just goes to show that you have to duplicate something :
5514	str_replace() is able to accept an array as the first two arguments, for example (from the docs):
5516	so the user can watch the cookie values.
5517	it would be the best you encrypt the cookie data so the user can't see the values in plain text.
5518	what you can do with cookies aswell you can read here: php-manual for set_cookie
5519	since you're new to php, it sounds like you want to use a series of simple if statements?
5520	as you picked up on, you may need to use strtolower() so that the strings will match.
5521	please note: you can also add required at the end of each input field.
5522	you are trying to get data in $_get array, but your form method is post, so you have to do this:
5523	the query string values are in the $_get collection where the key is the key being passed ("category") and the value is the value being passed ("novelty"), so you'd reference the value as:
5524	the nested conditionals might get a little unwieldy, but you can organize and arrange the logic however you wish at this point.
5525	meaning mod_courts followed by a number (and only that, thanks to ^$ matching the beginning and end of the string).
5526	no need for the strpos check.
5527	you have two choices here, you can either wrap the entire php block in a isset($_post['submit']) conditional (can be substituted with @jeroen's conditional) or you can submit your form to a separate script for processing.
5529	rather they are marked for collection by the garbage collector.
5531	just let the garbage collector do its job.
5532	there is no $_server["document_root"] present when you call the script from the command line.
5533	that variable (along with many others like request_uri , script_name , http_host ....) is set by apache, which is not running in your case.
5534	to find out whether you are running in the context of a web site or from the command line, use php_sapi_name() .
5535	whar do you wxpect with this: print_r($id); ?
5536	it'a a string content in the response context.
5537	if you need a json response then:
5538	what you do in your code is very dangerous.
5539	you have an sql-injection in your query.
5540	when you use mysqli then use prepared statements.
5541	its not the best way to store images in a blob field.
5542	there could be a lot of problems.
5543	check your database encoding that everything is utf-8.
5544	then check your logs if you get some errors.
5545	its possible that you have an error before the header command.
5547	last possibility &lt;img src="objectimage.php that you have more directory entries and your browser can't find the php file.
5548	by default you should get a comma-separated list of elements in target_employer_id .
5549	you can use the php explode function to turn that into an array in your php logic.
5550	it may be just an oversight but the function in your code is incorrect: it is should not be start_session() but session_start() .
5551	finally you can check apache error log to see if you can find any meaningful error messages.
5552	by default on linux it will be in /var/log/apache2/error.log or /var/log/httpd/error.log
5553	do you want to keep the sub-arrays that have the most items?
5554	your descriptions appear to say this.
5555	aside: if you need the filtered array to have zero-based keys, call array_values() on it.
5556	if everything else is ok, then i am afraid you have a simple typo in your code that is causing you the problem.
5557	you have missed the equal to sign in your code after name.
5558	on a side note, you should not use $_request['name'] but instead use $_post['name'] when the form method is post.
5561	there is no sense in fetching the same data twice.
5562	you did it wrong with mysqli and you shouldn't repeat it with pdo.
5563	use a dom parser to get the information you need (the date div contents); explode on the space character; (int) the first number and rtrim the month to get rid of the comma.
5564	you can use strip_tags in php to get the date and then use strtotime to normalize the date.
5565	after setting session $_session['user'] , the content of the if (isset($_session['user'])) will be sent to ajax too.
5568	the result array always contains the entire matched expression in its 0 index and all capture groups in the following indices starting at 1 .
5569	so in your case you're just seeing the very first hello twice due to this.
5571	you should be able to configure the timeout using pdo.
5572	despite you not asking a distinct question and rather just asking for a code review (much better to do this on codereview ) here is my opinion.
5573	firstly like napster3world said you really need to start your session or nothing of much use will come of your error reporting.
5574	secondly you are wide open for all sort of malicious attacks this kinda undermining having a secure login.
5575	this is a tut by the excellent jeffrey way on using the pdo api and this tut looks at more detailed ways to secure your forms.
5576	both are wrong if you want to get the values from $_post .
5577	you need to send key-value pairs to the server and then you can access them in $_post by these keys.
5579	you do not close your if (isset($_post ['username'])) { condition with }
5581	so if you don't upload any file, $_files["file"]["name"] will be an empty string, and file_exists() function will check whether this directory ../employee/ exists or not, which does exist in your case.
5582	and this is the reason why your file validation is failing.
5584	and this is why you shouldn't use mysql_* functions .
5585	though you have to remove a space from team name key in order to use named placeholders
5586	also, c# arrays are indexed starting at 0. you can change the starting index of arrays in php, but you can't in c#.
5587	perhaps you do wish to take the 2nd and 3rd items, but keep it in mind.
5588	here's how i would do it.
5589	there's no reason to use "complicated" preg_match trickery when you can use explode() .
5590	fourth: i wouldn't recommend using mysqli anymore.
5591	you should switch to pdo .
5592	as i understand it, your function tries to find out, what fields were in the select clause of the query to build the result array.
5593	that is only necessary if you want to allow your database layer it to execute arbitrary queries which is also not a good idea.
5594	when i have to use classic sql in an application, i predefine every query that i need in some method or function.
5595	that function then will know exactly what field it has to read from the result set.
5596	so there's no need to parse the sql code.
5597	however, mostly i try to avoid sql by using things like doctrine orm .
5598	sql is just too prone to errors...
5599	it may open the door to code injection.
5600	it makes code unreadable to humans and unparsable to an ide it's nearly impossible to debug code that uses eval() not really a problem of eval() itself, but when you have to use it, that's a sign of a flawed design.
5601	one other approach to your problem would be to build the sql statement inside your query class (arguments would be field names, the table, the where constraints,... ) and to develop subclasses for different query types.
5602	this would elimiate the need to parse the statement.above this layer you would put a bunch of dao classes to do the actual work.
5603	but wait: others have done this... (maybe a lot of others to be specific).
5604	so using pdo, doctrine, propel or even a bigger library like zendframework (active record pattern there...) would be the most valuable and stable option.
5605	if you, however, want to learn something about software architecture and oo systems.
5606	go ahead and build your own, if you do it well you can switch to another db layer as soon as your system grows (version 2.x :-) ).
5607	using empty() instead of isset() takes care of your third scenario, where the parameter is present but not defined.
5608	also, in if ($hop = " ") the = would need to be changed to == .
5609	the way you have it, the if-statement will always run, no matter what $hop equaled.
5611	to get the equivalent of a short-circuit || from javascript in php, you can use ?
5612	: (the so-called "elvis operator" - x ?
5613	: y is a shorthand for x ?
5614	however i think there is a logic error in your code anyway, because if you have e_notice error reporting on, php will complain anyway if $days['value'] is set and $dy['value'] isn't, because you are still accessing $dy['value'] even if isset($dy['value']) == false .
5615	so you would need to use, for example:
5616	(assuming you also want to skip a value if it's falsy - according to how you are using the || it looks like it.)
5617	if you don't care about notice errors at all (discouraged!)
5618	i believe that because you are using mysqli_connect that you need to use the mysqli_query($conn,$sql) notation.
5619	if you want an array of arrays, you can use
5620	if you want it to work.
5621	since you're checking strlen of a boolean, it will never match and always go to the explode .
5622	there are a couple issues with using array_merge or the + operator with arrays assuming there is a defined offset but the value happens to be null.
5623	key used only once per array (easier to maintain).
5624	selects first valid input (eg first valid number or e-mail).
5625	does not trigger undefined index notice.
5626	no need to use @ .
5627	if you submit the form and print_r($_post) you will get the follow array:
5628	as you see, there is no [field1] or [field2] in the response!
5629	for instance, if you are interested in the select tag and the textarea tag, you should whether update you html code or you php code.
5631	you can't use mysqli and mysql at a same time.. mysqli is a class... so first change that things...
5632	array_shift is working the way you expect it to, though.
5633	you can add a print_r($arr); inside your function after you do the array_shift to see the shortened version of the array within the function scope.
5634	it just won't affect the original array unless you pass it by reference.
5635	as it stands, your $es array is an indexed one, but you're trying to search in its keys - which are simple numbers (0, 1, 2, 3...).
5636	first, try to do this: var_dump("&lt;pre&gt;", $lang); die(); and see what are you actually getting in $lang .
5637	xpath() returns an array, even if only one element matches.
5638	so [0] is used to get the first item in that array, which is the element we want to delete.
5639	the simplexmlelement returned from $node[0] represents a collection of &lt;event&gt; elements (but if you access elements/attributes on it then the values from the first in the collection is used).
5640	so, we use [0] to get at the actual simplexmlelement that we want to delete, which is the first in this magical collection.
5641	currently your primary concern should be your socket server architecture.
5642	forking a process for each client is super heavy.
5643	afaik an average pc can tolerate around 2000 threads and it's not going to work fast.
5644	switching between processes means that cpu should save its state in memory, and if you have enormous amount of processes, cpu will be busy with memory io and will have little time for actually doing stuff.
5645	you may want to look at apache for inspiration.
5646	in apache they use a fixed amount of worker processes/threads, each process/thread working with multiple clients via select function and sockets in a non-blocking mode.
5647	this is a far more robust approach.
5648	regarding database io, i would spawn a process/thread that would be the sole owner of database connections.
5649	worker processes would communicate with the db io process using ipc (in case of processes) or lock-free queues (in case of threads).
5650	this approach makes you independent of pdo implementation details (if it is thread safe or does it spawn connections etc).
5651	basically you want to have a javascript function like this:
5652	there is a minor error in the sql statement for deleting the record - there are spurious periods .
5653	in addition to the misuse of quotes and periods in the sql there was another in the loop that outputs the contents of the table.
5655	i'm not sure that a mysqli result will survive a mysqli->close() so i've retrieved the data from the $result into an array and returned that.
5656	you might want to test this.
5657	however, you can still use x-forwarded-for and cf-connecting-ip .
5658	both would be available in the $_server super-global.
5659	this is a simple guess, i haven't really used these librairies (except for smarty) in a while, but it might be that one of the libraries (facebook or gettext) also define a __autoload function that gets called instead of your own.
5660	as a follow up regarding accessing put and delete data, currently there is no superglobal built in to php to access this data directly.
5661	as the data is file data, which can be rather large, the usefulness and efficiency of reading the entire file contents in a typical assignment statement $variable = $_put['file']; is questionable.
5662	instead, it should be read in chunks.
5663	as such, the usage is consistent with reading from any other file input resource.
5664	hand wringing aside (you can leave comments, after all), there really isn't a compelling reason not to do it like this, but again, there isn't a compelling reason to do it, either.
5665	why not put the values in a $_session key if you want them global?
5666	or make a static class to access the put/delete values through?
5667	with all the other optional approaches, i think that overwriting $_post , while it won't make your server explode, is the most likely to cause you a headache down the road.
5668	please note: this is extremely unsafe!
5670	my example above, dis-regards security, and simply is to demonstrate my point.
5671	get and post data, are user variables.
5672	a malicious user could put bad code in the url (ie ?name3=&lt;badcode&gt; ) and it would be printed on the page, well in the source code, which they could easily pop out of.
5675	mysql has been killed for a while now..
5676	you are vulnerable to sql injections, would could easily allow a malicious attacker to add/edit/view/delete data in your database.
5677	the problem is, you have $package (which is raw data from post) and $id4 and $name4 (which is raw data from get) in your sql query.
5679	it's confusing, i don't know what the get variable is called name3 but you assign it the variable $name4.. whoever (even you) comes along later on will be lost in your code.
5680	i removed your html formatting from the form.
5681	you had div tags that didn't match up.. i can't see your whole code, but it looks like you have a bunch of div's that are messed up (ie: not closed where they should be).
5682	i also added mysql_real_escape_string() to the passed variables, and htmlspecialchars() to the get variables echo'd in the hidden fields of your form.
5683	you might be able to make better sense of your code and troubleshoot errors, if you wrote your code a bit cleaner.
5684	not trying to bash you :) proper indentation, spacing, and formatting go a long way.
5685	it makes it easier on your eyes, and on yourself, in times like these..
5686	i left your &lt;script&gt; tags because i assumed there was a reason your wanted to popup a message box.. i would just use header('location: /path/to/where.php'); and pass your error message through a session variable or something, like an array of errors, which you get, clear, and show on the page the errors.
5687	list all the extension you would like to exclude/include into a variable.then check each flies extension and skip if they are into above list.
5688	can be done using in_array as shown above by 'debflav'.
5689	$result2 in $result2->fetch_assoc(); is not the correct variable, it should be
5690	by the way you have to delete the punctuation marks in order to find the words in your database (i think) one of your first lines should (before the explode) be similar to this:
5692	the print_r function has a boolean option that allows it to be returned as a string variable, rather than print it to the screen.
5693	this will allow you to collect the value, rather than printing it directly to the output buffer (e.g.
5694	this would prove useful in that you can now manipulate the value as needed or desired.
5695	that last option is an integer bit flag (i don't know it's actual value) that tells php to add the new data to the end of the file instead of replacing the current contents with the new data.
5696	the use of both of these options would look like this in your original code:
5697	of course, it looks like you don't really need to manipulate the value of $output in your script, but in order to illustrate the usefulness of the option in print_r, i put in a line of code that replaces linux newlines (\n) with windows newlines (\r\n), so that programs like notepad can properly display the text (php's print_r function only places \n newlines in the output, even on windows machines, which is why i found this post.
5698	i was trying to find a way to correct that behavior).
5699	that may not prove useful to you at this time, but it may, later, and may prove useful to others who come across this question.
5700	you should almost never use addslashes .
5701	most times when it might be useful, there is a more specific general escaping function available (or, occasionally, one needs to be written).
5703	addslashes is unsafe for sql and you should never use it in that context.
5704	use parameterized queries instead as quentin suggests.
5705	consider adding session_regenerate_id() after the session_start.
5706	this will prevent session cookie stealing (phpsessid in your cookies' id is regenerated on each pageload if you use the above function), which is probably what is happening (apart from the exit problem on the answer above)
5710	if you use pdo or mysqli you can use a prepared statement to help you with that:
5711	you need to use putenv() ( http://php.net/manual/en/function.putenv.php ) instead of trying to use any of the methods you have used ( $_env or $_server ).
5712	this doesn't seem to be possible in the way you're trying to do it.
5713	when a file gets placed into the $_post variable, it's given a temporary name for a file that only lives a very short amount of time (probably only reliably until the end of the initial page request, and then php will clean it up).
5714	this won't work for an &lt;img&gt; tag because when the browser loads on the next page, the browser is going to perform a separate request for that file after the initial page load, and it won't be there anymore.
5715	the correct way to do this is to use move_uploaded_file() to permanently save the file to disk using the tmp_name variable provided in $_post .
5716	this means you'll have to come up with a way of tracking it and potentially cleaning it up if the user decides not to use it.
5717	i wish your approach could work.
5718	it would be very convenient :)
5720	it does not check whether the variable is containing an empty string!
5721	using isset() on $_post['key'] will return true in this circumstance, because the variable itself has been set and passed through from the form.
5722	because you're assigning the value of $_post['fname'] to the $fname variable, the value will always been assigned, even if it's empty.
5724	this is not something that can be done through php alone.
5725	the php script can only "see" the information which is posted (the value for the selected option that is posted).
5726	you can use javascript to alter a hidden input field with the text contents of a selected option , and this will be included in the $_post array:
5727	this will make the $_post['test_text'] available with the selected index (but you should also force the onchange() function when the page loads so that it will be populated even if the user leaves the select field at the default value.
5728	remember array_push — push one or more elements onto the end of array and not create an index.
5729	you'll need to do some extra work to get the proper formatting, though
5730	i just figured out how you can do that by using the parse_str php built-in function.
5731	the parse_str should explode query arguments both on ; and &amp; .
5732	this shouldn't affect in any way the filling of $_get and $_post since they are loaded before your code execution.
5733	if you want to be sure you don't affect the behavior of any other function calling parse_str , you could use a function like this:
5734	i just run a test to compare the plain-php splitting vs parse_str() , on an array of 10000 query strings each made of 500 arguments.
5735	the my_parse_str() above took ~0.952 seconds, while the pure-php one ( parsequerystring() ) took ~4.25 seconds.
5736	it would require a larger set of data to test exactly how much it is faster, but it's pretty clear which one wins :) (if you want the test data + scripts, i'll upload them somewhere, since the data file is 125mb ).
5737	the reason why you also have to encode quotes is becuase you don't need &lt;> to exploit some xss.
5738	for instance this is vulnerable to xss:
5739	you don't need &lt;> to execute javascript in this case because you can use onmouseover, here is an example attack:
5740	e-mail is a bit different, javascript shouldn't be executed by the mail client, and if it is then your site isn't affected due to the same origin policy.
5741	but to be on the safe side i would still use htmlspecialchars($var,ent_quotes); .
5742	however, php's mail() function can succumb to a different type of vulnerability, its called crlf injection.
5743	here is an example vulnerability against php-nuke .
5744	if you have a function call like this: mail($fmail, $subject, $message, $header); then you must make sure that a user cannot inject \r\n into $header.
5745	well you can first create rules for certain fields, like email the only thing it should consist of is letters, numbers, @ (at-symbol?
5746	what is it really called), and a period, so you cannot form an xss out of that so no need to waste resources using htmlentities() or htmlspeicalchars() .
5747	you don't show how those selections are gathered.
5748	i'll assume you have them in an array, $cats .
5749	with this you can then use implode() :
5750	the best approach is to explode the string and produce a query that looks like:
5751	as juergen points out, you can use find_in_set() for this purpose.
5752	that solution cannot take advantages of an index on id .
5753	but if you then want to use that id to retrieve from db or anything, you're gonna have to explode that apart...like so....to get each piece.
5754	but i would avoid all that part, by just assigning the id to the value only...like so..
5755	it's certainly unconventional to use the combination of id and name for the option values, but it should work.
5756	the problem is presents is that you now have a composite string which needs to be parsed in order to be useful.
5757	generally what one would do is just use the id as the value and the name as the display.
5758	all you should need to use it throughout the code is the id.
5759	you have to use asort since $array[0] is a plain array.
5760	the code creates variables from data in the $_post array.
5761	the names of the variables are taken from the keys of the $_post array.
5762	naming variables dynamically) variable variables .
5763	this is usually a bad idea, because you do not control, which keys are present in the $_post array, and thus, which variables are created.
5764	the user of your website controls this.
5765	a malicious user might name the post variables in such a way that they overwrite variables that you intended for different purposes.
5766	the book suggests to allow keys in the $_post array to overwrite variables in a controlled manner .
5767	that's what $expected = array('carmodel', 'year', 'bodystyle') is for.
5768	this and the following code only creates the variables $carmodel , $year and $bodystyle .
5769	if, for example, a user posts current_user_has_admin_rights=1 to you application, a variable $current_user_has_admin_rights with a value of 1 will not be created.
5770	$_post[input2] is wrong, but it should work.
5771	that's because input2 is recognized as constant, not as string (what it should be).
5772	change that into $_post['input2'] (see also php manual ).
5773	you haven't closed some of the brackets.
5774	pay attention to the legibility of your code to avoid this!
5775	$_post[input2] doesn't check if the currently processed input is input2 .
5776	you should do this with $key .
5777	i do know there is no reason to use it because you can use __dir__ (or dirname(__file__) on older versions of php).
5779	you can keep the unit value in session and compare with current value.
5780	if changed, then reset the $counter .
5781	then update the session value with current value for the next cycle of test.
5782	ok, here is a simple login that is not meant for real world usage.
5783	please read the comments included in the code to see what i have to say about each.
5784	doing logins is quite tricky for a number of reasons, so this example is not meant to demonstrate a real world working codebase, but a very simple username/password check.
5785	the security issues associated with a more sophisticated use are perhaps beyond this answer, but the below code is the way i would interpret what you have posted above, without getting to detailed (to the point of possibly making it hard to understand the simplest steps occurring).
5786	let me know if you have any questions.
5787	to see the form in action, check:
5788	you could break it down into multiple strings for the purposes of using the str_replace.
5789	split the strings on the [code] and [/code] tags - saving the code box in a separate string.
5790	make note of where it went in the original string somehow.
5791	then use str_replace on the original string and do whatever parsing you like on the code box string.
5792	finally reinsert the parsed code boxes and display.
5793	seems simple enough, it's complaining that the offset you're giving for the start of the search (8) is not contained within the string.
5794	you can see this in action if you head on over to an online php tester site and enter:
5795	"enough sanitization" thoroughly depends on what environment you're talking about.
5799	that should be all you need, unless you have special requirements.
5801	sanitization is a worthy goal, and if you can keep your contexts separate, you'll run into fewer problems with data manipulation between them.
5802	take a look at data property of settings object that you pass to your ajax here .
5803	if you use it, you can make your js code much simpler:
5805	otherwise your code is opened for sql injections.you can do, at least, like this:
5807	from the command line there is no $_server['document_root'] .
5808	that one is only available from the http-server (apache).
5809	try cd to the current path by using __dir__ in the start of your script
5810	most likely at one point you're passing an empty string to your function.
5811	offset in the strpos call indicates from which character it should start searching for $needle .
5812	it's 0-based, so if you want to start from the absolute beginning, you either set it to 0 or omit it (it defaults to 0.)
5813	as mentioned before, the offset is 0-based, so if $needle you're searching for is exactly in the beginning of $haystack , it cannot be found if $offset is 1. with $offset = 1 it would be as if you're searching in a string that looks like this: 'otmail test test test test' .
5815	to answer your second question - you have two issues in your code.
5816	second of all, with "hotmail" being at position 0, your strposab() function will return a value of int(0), which is a non-boolean value that when used in a boolean expression evaluates to false.
5817	therefore, you need to use the !== operator in order to avoid type juggling.
5818	so the correct if statement to use will be:
5819	edit : the comments below are true.
5820	empty should be used for empty strings, not numeric values, float values or a zero in a string​​.
5821	however, here's a function if you need to accept these as valid values:
5823	the echo s will send data to the client so that you are not able to call header() , setcookie() etc.
5824	please have a look at: setcookie, cannot modify header information - headers already sent
5825	the last_insert_id() is generated at the end of each successful query from the same connection handle.
5826	therefore your example code will not give you the result you are looking for.
5827	to receive the result you seek, using the same format you used in your example (which i don't recommend for risk of sql injection - use mysqli instead) you can do so like:
5828	you can set name[1] (or name[] ) as name of variable instead of name in this case in php you will get array $_post['name']
5829	alternatively, if you're numbering them you can use a foreach on the $_post variable:
5830	but yes, there is a better way of passing variables through jquery:
5831	and you will be able to count specific parts of the data like that (in php):
5832	array_push() could be used if the array was a numeric array (i.e.
5833	the keys were integers - e.g.
5834	0 =&gt; 'cat', 1 =&gt; 'dog' .
5835	but in this case, the array is an associative array .
5836	one way to set the desired key, sandbox , is to set the array key by specifying it in bracket notation:
5837	this is necessary because the other keys of the array are not
5838	you have to make few changes in your code, which will help you achieve your expected output.
5839	$globals not storing data between http-queries, you should use session for storing data between requests
5840	in your form you need check, if variable is defined:
5841	do a var_dump() of the array that you feed to the -&gt;execute() statement, that will likely show more than a simple print_r()
5842	the issue is that the older files are encoded in unicode and the new files are simple ascii single byte encoded.
5843	you have used $_session['user'] for two purposes, you can rename any one of the $_session array
5846	in php, isset() is a special form, not a function; when you call isset($ary[$index]) , $ary itself doesn't have to be set first.
5847	even with e_strict , the call won't generate a warning, because isset doesn't actually try to access $ary[$index] ; it gets as far as determining that $ary is not set and returns false .
5848	so you don't need to check the array first in order to apply isset to an element.
5849	your question indicates that you know this already, and are wondering if there's a reason why you would do it anyway.
5851	in your code, $row is an array .
5852	if that is not possible, you can replace the pdo functions for mysqli* functions.
5853	rinse, lather, repeat for the rest of the class methods
5854	answer to your question "if you are able to do using array" is yes.
5855	you should read documentation here : http://php.net/manual/en/function.str-replace.php
5856	also, if you just want to encode url you should try to use : http://in1.php.net/manual/en/function.urlencode.php or http://in1.php.net/manual/en/function.htmlentities.php
5857	it might be inefficient to construct the array on every function call.
5858	you might want to define it in your main function and just pass it to your fulltohalf() function, or not bother with a function at all.
5859	as always in these cases, i will add that you should avoid using mysql in favour of mysqli (improved).
5860	if converting from one character set to another, i would use the php functions, rather than reinventing the wheel.
5861	instead of using preg_replace i think in this instance it's better to use str_replace .
5862	we will search a string for the keys of the queue array and replace them with their corresponding values.
5863	this is also a very readable and easy solution.
5864	the whole point of the singleton is to get the same object every time so unsetting $searcher doesn't work.
5865	you can use $searcher->removeattributetoselect($k) to remove each attribute filter.
5866	strpos will return 0 if the needle is at the very start of the haystack.
5867	but 0 evaluates to boolean false , so your if condition fails.
5868	you need to compare to false , which is the return value if the needle isn't found at all:
5869	the explode takes the delimited value off so you would need to re-append it.
5871	so better turn to pdo or sqli
5872	mysql_fetch_object() is similar to mysql_fetch_array() , with one difference - an object is returned, instead of an array.
5873	indirectly, that means that you can only access the data by the field names, and not by their offsets (numbers are illegal property names).
5874	you can get the last inserted id using mysql_insert_id() before the insert query and then you can increment it and save it as image name.
5877	in your case you may use any one of following:
5878	$_session is array you can use its index like $_session['indexname'] detail
5879	therefore your code fails on line 20 (the if) as it tries to read the 'flavor' cookie.
5880	then it goes into the else and fails for all variables.
5881	add the isset and you should see the content of the if as long as no cookies are set
5882	you check to see whether $_post['name'] is set and whether the value of $_post['flavor'] and $_post['scoop'] is true .
5883	which in your case it is not.
5884	and this is also why the echo test, that i asked you to do in the comment section is not working, since the condition of the if statement is not met.
5885	instead all you need to do is perform three separate insert into queries, i.e.
5886	and bind the inputs you want like you did before.
5887	all you'll need to do is add extra input fields to your form to get the extra data you want.
5888	if $comments contains \n\n\n then after replacement, it will be \n\n resulting in an empty element at explode.
5889	another easy way for an empty string to be part of the explode output would be an input string with a line break at the end:
5890	you need to ass the value yo your submit button:
5891	check post_max_size in your php settings and compare it with the data size you are posting.
5892	use fiddler to make an http request and check what it returns.
5893	use print_r($_post); on the top of the save.php , to check what you are getting in it.
5894	use tool like firebug to check what jquery has posted.
5895	you should also verify the json object on client side that you are posting.
5896	json.stringify(some_object); try posting some basic sample data { "data1":1, "data2":2, "data3":3, "data4":4, "data5":5 , "data6":6 }
5897	most probably you are sending to much data or likely data is invalid!
5898	you can verify the value of the content-length header being received by the php.
5899	this value ought to have been calculated client side when running the post query.
5900	if it does not match, that's your error then and there.
5901	and that's all the diagnostics you need - if the content-length does not match the post data, reject the post as invalid; no need of extra parameters (computing the post data length might be a hassle, though).
5902	also, you might want to investigate why does php, while decoding the post and therefore being able to verify its length, nonetheless seems to accept a wrong length (maybe the information needed to detect the error is somewhere among the $_server variables?
5903	if it does match though, and still data isn't arriving (i.e., the content-length is smaller, and correctly describes the cut-off post), then it is proof that the post was inspected after the cut-off, and therefore either the error is in the browser (or, unlikely, in jquery) or there is something between the browser and the server (a proxy?)
5904	that is receiving an incomplete query (with content-length > actual length) and is incorrectly rewriting it, making it appear "correct" to the server, instead of rejecting it out of hand.
5905	it occurred to me then that content length might well be off by one or two in case the request ended with carriage return, and what carriage return - lf?
5906	however, when i added simple html to be able to post it from a browser
5907	i was able to verify that in firefox (latest), ie8, chrome (latest), all running on xp pro sp3, the value of the content-length is the same as the strlen of php://input .
5908	the only problem is that php://input is not always available even for post data.
5909	if the error is at the network level , i.e., the post is prepared and supplied with a correct content-length, but the interruption makes it so that the whole data is cut off as this comment by horen seems to indicate:
5910	on the other hand if the problem is in jquery, i.e.
5911	somehow the interruption prevents jquery from assembling the full post, and yet the post is made up, the content-length calculated of the incomplete data, and the packet sent off -- then my workaround can't possibly work, and the "telltale" extra field must be used, or... perhaps the .post function in jquery might be extended to include a crc field?
5912	so the only thing that can go wrong is that jquery only gathers part of the data and then makes a post request.
5913	using just $.post('save.php', data) as you mentioned, that wont happen.
5914	its either working to gather the data or its waiting for a response from the server.
5915	if you switch sites during the gathering, there wont be a request.
5916	and if you switch after the request has been made and you move away quickly, before all data has been transmitted, the apache server will see it as half a request and wont invoke php.
5917	is it possible that you are using seperate pages for succesfull and partial requests?
5918	because php does only add the first 1000 elements to $_post and perhaps the failed requests have more then data1000=data elements?
5919	so there wont be an eof param.
5920	is it possible that you are gathering the data in a global var in javascript and have an onbeforeunload method that sends data as well?
5921	because then there might only be half the data in the post.
5922	can you share some information on the data you are seding?
5923	are there a lot of small elements (like data1 till data10000) or a few large once?
5924	is it always the same element that you receive last?
5925	like always data6 as you mention?
5926	because if it is, the chances of a failed attempt always at the exact same datan field would be very slim.
5927	you must adopt it to your table fields, but with this logic you will have an array where by the third column (in my example), you can know if it is connector, adapter or component found, then generate proper links or do other actions with this data.
5928	this is because you're using a pre- increment rather than a post-increment.
5929	if $id_timeslot is 1 before entering the loop, the value of ++$id_timeslot is 2, so the first generated query is:
5931	compare the above statement with your own.
5932	if id_timeslot isn't a unique id, then you can simply switch to post-increment.
5933	depending on where the values for $id_member, $b_ref $id_doctor originate, your script could be open to sql injection .
5935	mysqli supports them, as does pdo , which is simpler to use.
5936	new code should use pdo, and old code should get updated over time.
5937	the body of your post request is encoded as application/json instead of application/x-www-form-urlencoded.
5938	(assuming that transaction is not a complex data type (like an array or object).
5939	additionally, the body variable is undefined .
5940	you should either use a string (to make it a selector: "body" ) or pass the body element directly: document.body .
5943	if $_session['area'] is not set, php won't bother to test if $_session['area'] == $area because it doesn't need to (as the 1st condition is false anyway), it will try what is after the or
5944	here i first get the file into an array with file() where every line is one array element.
5945	there i ignore new line characters at the end of each line and skip empty lines.
5946	at the end i simply go through all innerarrays again and array_combine() the values with the $header array.
5947	using union , you can do 2 queries to get the results you want
5950	see also mysql: choosing an api guide and related faq for more information.
5951	for starters, the pdo constructor throws an exception if there is an error.
5952	it does not return false .
5953	secondly, as you are using sqlite, provided your dbase directory is writeable by the script, your connection attempt will create an empty database.
5954	you are using two different connections when you use mysqli and mysql.
5955	use the one or the other.
5956	(only the connection (mysql in this case) who has locked can write.)
5957	i don't know much about codeigniter, but it's php, so shouldn't $_get still be available to you?
5958	you could format your url the same way google does: mysite.com/search?q=keyword and pull the data out with $_get['q'] .
5959	the first thing you need to do is define the actual pattern of words we're removing and put it into an array.
5960	obviously + and - are there, and i guess / as well, and anything with a number?
5961	the fact that the numeric characters guarantee disqualification means that if you want to, you don't even have to use an ounce of regex, you can just stick them into the array by hand even.
5962	if the value of your exploded array doesn't contain any of the patterns you've already used, toss it into a new array.
5963	trim() and stick a period on the end if you want.
5964	you forgot to call setcookie() .
5965	then it'll parse it (you can test it using parse_str() ) and place in $_post or $_get arrays (depends on form method).
5966	in this step all [] occurences will be expanded to arrays.
5967	and yes, you can put array in array.
5969	you can't access $_session variables before calling session_start .
5970	also, your serializing of the data is probably pointless.
5971	serializing would be used if you wanted to dump the session state to a file or to a database or something.
5972	you can implement this in two ways using mysql, the first one being a simple select from type of query:
5973	you can also do this by performing a check in the information_schema using the following statement:
5974	lastly, you can call show tables like '&lt;table name&gt;'; and parse the results for a match, similar to the concept in the first example.
5975	since you're using everything in one file &lt;form method="post"&gt; is what gave it away, since the action defaults to "self" if omitted, therefore you need to use a conditional isset() or !empty() .
5976	even if you were to split those up into two seperate files, it would be best to still use a conditional isset() or !empty() .
5977	it is used to check if a variable is set or not.
5978	'null' is the unique thing that uninitialized variables refer to.
5979	you can set a variable to refer to null.
5980	there is also the 'unset' state meaning the variable doesn't exist at all.
5981	you can check that via the isset() function .
5982	most often used to check if an element of array exists and is, for example, a way to see if $_get['op'] has received a querystring param.
5983	you can also make a variable unset (remove an element of an array) via the unset() function .
5984	there is also a function empty() which will check if a variable is either null, false, 0, or an empty string
5985	please do consider changing how the data is stored in the first place.
5986	my sympathies if you have no control over that :(
5987	$_session['id'] is a session variable named 'id'.
5988	and they are not the same.
5989	select id from users where id='{$_session['id']}'; does not return the same value as select id from users where id='{session_id()}'; you need either to insert $_session['id'] or select record with id == session_id() .
5990	the simple version isn't going to work for you because your array is so large.
5991	it requires no array modification but may need to iterate the entire array, and that's a deal breaker.
5992	this approach is brilliant because isset() is very fast and the maximum number of isset() calls in the while loop can only be as many as the largest weight (not to be confused with limit) in the array.
5993	make sure the varaible $candname in your query is correct.
5994	my best guest from you code is, you proberbly were supose to use $_post['candi_s_by_code'] instead of $candname try this
5995	if you dont want to change your select query try to add single quotatoion '$candname' around your php variable in select query.
5996	this check whether or not $getter() exists (if it does not exist, it's assumed that the property also does not exist) and returns a non-null value.
5997	so null will cause it to return false, as you would expect after reading the php manual for isset() .
5998	you don't need to escape \ the comma.
5999	a better approach might be to construct an array and then implode() :
6000	you can use a union to get the data from both tables.
6001	just be sure that you are returning matching columns in both queries.
6002	so if in your first query you have the following data types int, text, varchar, decimal, decimal you will need to make sure that the second query gets those same column types otherwise the db will have a hissyfit about it.
6003	you can use an order by clause on the end to sort the data from both queries nicely.
6004	edit: you can group_concat() fields in them if you want, and yes, you will be able to do an explode() on them in your php.
6005	the default group_concat delimiter is a , (comma) so if you have commas in your fields, you will need to change it to something so that your explode works nicely.
6006	you will need a bit javascript to manipulate your modal depends on which button you clicked.
6007	i think this solution will help you.
6008	first, i supposed that there is a form inside your modal and you will submit it with your selected id .
6009	the modal body should be like this:
6010	now, in the php file declared inside the form in the modal - which receives your post data, you can var_dump the $_post .
6011	in your form you have &lt;select name='test[$id]'&gt; (one for each item), then when you submit the form you are getting $tests = $_post["test"]; you don't need to specify the index in the form and can simply do &lt;select name='test[]'&gt; , you can eventually add a hidden field with the id with &lt;input type="hidden" value="$id"/&gt; .
6012	the second part is the verification wich is not good at the moment; you can simply check if the itemalready exist in the database with a query
6013	you are not checking it correctly.
6014	you have to check if the entry in match_select exists for the user_id and the match_id concerned.
6015	otherwise, $match would always be equal to the match_id field of the last inserted row in your database :
6017	it sounds like you simply want to mirror the behavior of the s3 demo on fineuploader.com.
6018	so, the piece you are apparently having trouble with is the part of the demo that allows you to view/download the file you have uploaded.
6019	my guess is that you are not setting the param1 and param2 environment variables.
6020	you should really have a look at how the $_server super global works in the php documentation.
6021	this code, as it stands, expects you to have a system environment variable named param1 that holds the public aws key associated with the iam user you should have created for your server (not your client) to use.
6022	the param2 system environment variable should be set to the secret key for this same user.
6023	you can either set these environment variables, or set the associated $serverpublickey and $serverprivatekey php globals to the server-side iam user's public and secret keys, respectively.
6024	the $serverpublickey and $serverprivatekey variables should not be the same keys associated with the iam user you created for client-side tasks.
6025	you should have created a different iam user with permissions appropriate for server-side tasks.
6026	for example, if you want to support the delete file feature, you would want to have an iam user with the "s3:deleteobject" permission.
6027	this user should be restricted to server-side tasks only for security reasons.
6028	in your case, your server-side iam user must have "s3:getobject" permission on your bucket.
6029	this permission is required in order to get objects from your bucket.
6030	the safest approach is to only give this permission to your server-side iam user.
6031	you're probably asking: "if my client-side user can't read object from my bucket, how do i allow the file to be downloaded client-side?"
6032	well, one option is to set the acl option in fine uploader to "public-read" and then construct a url client-side using this convention: " http://mybucket.s3.amazonaws.com/objectkey ".
6033	this is not the way the s3 demo on fineuploader.com work.
6034	i didn't want to give users unlimited access to files they uploaded into fine uploader's s3 bucket, so i left the acl to "private" (the default value), i only gave my server-side iam user "s3:getobject" permission to the fine uploader s3 bucket, and i have the server return a "time-bombed" signed url to the associated object in the bucket.
6035	the url returned by the server contains an expiration parameter that only allows it to be used for 15 minutes.
6036	any attempts to change that expiration parameter in the query string will invalidate the signature and the request will fail.
6037	the gettemplink function in the php example will generate a time-bombed signed url that is returned in the response to fine uploader's uploadsucess.endpoint post request.
6038	you can access this value by contributing a complete event handler .
6039	the responsejson object parameter passed into your callback will contain a templink property that will contain the signed url.
6040	you can then generate an anchor with the src attribute set to the value of this property.
6041	you need to make first value of exploded array as key and second as its value.
6042	as suggested, some code and more details would be helpful.
6043	but if you have multiple form fields on the same page, and depending on the action, you want to submit different sets of those fields, then just wrap them in different &lt;form&gt;&lt;/form&gt; elements.
6044	a post submit only submits the form fields contained with that particular block.
6045	first, you probably want to use implode , and not explode, to construct your $tofield variable ;-)
6046	you then inject this in the form ; something like this would probably do :
6047	then, on the php script that receives the data from the form when it's been submitted, you'd use explode to extract the data as an array, from the string :
6048	also, if it's always going to be an integer, you could use:
6049	but you would need to be careful with things that evaluate to 0 and check for it in your if statement:
6050	for instance, your php code is using get , but your code here is not including the gid in the action attribute.
6051	(also, you really should use two different forms for this, imo.)
6052	however, your comment seems to suggest that multiple checkboxes can be checked to rename a group?
6053	but then you don't have a form tag around it:
6054	the challenge that you're going to have here is that you need to loop through that $_post['gid'] array, whereas the first single group rename you key off of the gid in the get .
6055	i would suggest organizing your code into a group / groups object(s) and use a model/view/controller (mvc) pattern to organize your code.
6056	are you saying that you can't get $_get['gid'] after you submit the group-in form?
6057	because if that's the case, what you have to do is create a hidden input with your gid value so it can be available in $_post .
6058	without putting much thought to what you're trying to do, i can tell you that you simply can't have code using $_get and $_post simultaneously.
6059	you need to quote each individual value of the array:
6060	as you can see, if(!empty($x)) is equal to if($x) and if(!is_null($x)) is equal to if(isset($x)) .
6061	as far as if $data != '' goes, it is true if $data is not null , '' , false or 0 (loose comparison).
6062	true if the variable is set.
6063	the variable can be set to blank and this would be true.
6064	true if the variable is set and does not equal empty string, 0, '0', null, false, blank array.
6065	it is clearly not the same as isset .
6066	if the variable does not equal an empty string, if the variable isnt set its an empty string.
6067	if the variable coerces to true, if the variable isnt set it will coerce to false.
6068	if ($data != '') { this is a string type safe of checking whether $data is not equal to an empty string
6069	if ($data) { this is a looking for true or false (aka: 0 or 1)
6071	use pdo or mysqli with prepared statements instead.
6072	you are currently wide open to sql injection attacks .
6073	if it is in fact the column's name s_no.
6074	, then you will need to add the dot for the other two queries.
6075	your present code is open to sql injection .
6080	also note that somethings you must escape (if user entered) are image locations etc
6081	then you might be accidentally deleting a user if you are logged in as admin.
6082	of course, hopefully that sort of deletion is done with a post, but it can still be circumvented.
6083	you can make it harder for an attacker by enforcing all data changing methods to be with a post, and you can make it almost impossible by generating a token for every delete action, and verifying it before deleting.
6084	neither of the last two variables are defined - you probably meant $this-&gt;username and $this-&gt;password .
6087	you also never call mysqldb() in the first place; you need to do that before attempting to insert into the database.
6088	1) run the for loop for $i&lt;count($a) not $i&lt;=count($a) because you start $i with zero so you need to run the for loop for one counter less than count($a)
6089	2) it will if(!in_array($a[$i], $b)) instead of if(!in_array($b,$a[$i])) because you need to find element of $a array to be already pushed in new array $b or not
6090	and then when you explode the teacher's name you will have their id on index 2 (last name, first name, id).
6091	note: i am not going to escape the data in the examples but you need to do that with mysqli or pdo
6092	and when a users loads a page you should check to see if the user still has a record and insert one if he/she doesn't like this:
6093	then when you want to know how many people are logged in, you would do something like this:
6094	while i recommend further validation, at a minimum you can wrap the code from genuser.php in a if(!empty($_post)){....}
6095	are all these files the same type?
6096	can you give us a var_dump of the variables when uploading a few files?
6097	are the variables for all uploads empty or just some?
6098	in your second example, you have to construct the "flipped" value of $array before you can use isset() .
6099	btw, you can also use array_flip() for that.
6101	if you can't use the keys without conversion, you could consider using in_array() for small arrays.
6102	for bigger arrays it might be worthwhile to run a benchmark to determine whether an array conversion step would still be worth it.
6103	lastly, and depending largely on the situation, you could use one of the array_intersect_ functions as well, mainly to avoid having to loop inside php code.
6105	you session_start() is inside a function called user_login() even though you are including the file my guess is you aren't calling the function user_login() every single page load as it is authenticating username and password.
6106	this is not the proper way to think of sessions.
6107	you seem to be in the mindset that sessions, by their nature, are involved with authentication.
6108	sessions merely persist data across multiple requests to php, and the fact that this is an ideal place to store the user's authentication state does not mean that it should only be started during authentication.
6109	also, the name session_start() is a bit misleading because it does not 'start' a session so much as open one if it exists, or start a new one.
6110	the first invocation to session_start() will set a cookie in the user's browser with the phpsessid variable that is passed back in the $_cookie superglobal array on subsequent requests.
6111	if session_start() detects this variable it loads the data from the server's session cache into $_session , but only when session_start() is called.
6113	personally, all of my projects have the same 2 lines at the beginning of the global header:
6114	tl;dr: take session_start() out of that function [and anywhere else it might be] and move it to the top with your require() statements.
6115	since your thread of else if blocks is followed by no else block to handle the case where none of them is executed, your script receiving an incorrect value for $_get['value'] or no value at all would result in $sql to not exist when you try to execute your query, which would explain both the errors you get.
6116	use var_dump to show the contents of $details .
6117	you are getting the notice because the index 8 (which you are trying to access) is not set to any value.
6118	you are posting the form to $_server['php_self'] .
6119	this way the get parameters are reset on submit.you should post to $_server['php_self'].
6120	in case you work with non-stdclass object you could implement __tostring to use array_unique to filter.
6121	to filter on unique stdclass, using only a few of the attributes you could try something like:
6122	from php 7 onwards you could use array_column to get a value from a stdclass, so if you use php7:
6123	in case there are more attributes to compare there are different ways.
6124	array_reduce is just one of them.
6125	the outcome of this one will not have any duplicates.
6126	so if all attributes match, the item will be filtered.
6127	you're comparing $_get['get'] with the (boolean) result of is_numeric() .
6128	this may be what you intend but i doubt it.
6129	furthermore, i'm not sure if you can have expressions (i.e., non-simple language constructs) after the case keyword.
6130	edit based on the comments in the php manual it's possibly valid.
6131	and due to the loose comparison used by switch the above may actually reflect your intention.
6132	if this is the case, please ignore my answer.
6133	try echoing $_session['token'] into the form instead of $token , in case you accidentally re-assigned it between the creation of the token and the form output.
6134	there are several other errors like you have to make $post['newfirst'] as $_post['newfirst'] like this
6135	also you should take a look at your where in your update query.
6136	so if condition is always false.
6137	your finaltime variable is never set.
6138	what you can do is, define finaltime above that condition and initialize it with a default value.
6139	you have missed the session_start() at the top of your dologin.php .
6140	it is required at the top of each page before any output has started.
6142	i noticed that you haven't got an exit(); after your header(); you will need this so that if the user refreshes the login.php after login the browser won't resubmit the posted data to dologin.php
6143	you will want to show login form if there is no $_session['user']
6144	you're checking if (!empty($_session['user'])) , but before they've logged in, $_session['user'] should be empty.
6145	in which case, they'll get the message "you are already logged in."
6146	instead of a login form, but since there's no form, there's nothing to check, so there's no way to log in.
6147	check and make sure the path (/tmp) is writable by the user running the web server, as this may be a permissions problem.
6148	also, you need to use the header() function before using session_start, as noted in the documentation:
6149	you will probably want to use an isset() in the code too e.g
6150	you don't want to blindly import user input into your symbol table.
6151	you should take the time to validate and/or sanitize user input.
6152	the filter_var function can help with this.
6153	when inserting into a database, use the driver's escape mechanism to eliminate the possibility of injection.
6154	if you're using mysql_* functions, you'd use mysql_real_escape_string.
6155	however, it is much better to use pdo and parameterized queries for this.
6156	you need to check that username and password should not empty.
6157	as it turns out, my code was completely fine, it was a missing space in the html of the remote site that got the simple php dom parser to not recognize the iframe i was looking for.
6158	i fixed it on my end by running a str_replace on the code first to replace the faulty code.
6159	$rawmenuitem-&gt;note is an integer whereas $completedmenuitems is an array of objects containing an attribute called note .therefore, in_array() compares integers with objects.
6160	there are multiple solutions to this problem.
6161	one would be to roll his own function:
6162	you are not exectuing your query , this is why no data is inserted.
6164	furthermore you are ready to mysql injection .
6165	there is a nice tutorial here which explain you everything about that -> how can i prevent sql injection in php?
6166	going through your script quickly you need to call mysql_query($sql) after
6167	suggestion since you have just begin ..i will suggest you try mysql_* for just conceptsbut use mysqli_* or pdo .. you shold also know about sql injection
6168	you must use cookie instead of session.
6170	if you want to do this the right way , you can use init hook and setup your cookie data there.
6171	you can place that piece of code in your functions.php file.
6172	and then you can access $_cookie['your_cookie_name'] anywhere in your code.
6173	the string may have a hidden delete character (ascii 127) hidden in it.
6174	try to echo out the string in hex to see if u can find something out of the ordinary.
6175	sometimes it's a simple encoding issue and encoding the string as utf-8 before running htmlspecialchars may fix it.
6176	try to add output in an array and then use implode() .
6177	i'll give you some pseudo code so you can find the logic:
6178	the module(% symbol) means if the rest obtained dividing two numbers, 10/3 = 3 (+ 1) the 1 would be the module in this case, so you only print the tr's when the row is a multiple of 3. it's a pretty common practice, used also to do alternate row colors for example (using $rownumber%2);
6180	you need to send in the correct charset to htmlentities.
6181	it looks like you're using utf-8, but the default is iso-8859-1.
6182	another solution is to convert the text to iso-8859-1 before encoding, but that may destroy information (iso-8859-1 does not contain nearly as many characters as utf-8).
6183	if you want to try that instead, do like this:
6184	if you want to access the session without zend, just use: var_dump($_session);
6185	make sure you are sending your form and using the post method.
6186	it looks like that your post request is not sending a variable id .
6187	use the element inspector inside your browser to see what you are sending.
6188	a good way to check what you are (not) sending is to print_r($_post);
6189	also, you are using $body in your query, but you are not showing us the part of the code that populates $body .
6190	your taxonomy query parameters are not well formed.
6191	and you are not using any of your $_get variables either.
6192	assuming you're getting the term id through the $_get , it should be something like:
6193	you would not need regular expressions here as it is a single task to do.just do the following.
6194	the function str_replace() can replace special characters by others.
6195	the first parameter is a list of all the characters that need to be replaced, so here the - and the .
6196	and the second parameter is a line-break character to tell the characters that you want to replace to be replaced by a line-break.
6197	you're currently setting $answer to isset($_post['answer'] , meaning as long as $_post['answer'] is set, you're $answer is going to be true .
6198	i would check if it's set and then set it to the $_post value.
6199	pagination works using get-method, so this if(isset($_post['kivetes'])) will be false, you should use get-method for your form.
6200	the absolute minimum you need to do here is escape that variable:
6201	nothing in your query has to change at that point.
6202	this is not necessarily the end of the story, though, as mysql_real_escape_string is not invulnerable and you remain exposed to injection attacks by those using more sophisticated techniques.
6205	the best way to be sure you're doing it right is to use prepared statements with placeholder values.
6206	that is your query looks like this:
6208	this makes executing your statement later very easy, you just match up the values:
6209	so the best way to avoid injection bugs is to avoid injection in the first place.
6211	all it takes is one mistake where you thought you escaped something but you didn't and people can bust your site wide open.
6212	it's because your code is expecting a parameter named 'cartaction' in the url
6213	the get method sends the encoded user information appended to the page request.
6214	the page and the encoded information are separated by the ?
6223	in order to avoid this you could do this before checking the get value if (!
6224	edit: the actual error ended up being the assumption of needing to use $_get instead of the possibility of $_post for form data.
6225	the reason this isn't working is because you aren't unsetting from the original $data object.
6226	you can fix it one of two ways.
6227	either access by reference or update your unset to act on the original $data object instead.
6229	i'd try to avoid using references in foreach loops because you need to unset the referenced variable.
6230	if not, hard to detect errors occur.
6231	group is a reserved word in mysql, so you have to escape it to use it in a query, in a pdo query just as you would in a normal query.
6232	this will get you the keys.
6234	there may be a way simpler fix for your problem, but if nothing else works you can also use explode() to cut the string in parts and create your array.
6236	what you're telling php to do is to find an entry in the array with key that matches your ip.
6237	except no keys in the array are ip addresses.
6240	personally i'd also recommend changing your sign out logic to use unset($_session) that way you only have to check for:
6241	it is not resulting due to undefined variable: _session error.
6242	so you can utilize any ignorant (@ or &amp;) ex.
6243	you should implode the placeholders and let pdo do the work
6244	your ajax is working but you don't do anything with the response.
6245	instead you redirect to pdf.php .
6246	when you redirect in the success handler, you are doing a completely separate http request, the post data is now gone from the previous request, that is why after the redirect $_post['html'] is empty.
6247	you need to research the lifecycle of a php request .
6248	when you submit your ajax request, the success callback is called with one argument contained the output you expect:
6249	but, when you redirect to pdf.php , you are in effect sending another request.
6250	this other request has no post variables so $_post['html'] is an empty string.
6251	now why the second time does pdf.php not return the value it returned the first you ask?
6252	because http is a stateless protocol .
6253	that means one request to pdf.php is entirely different from another.
6254	without the use of get, post, or session variables (cookies included), one request to pdf.php has no knowledge to any other requests to pdf.php .
6255	also, i believe you are misusing ajax in this instance.
6256	the intent of ajax is to perform requests to the server without having to navigate to a new page.
6257	you should either perform the ajax request and then take the returned data and inject it into the current page (you can use the first parameter passed to the success function) or forego ajax altogether and just redirect to pdf.php .
6258	ok, the only thing you would have to do is to replace &amp;nbsp; with a space as you already do (only if the string really still contains &amp;nbsp; check @andy e's answer to make sure that that your data does not contain any html entities.
6259	is it possible you're "double encoding" any existing &amp;nbsp; parts of the string?
6260	you call htmlentities on the string before html_entity_decode , so any existing &amp;nbsp; characters would become &amp;amp;nbsp; .
6263	option here is to include javascript to set action in form on keyup and then, when you press submit, you will be redirected to this url.
6264	if this is not what you want, please, tell us what your script need to do to get the correct answer.
6265	edit: of course you need to specify all variables you want to unset.
6266	the sql should be executed to return a result $insert
6267	(and, as mentioned it's much safer to use prepared statements.)
6268	also your code is missing the actual query itself which is done using the following code:
6269	then the rest of your code will start to function:
6270	actually you don't need to do anything.
6271	if there are extra elements in the exploded array, list won't care.
6272	seems that your php script are trying to read the 'selection' in your $_post variable but it wasn't defined yet.
6273	this should make fix your warning and there are differences between the array_key_exists.
6274	in this case, use isset() because its faster and easier.
6275	you are trying to send data from task.php -&gt; showcats.php !
6276	your code does that very well by using this:
6277	the problem is when you do this : $('div.container-fluid').load('showcats.php'); a get request will be sent to the server!
6278	so it's normal to find that var_dump($_post) return null.
6279	if you want to show/get the response you can use the success event like this:
6280	instead of using cookies, you could use sessions to get a better contact with the user machine.
6281	you could do something like setting the session timeout to only a few minutes, but this will run the risk that someone who is a slow reader or takes their time moving from page to page will be locked out.
6282	if you want to be a real meanie when it comes to user logouts, you might have to do something like javascript'ing in a regular "check-in" that sends data to the server to keep the session alive - this along with a short session time might sort-of achieve the result you are looking for.
6283	edit: the code you posted also shows old mysql_* functions, along with root user and no password to access the database.
6284	please dead god tell me you just inserted that user as a placeholder.
6285	secondly, please move on to pdo or mysqli to avoid getting your website hosed by the first annoyed user that comes along.
6286	when they log into the admin functions and change it to false when they log out of the admin functions?
6287	no need to kill off the entire session, just change a single variable kept in it.
6288	im not sure is this what you are trying to do, but check my example:
6289	try to use description[dayname] in the form and use $description=$_post["description"][$dayz] in processing, you have array indexing issue because checkbox are just not send if not checked.
6290	for some reason the php bits such as '.$specific_field_title.'
6291	where stopping the str_replace from working.
6292	to get around this i just searched for the html elements and put them in an array like so:
6293	so no, you don't have to take care about escaping, server will take care about escaping for you.
6294	escaping manually will result in double escaped values.
6295	and in my personal opinion the greatest advantage of placeholders ?
6296	in sql statements is that you don't have to take care about escaping.
6297	you are never using it anyway since you overwrite the value in the while loop.
6299	your output is not valid json that's the problem, your echo $_get['id']; is breaking your json output, remove it.
6300	if you want to send it in the output put it in the json response.
6301	it may not match because there is a new line between reported eta received: and the &lt;time&gt; tag.
6302	and you've just put in there a space (use [\n\r\s\t]+ instead " ").
6303	you can also use: ?p&lt;name&gt; for a easier pointing (associative vs numeric: numeric can change if you put more capture groups).
6304	updated to reflect mysqli, instead of mysql and the mysql code to make it clearer.thanks @fred-ii- for point out.
6305	you need to set the $userrow variable after you invoke the function.
6306	as this function returns this variable, if you have your $user object, just change:
6307	also make sure you call session_start(); at the top, and that you instantiated the $user object: $user = new userclass (or whatever class name you have there).
6308	you dont need to use 8080 simply use localhost because that port number is not related to mysql but related to webserver.
6309	inorder to address the webserver only you need to use it like localhost:8080/project-name/
6310	or else you can use the same in procedural method with mysqli_* functions.
6311	but i prefer to go along with object oriented php.
6312	you don't need to use any class or external library, to remove html tags from user input.
6314	when you use the $name in your query use this mysql_real_escape_string($name) .
6315	if this is your code , its catastroph for sql injections .
6316	you should change to mysqli or pdo
6317	either way it's an invalid query string since somevalue is not interpreted as a string.
6318	first of all, you really should use mysqli.
6320	your code would look something like this, if it was rewritten using mysqli:
6321	if you are not using mysqli after all, know that the code that you wrote is not working because of 2 issues:
6322	you spelled $name = $_post["usersname"]; as usersname instead of username on the line $result = mysql_query("select * from members where username = $name"); you need to escape the string like this: username = " .
6323	otherwise quotes will not be added and the string will be misinterpreted as a token (also, there are sql injection concerns)
6324	besides these points, it is important that you store passwords correctly in the database.
6325	you must not store passwords in plain text, as it is an enormous security risk.
6326	you need to store passwords as hashes, which are one-way functions that make it impossible (or at least harder) to obtain the password.
6327	i suggest you look into the crypt function in php.
6328	used with the blowfish algorithm and a suitable salt, it can provide excellent security, but further details about this are outside the scope of this post.
6329	you can find more information in the comments on that page.
6330	in your html for the select options, try something like this:
6331	it's much more elegant if you define your option values in an array:
6333	warning 2: it's also vulnerable to mail header injection attacks.
6335	you're inserting a literal string into the database.
6336	remove the double quotes - e.g.
6337	also, you're prone to sql injection with that query.
6339	first, if $codestadoconservacao is null then it will insert 'null' , as a string, literally the text null because of the quotation marks.
6340	it is not the same thing as mysql's null .
6341	second, i see you grab this value from $_post and build your sql query with it without fearing consequences.
6342	you are about to be victim of sql injection / injeção de sql .
6344	look for the options available to whatever database connection method you are user.
6345	setcookie() passes a set-cookie http header to the webserver, which in turn transfers it to the client.
6347	whether they're accepted/ignored is irrelevant - you can send any header you want.
6348	the only way to tell if a client has accepted a cookie is if the cookie gets sent back to the server by the client on its next request.
6349	but if you do output first, before calling setcookie, you'd end up with something like this:
6350	headers are only headers when they're in the header block of the response.
6351	if they show up in the body, they're not a header - they're part of the content.
6352	that's why php issues the "headers already sent", and doesn't send the cookie.
6353	it can't - the train has already left the station.
6354	this variant packs whole css into a single line,removes all css comments as well, and checks if $partdetails[1] is actually isset at the end, and than goes the imploding *(last else )
6355	as a result, you will have the following variables with the following values:
6356	since you are creating an array of array in php, hence json_encode is giving you array of array of objects.
6357	there are a couple of issues.
6358	first, mysql_query is a deprecated php function and should be replaced with mysqli_query.
6359	all functions in your code should use the mysqli prefix instead of mysql (so mysql_fetch_assoc should be changed to mysqli_fetch_assoc ).
6360	this function also takes a parameter providing a connection to the database, which is done with mysqli_connect.
6361	so your code should have something like this:
6362	$con only needs to be set once and can be used in other query calls in your code.
6364	anyone who has access to your computer or to your network if you're not using ssl can steal your cookies and log in to your account.
6365	update mysql to mysqli or pdo use prepared statements optimize code for speed (use || instead of |) use a stronger hashing algorithm
6366	leave a comment if you want a more in depth instruction to improve your code
6367	this is a great article about pdo.
6368	but pdo is object based and since you're new to php and i don't know your skill level you can better use mysqli for now.
6369	there're plenty of articles available on how you can do this.
6370	but if you use || instead of | the if condition skips the second argument if the first already failed.
6371	you use sha1 for hashing your passwords.
6372	but this algorithm is a bad practice.
6373	you should use bcrypt or at least use an individual salt for each password you encrypt with sha1 and store that next to the password in the database
6374	you never store the user info in a session to retain the login on next requests, the way you're implementing it is called a remember me function and is considered hard to implement safely.
6375	it is easier to work with sessions first and if you really need it cookies later.
6376	if you're using sessions you should also check if the session_id hasn't been set by an attacker in the clients browser.
6377	you can do this by setting a random cookie such as init and when this is not set you call
6378	you store both the email and the hashed password in a cookie.
6380	the best practice is to hash a randomly created string of characters with a high entropy and store only that in the cookie and in the database.
6381	when the user logged in once with that cookie you should refresh the cookie with a new hash.
6382	to fix your error you should remove the while loop around the mysql_fetch_array($check)
6383	your code looks a lot more organized if you start to learn to work with php objects.
6384	this can also make your project a lot easier to work with.
6385	i don't know if you're going to use this code in a production website because i highly recommend against that.
6386	you can better use a safe and sound solution that somebody with more experience has created and when you have more experience you can start building your own.
6387	longer-er answer: when possible you should use prepared statements with bound parameters (as oli charlesworth said), however, the second best option is to use the escaping mechanism specific to a specific rdbms.
6388	in this case, you would use mysql_real_escape_string instead of addslashes.
6389	mysql_real_escape_string is aware of a few things that addslashes is not.
6390	addslashes is a glorified str_replace of ' with \'.
6391	mysql_real_escape_string is a hook into the mysql client library's mysql_real_escape_string function.
6392	it is aware of a few settings on the server (hence the connection parameter to it), and it is safer than addslashes.
6393	bound parameters are still safer though.
6394	even though mysql_real_escape_string knows a lot about the connection and so on, a lot of factors can contribute to the security of it.
6395	for example, character sets and encodings can be difficult to handle.
6396	bound parameters have a different method of operation, and they do not do escaping like normal queries.
6397	as such, they are safer as there is less room for error on things like character encoding and what not.
6398	i can tell that $_post is a sort of 'reserved array'.
6399	so do not use it as a 'custom array'.
6400	it generates automatically when a form "posts" its fields' values.
6401	then your action.php takes form's values as an array called $_post .
6402	then now, i might answer you that redeclaring $_post as an array sounds purposeless:
6403	however, you might use $_post in this manner into your action.php file, at least treating it as an array:
6404	it is not a final solution.
6405	take it as a modest $_post explanation.
6406	you can use parse_url() to break up the url and then match it with preg_match() :
6407	you are using print_r , but domnodelist does not offer any output for that function (because it's an internal class).
6408	you can start with outputting the number of items for example.
6409	in the end you need to iterate over the node list and deal with each node on your own.
6410	in order to use the $_get variable, it must be in the query string (or being routed through some other means that isn't 'default').
6411	if you want get only id inserted query, you can use lastinsertid() function of pdo.
6412	you're testing for the presence of various $_post variables, and if you find them all you set some local variables against them.
6413	if you don't find them all you go on to try and write the information to the database.
6414	you're using trim(strip_tags()) as some form of sanitization.
6415	this is nowhere near good enough.
6416	you should use mysql_real_escape_string() (for mysql), or consider moving to prepared statements.
6417	you're printing error information from the connection object, but not looking at error information from the statement object.
6418	you might want to look at the manual entry for pdo::errorinfo() .
6419	you also catch pdoexception, but we can't see any code where those exceptions are enabled, see the manual entry for pdo::setattribute() in case you're not aware that you need to enable these.
6421	i will run a very quick example, but i think you'll need to read up on the differences between mysql and mysqli (there are many websites with good advise, please google)
6422	your mysqli would be best in the form of object orientated and you would have a mysqli object which contains your connection data:
6423	now, in your php code page you first need to call the class file above:
6424	now you can use $database as your mysqli connection to your database.
6425	first, set your 5 parameters as an array (as mentioned by codrutz codrutz) thus:
6426	now you have all your parameters in $parameters , you can edit your original query to look through the five (or however many) parameter rows given.
6427	the first part of the bind_param is the type of data that is being bound - (s)tring, (i)nteger, (d)double [numeric] or (b)lob [file/big chunks].this binds the values in the inner array to the ?
6428	so this will now have a name value array of results from the $result array, each initial row will correspond to each initial row of the $parameters query.
6429	to reverse the array as you want you can still array_reverse but the data is selected by name, and should be referenced as such.
6430	$vartitle = $_post['title']; it worked for dropdown to.
6431	by using this you can get the value of selected option from the dropdown .
6432	in case you want the selected text then you have to put it in some hidden field on the selection change and get the value of that hidden field on form submit.
6433	you don't want to try to match the password during the query as matching the hash would not work.
6434	in order to verify the password you will want to do something like this:
6435	you can limit the usage per user per hour in mysql: link security mysql
6437	examples are easy to find if you examine other questions with the sql-injection tag.
6438	one of the best answers is in how can i prevent sql-injection in php?
6439	first do a preg_match and find the matching names.
6440	then craete the array with replacements for every found name.
6441	then use preg_replace with the array as second argument, thereby replacing the names with the items from the array.
6444	you are getting this error because php is trying to convert an array to string.
6445	you have a 2d array, an array of array.
6446	you can use the flag sort_regular to compare the elements as they are.
6447	but be careful, only same key/value pairs are considered identicals.
6448	generally, this kind of iterator is 'less-than-ideal' code for several reasons.
6449	generally, coding practices in php prefer to use foreach instead of a for iterator unless one actually needs the count as we pass through, ostensibly why the fetch is done as fetch_num , although it is never used.
6450	my friend your code is just fine you just need to check that your submiting the dropboxes with the form so first check your html and when you var_dump($_request) it should be an array containing all the values that you trying to gather
6451	split the string at , into an array ( explode() ) remove all leading and trailing whitespaces ( trim() ) from every array element ( array_map() ) just iterate and output.
6452	that means $name is an array, which is obviously an illegal string offset.
6453	make sure you're passing the right value to session::exists() .
6455	have a reference from following queries.
6456	to fix this, check that the variable that you're passing in as the needle has an actual value.
6457	the empty function is a good choice for that.
6458	it may be, then, that you are receiving white space (e.g.
6459	a space or newline) from your form without realising it.
6460	in this case, you can filter your $_post variable like so:
6461	if you say you wanted to display only the info about users logged in, you are getting all users without conditions
6462	if the string is small, why not use explode() to explode it at the tags,and replace the strings in required fragments, and then rejoin it ?or try domdocument :
6463	as a workaround, you can make file_get_contents send a user-agent header in your script.
6464	setting a value for the user_agent configuration value at runtime using ini_set should suffice.
6465	whether or not you need to send a specific user-agent (one like a common browser would send), or if just any value is enough, you have to try and see.
6466	most likely any value will do.
6467	if that doesn’t work, or you need to send any additional headers, then please refer to this so question: php file_get_contents() and headers
6468	edit: using curl of course you got the same problem, unless you specify a user-agent so that this api will not fail.
6469	you can do that using curl_setopt and the curlopt_useragent option.
6470	your notice is coming from echo $_session['cart_1'] .
6471	and you are not using isset() there.
6473	when using pdo you can do it like this:
6474	you can safely put a header() -redirect in the dosomethingwheninsertwassuccessful() function.
6475	unless your application writes any output beforehand, there is no reason why this would not work.
6476	the issue is not with php or pdo, i was able to reproduce the issue directly with mysql.
6479	if i'm reading your question correctly, your main problem is that you are printing the arrays correctly to the screen but failing to store them in a way that you can send to the sql server in a query.
6480	here's one way to do it assuming that's right:
6481	i assume you want to match what's inside the brackets, which means that you must match everything but a closing bracket:
6482	this line suggests that $_post['name'] is an array.
6483	if that's the case you will have problems with this line:
6484	when you feed it an array, it will convert it to the string " array ".
6485	the same applies to all the child arrays.
6486	what you want to do instead, since you seem to have an array of children, is to loop through that array and pick up each child's info to add to the email.
6487	another alternative, if you don't want to loop through all those arrays, is to use the print_r function with its second optional parameter set to true .
6488	this will transform the array into a user-readable string.
6489	make sure you have provided all the correct values for all the parameters (host,username,password,dbname) in
6490	gets first 300 chars and checks for broken tag.
6491	if broken cut before it and get $rest from this point.
6492	if not broken just strip and get rest.
6493	there is at least 1 problem:
6494	you never now the length of the $start(after strip_tags could be nothing left), could use loop with length checking but eeee... efficiency
6495	your server side code is trying to examine $_post['ptan'] , but you haven't sent that in the ajax request.
6496	i think for such a small string, and if the format will always be the same, you could use array_push and substr to get extract the numbers out of the string and put them in an array.
6497	are placed into a superglobal $_get .
6498	this is an array and you can grab out the aff value by doing:
6499	in your case you can use this to update your query:
6502	i think the problem is that lines in email have a maximal length, therefore either phpmailer or the mail transport program breaks long lines.
6503	to avoid that, you could use base64 encoding: this way the base64 code will be broken into short lines, which does not affect the encoded string.
6504	as i see, phpmailer does not allow setting the message body encoding, but you can send the ical as an attachment.
6505	but you already have what you need in an array; might as well loop over it and create your query:
6506	the problem is, the control will never reach to this if(isset($_post["editarreceta"])){ ... block even though you've click on the submit button the update the values in the table.
6507	and that's because it has to cross this if(isset($_post['editar'])){ ... block to reach the former mentioned if block.
6508	the solution is, take this entire if(isset($_post["editarreceta"])){ ... } outside of the if(isset($_post['editar'])){ ... } block, like this:
6509	also, to get the $id value in the update query, you have to change the form's action attribute in the following way,
6510	so that you could catch the appropriate $id in the following way,
6512	also see how you can prevent sql injection in php .
6513	explode() the string, then use two nested loops along with array_slice() to get the relevant elements.
6514	for even quite short strings, the memory and runtime requirement will explode.
6515	even in native code this is a scary performance problem.
6516	the use of array_keys() and the for / foreach loops get a little confusing quickly, so i'm not sure exactly what your error is without looking more.
6517	the big trick with my code above is the use of reset() which resets an array and returns (the first element).
6518	this lets us grab the first infobox and check if it exists in the next line (before attempting to get the contents of a non-existent key).
6519	next, we just loop through all contents of this first infobox and access the key and value keys directly.
6520	you if want to access both keys and values, a simple good ol' foreach will do.
6521	no, you can't use prepared statement between calls.
6522	no, it is not worth nor necessary in order to run the same query across different requests.
6524	your approach (remove values from the names and websites arrays using the non-unique values of the email arrays) is unnecessary.
6525	by looking at the arrays you provided, you can simply use the array_unique function in every array, as i did above.
6526	also, it is a best practice to have an user data in the same array.
6528	a part of the confusion with the transaction statuses is that the transaction status object is built off of a similar object that we use internally and includes ever possible transaction status in our system.
6529	some of these status will effectively never actually be seen by you as an external developer.
6530	i've checked our public knowledge base and confirmed that we don't currently have a good list of all of the transaction statuses, so i'm working on creating one for you.
6531	i'm working with our internal developers just to confirm some details on the statuses and i'll reply with that list as soon as i can.
6532	i can answer the rest of your questions right now.
6533	within authorize.net, all transactions are moved into a batch when the transaction state is final.
6534	this is a significant difference in the authorize.net definition of a batch and the definition used by most merchant services provider.
6535	because all of our reporting is organized into batches, it is important that all of your transactions ultimately end up in a batch.
6536	other errors - communicationerror - an individual transaction was rejected by the processor.
6537	this is a final transaction status.
6538	- settlementerror - a day's batch was rejected by the processor.
6539	the merchant should try to recover the batch.
6540	- general error - this is a catch-all status for any transaction status that is not otherwise defined.
6541	transitional transaction statuses these transaction statuses occur only as a transaction is taking place.
6542	they should not be returned by the transaction details api.
6543	you haven't encoded the data you are sending as json.
6544	you are passing an object to jquery and allowing it to encode it (as application/x-www-form-urlencoded ).
6545	you need to encode your data as json and pass a string to data: .
6546	json is not a content-type, application/json is.
6547	$_post is populated from application/x-www-form-urlencoded or multipart/form-data , it doesn't contain the raw post request.
6548	you need to use php://input to get that.
6549	if you use var_dump() on your $hydrator-&gt;extract($results) , you'll see that all your embeds/references are there in their original object format.
6550	what you can do here is to use zend\stdlib\hydrator\strategy , and define your own logic for extraction/hydration.
6551	doctrine extends zend framework 2's hydrators and strategies.
6552	just update $_session["info"]["users_name"] with the same as you run your update query.
6553	if you do this before you echo $_session, it will show the updated content...
6554	you could use array_keys() if you need to know what keys are inside $value or you could another foreach loop, but i am assuming you will have at least some clue what keys could be in $value .
6556	show where in your code you are doing session_start() (the up-top chunk).
6557	not the smaller 2nd blue/gray chunk
6558	jay gave a good reference to his fine site on proper database layers to use, and the proper ways to use them.
6559	many more are written about here.
6560	i just injected my table with your
6561	your code in test.php is checking the $_post variable to see if a file was submitted via the form, but you probably want to be checking $_files .
6562	check out the php documentation on file uploads for more information.
6563	when i do this sort of thing, i like to split up my logic and then glue the pieces together using implode() .
6564	i find the logic easier to understand this way.
6565	here, we are saying: for each search term, a match must be found in the product column or the description column, or the keywords column.
6566	$ssh-&gt;exec echos both stdout and stderr .
6567	try just echo $ssh-&gt;exec('echo hello'); connect manually first to be sure the "the authenticity of host...are you sure you want to continue connecting?"
6568	be certain to **check each of your commands manually to be sure they work before piping them through your script.
6569	put one example of your commands in a bash file and try to execute only the bash file.
6570	if that works, you may be able to send the variables via exec() to the bash file for processing.
6571	if that works, then you can expand it to send variables
6572	the arrays are the same size, so you can use a for loop to process them simultaneously:
6573	within the loop, construct a new array keyed to the values from the first array.
6574	if the key does not yet exist, initialize it:
6575	if you want to replace the 'person1' and 'person2' keys with numerical indexes, use array_values() :
6576	if you want to do away with the keys in $output , you can use array_values($output)
6577	just because i see this all the time on so, i will address some of my comments.
6578	there are a lot of reasons why it could fail based on what you have.
6579	first off, a solid framework would do almost all this for you, you would just have to do basic logic but not all the grunt work.
6580	second, just because you want to echo some text in a specific part of your page, doesn't mean you should do a bunch of logic that leads up to echo in the same part of the page.
6581	the idea is that the browser output is the last thing to happen so you will want to do the bulk of your logic before the page outputs.
6582	secondly, now that you have all your business logic stored away in contained functions (classes/methods) you can cleanly apply them to the page.
6583	finally, this code is not tested so there may be errors in logic.
6584	it is intended to show you how to apply my (and perhaps other's comments practically).
6585	i don't want to say "don't do this and don't do that" but don't show an alternative.
6586	this script is based on yours so you can identify similarities easier, but is no way implied this is the only way, or the correct way to do a login.
6587	as mentioned in the comments, you don't really have a secure setup going on.
6588	there are endless things to account for regarding security, but a good start would be to account for the following:
6589	a good beginner resource at first would be to check out phpacademy .
6590	i've linked this a couple times also .
6591	i think it's a decent example of a pdo login system, which will help you avoid sql injection attacks.
6592	assuming you have access to your php.ini file, you may want to look into what these commands do.
6593	they may or may not fit your needs, but they can be helpful to avoid session hijacking / fixation by not allowing the phpsessid variable to be passed via url and also making it inaccessible via javascript.
6594	brute force attacks can be mitigated by using proper hashing.
6595	to look into bcrypt or scrypt for more detail.
6596	you can also check out this discussion for a little more information on this.
6597	if you want to match a string anywhere in the field content you can just use a like operator:
6598	depending on your table collation the strtoupper and upper statements might be redundant (generally if the collation has _ci at the end of it the comparison would be performed in a case insensitive manner).
6599	if you columns are varchars and hence you are expecting to receive string values you need to wrap your values in single-quotes.
6600	the easiest way to do this as all your columns are strings would be
6601	you should then be able to echo out the actual query that's being run to see what the problem is.
6602	your if statement checks to see if $_session['user'] is not set.
6603	then in that code block you try to use $_session['user'] in your query.
6604	you are trying to use a variable you know doesn't exist (and has no value).
6605	you are currently making no attempt to serialize the data array into a format that can be properly handled by both $.ajax() and your php script.
6606	when you try to rely on jquery's default object to query string conversion with code like this:
6607	you need to either properly create a serialized query string, or (and this would be my recommendation) since you are trying to pass a more complex data structure, you might consider json-encoding the data structure and posting to php with application/json header type.
6608	this would require you to then read the raw posted data in php, not read the data from $_post , as php does not populate the $_post superglobal for content type headers other than the form-encoded types.
6609	in the index.php on the first line i have -> remove that, put first routine of session checking
6610	there is no difference as long as you are using both libraries properly.there was one quite theoretical vulnerability in the older versions of pdo, fixed two years ago.
6612	in one hand, you have the login credentials in the mysqli_connect , that are used to connect to the database.
6616	well if you want to remove the $_get vars from the url
6617	i'm a bit confused about what you are asking, but i'm assuming you want to make unos into an array.
6618	you can do that like this:
6619	then in order to access them via php just use $_post['unos'][$n] where $n is an integer.
6620	you can also loop over $_post['unos']
6623	actually mysql_real_escape_string() is used while sanitize a input from a user.
6624	so you should (at least) use it everywhere a user can input anything that goes into a query.
6626	that's maybe because you do not empty your session variable.
6627	so, if you are putting a message on $_session['error1'] for the first call, it will show it.
6628	then, on the second load, if you are putting a message on $_session['error2'] , you will also have the message of error1 because the session keep your data.
6629	according to what properties are there in $r you can output them.
6630	if there is a better solution to this problem, or if i'm creating other issues i'm just not aware of yet, please comment.
6631	for now my problem has stopped.
6632	you need to use isset instead to check if it is there.
6633	you can access the last insert id as a property of the mysqli object:
6634	or alternatively you don't have to store $lastid at all if you access it within your sql:
6635	by the way, in your code example above you didn't execute $stmt1, so there will be no last insert id anyway.
6636	file() function will return file contents as an array of strings (if no error occurred).
6637	the first line in that array is in the default starting position ( 0 ).
6638	so, this condition should be considered when getting the expected range.
6639	for such input boundaries: from 4 - to 8 - it should be: from 3 - to 7 to get range of elements(strings) from array use array_slice function:
6640	important note: obviously this implementation is not production-ready and would need some significant improvements in areas such as validation checking, security (encryption), expanding the pdo implementation etc.
6641	this example code is provided to demonstrate the api concept.
6642	try changing your initial $item['date'] to be 2012,04,30 if that's what you're trying to do.
6643	otherwise i'm not entirely sure what you're trying to print.
6644	i would use a combination of array_merge() and array_splice() .
6645	lets assume that $fixed contains an array of fixed element's keys (from $arrayone ).
6646	starttag = change its string to the default string before of the word you want to extract.
6647	endtag = change its string to the default string after ends the word you want to extract.
6648	assuming the postcodes in your database are correctly formatted (i.e.
6649	containing the spaces), then you'll need to do some validation of the user input (this is a good idea anyway).
6650	once you've validated the user input, you can easily format the postcode so that you can look it up in your database.
6651	however, if the data in your database isn't so clean, then you'll need to work out a way to either (a) improve the data quality, or (b) search the table using a regular expression:
6653	see this question: why shouldn&#39;t i use mysql_* functions in php?
6655	it will contain the value of the item selected, specified in &lt;option value="apple"&gt;
6656	okay so after a lot of trial and error, my co-workers and i managed to get things up and running.
6657	the most time-consuming part turned out to build the wrapper.
6658	assuming you have that, here's what you need to do to integrate it in laravel (these steps are for laravel 5.1 by the way).
6659	also, my wrapper's called pdovertica so whenever you see this term, you have to substitute it for the name of your own wrapper.
6660	2) next, you need to modify a couple of files:
6661	3) once the files have been properly modified, all you have to do is properly configure laravel to use your custom connection by modifying the following file:
6662	so far as i could tell, this was all the steps needed to get laravel to connect to a vertica database without crashing.
6665	if you are using two different apis (i.e.
6666	mysql_* and pdo), php will generate two different connections.
6667	the mysql extension creates keys of the form "mysql_&lt;host&amp;port&gt;_&lt;user&gt;..." while pdo builds "pdo:dbh:dsn=&lt;dsn&gt;:&lt;user&gt;:...." .
6668	the hashes are used almost like array-keys in a php script.
6679	personally i prefer to err on the side of caution and bind all variables that aren't hard-coded into the script to the queries and properly escape everything before echoing it to the browser so that i never have to think about what else might be manipulating the values along the way.
6680	i guess, you are using a custom table.
6681	i couldn't find a table names *_reports in moodle-1.9 or moodle-2.0.
6682	if get_course_students give you the userids, then you can use
6683	you can use php's implode to get a comma separated list of userids, provided the get_course_students return an array of values.
6684	you're replacing the match with the pattern itself, you're not using the back-references and the e -flag, but in this case, preg_replace_callback would be the way to go:
6685	try any of the above, until you find simething that works... incidentally, if all you want to remove is &lt;tag&gt; and &lt;/tag&gt; , why not go for the much faster:
6686	if you want to isolate the actual contents as defined by your pattern, you could use preg_match($regex,$text,$hits); .
6687	this will give you an array of hits those bits that were between the paratheses in the pattern, starting at $hits[1], $hits[0] contains the whole matched string).
6688	you can then start manipulating these found matches, possibly using htmlspecialchars ... and combine them again into $code .
6689	the problem is, that your variable $cart_id is not defined.
6690	with this, you first check if the variable is set, and if it's set you check if it isn't empty.
6691	there are a lot of things wrong here though if any of them are your actual problem i can't say:
6692	furthermore $tablename is never defined unless its in the file you're including.
6693	i think you mean to reference a result from the query but to do that you need to do:
6695	this is valid for php 5.x only.
6696	for php 7 you need to change to mysqli or pdo.
6697	don't do anything with it, insert it as-is.
6698	and use bindvalue, bindparam is an optimization thing when you have a lot of data you need to change fast when loop-executing a statement..
6699	you will need it as localhost/addr=$ip:$port because you are using $_get
6702	also, unless you are going to use the variable $ting again later, you can cut out the middle-man.
6704	after setting the cookie, you can check if it's empty:
6705	since you are inserting it into a json string, do it like this:
6706	hope you are saving logged in user name in $_session['loginname']=$loginname; use session_start(); at the starting of login_save.php and &lt;?php session_start(); ?&gt; at the starting of home.phpuser name you can call in home.php using
6707	you should care about mysql injection by using pdo or :$id = (int) $_get['idp']; for your select, in case the data is stored in $ligne[6]: &lt;select name="pays"&gt; &lt;option value='australie' &lt;?php echo ($ligne[6]=='australie')?
6708	'selected' : '' ; ?&gt; &gt;australie&lt;/option&gt; &lt;option value='france' &lt;?php echo ($ligne[6]=='france')?
6709	'selected' : '' ; ?&gt; &gt;france&lt;/option&gt; &lt;option value='maroc' &lt;?php echo ($ligne[6]=='maroc')?
6710	'selected' : '' ; ?&gt; &gt;maroc&lt;/option&gt; &lt;option value='tunisie' &lt;?php echo ($ligne[6]=='tunisie')?
6711	'selected' : '' ; ?&gt; &gt;tunisie&lt;/option&gt; &lt;option value='usa' &lt;?php echo ($ligne[6]=='usa')?
6712	'selected' : '' ; ?&gt; &gt;usa&lt;/option&gt; &lt;/select&gt;
6713	if you var_dump($rawdata) , you'll see that it's an integer (or 0) and is only returning the number of results.
6714	this is because you're using $command-&gt;execute() when you should be using:
6715	that will return you an array of results which you can pass into the cactivedataprovider
6716	why not create a custom function that will wrap all your print_r calls?
6717	it saves time, gives me better functionality, plus i don't have to worry about "did i use the right call this time?"
6719	enforce by in order of preference either build / testing system, source control, enforcing using only wrapper functions which can easily be disabled centrally, or if you really must, production server configuration.
6720	and you also found a lot of or die('some errormessage); statements, also not a good idea in production for obvious reasons.
6721	manual code is illustration, never production code, but alas treated as such by many a programmer.
6722	you can set a custom methode that print errors only if debug option is set
6724	you can do this by using sql operator in and php functions implode, array_map and intval.
6725	the intval is for prevention of sql injection attacks.
6726	the second solution is not common because you'd have to include the whole bootstrapping into every single content script.
6727	if you have to change something, you'd have to change it in every single file.
6728	your first example is prefered but as you said it's very static and uncomfortable for many pages.
6729	so you'd like to store this in an array in a file or in the database.
6730	if you want mod_rewrite support or nginx rewrites, you can enforce redirecting /index.php?page=x to /x then have to adjust your stored current page value in database.
6731	dont use tags to wrap tags.
6732	they're generally used for text only you're not selecting any image on your query.
6733	don't use echo to output html its ugly.
6735	you should also read http://php.net/manual/en/mysqli.real-escape-string.php - as it says, when you use the "mysqli_real_escape_string" you also need to set the mysqli object in the method:
6736	also, you should keep to the mysqli or mysql (do not recommend this one).
6737	as others noted you still have the escaped $_get['id'] in the query, however $groepsindeling may not be equivalent, to the get var, strictly speaking.
6738	essentially what you are saying is this
6739	the original code is flawed the original code is correct ( in this case $id should be a new variable )
6740	without seeing the entire code for this page, it's impossible to tell if that $groepsindeling is even related to the query or just used somewhere else.
6741	the other possibility as i mentioned is that they are the same and the orignal code is bugged.
6742	as a side note, in current php versions this $_get[id] from the original query will likely throw a undefined constant warning, i've seen this used before in pre 5.3 php code.... it should be $_get['id'] .
6743	it still works because php will give an undefined constant the string representation of its name.
6744	( just a way to tell how old the code is :-p )
6745	and one last note is you are using mysql_query with mysqli_real_escape_string so that i in there has some meaning, or the lack of it in this mysql_query .
6747	i am not sure if there is any significant difference between mysql_real_escape_string and mysqli_real_escape_string
6748	the console is logging the variable you are sending not what you're receiving, that is why it looks correct.
6749	if you log response then you'd see a problem.
6750	for the php part you're reading $_post['data'] when you should be reading $_post['numeform'] becuse that is what you sent in your ajax request
6751	using a for loop, you can access the $_post keys with a variable, as in $_post["widget$i"]
6752	however, a better long-term solution would be to change the html form such that it passes an array back to php in the first place by adding [] to the form input's name attribute:
6754	if you want to use explode just once you can do:
6755	you can just search first occurrence of a whitespace, and call two substr functions.
6756	or you can do explode and and implode exploded array, after unsetting array key 0, like so
6757	or if you want to get just part "value" from your string, just use list
6758	in your current code your concatenation was off for displaying the $row data.
6759	you also were open to sql injections.
6760	to fix the sql injections i cast your id as an int, here's a thread on that sql injection protection - cast from string to int .
6762	the problem occurs when you load the page at the beginning.you start the session and you include the nav.php where you start the session once again.
6763	if you load the page for the second time the page is independent of the parent and the session can be started again.
6764	i'd suggest using preg_replace() for this rather than str_replace() .
6765	the reason is that there may be multiple newlines and combinations of \r and \n , and i would expect that you'd want to replace them all with just a single comma.
6766	your data is not in the $_post array, because your angular js contenttype is set to application/json by default, and php expects application/x-www-form-urlencoded for a post request.
6767	some kind of nested sql queries did not get bind properly and something is left by the pdo parser during the processing of query.
6768	also there is no way to see if the the final query generated by pdo.
6769	i will recommend to use mysqli library to use in such scenarios.
6770	i usually encounter such issues during complex joins or executions of custom triggers.
6771	if you want to go ahead with object oriented code you can use mysqli class or also you could use simple procedural approach.
6773	but if you use mysqli wisely and properly check sql injections when you input, then there will not be a problem.
6775	they are no longer maintained and community has begun the deprecation process .
6777	if you cannot decide, this article will help to choose.
6778	if you care to learn, here is a quite good pdo-related tutorial .
6779	since $color_flats is an array, you need to loop on each
6780	or you can implode it to make one and unique string :
6781	you should not be using htmlentities here.
6782	remove that and the html_entity_decode .
6783	there is a php function called explode that does exactly what you want.
6784	the explode function does the splitting and returns the array that you want.
6785	you can try using different charset arguments to see if any works.
6786	then you submit the form, it ties that into the original sessionid, checks your authentication, and either logs in the original session, or creates you a new one, and updates yours (normally with a http set-cookie command you can see in the network log).
6787	what tipped me off to my problem was identifing that by the time i was about to submit a form, with a particular sessionid, that sessionid, was no-longer valid.
6788	hence i failed the replay checks, and i got an error similar to yours.
6789	it turned out in my case it was to do with the databases replicating in a way that didn't match how they were being accessed downstream so i could attempt to access a session, that hadn't been created yet.
6790	looking at all your code, the sessionids don't match.
6791	wptokenlogin starts with 510a85 but your wiki session in setcookie starts with n7gs0c and in your log it talks about 6ov933 ... so assuming you copied/pasted from different attempts, you need to run through it yourself from a clean state and check that everything looks like it's using the same session.
6792	if not, try to figure out what's happening to the session you have (if it's created/changed) or why you're not getting the right one, if it's created but never passed out to you properly.
6793	that said, i just took at look at the client side of logging into our own inhouse version of mediawiki, and wplogintoken , wikidb_session and jsessionid don't match either (although i'd expect one of them to show up in the wiki log, which i don't have access too).
6794	if you have to, grep the source for the error message you're finding, and insert error_log(__file__.':'.__line__.'
6795	'.var_export(debug_backtrace(debug_backtrace_ignore_args), true)); to find out work back up the stack, to see what didn't match, to generate the error.
6796	there is a setting in php.ini called session.cookie_secure , but mediawiki ignores this flag.
6797	instead, the solution was to add this line to the bottom of my localsettings.php file:
6798	prepare() method returns false if there is an error as stated here .
6799	you should keep it in an if statement.
6800	your query string will not interpret the variable $tbl_name because you are using single quotes.
6801	it could be fixed with '.$tbl_name.'
6804	you might want to consider array_filter for your use case:
6805	this error is because you have declared class name as goodgirls1database and you have also implemented a method named goodgirls1database in that class.
6806	try changing either the name of the method or the class name.
6807	you are passing the wrong order of parameters in mysqli_select_db() .
6808	it appears as though you are making a pdo connection but using mysql_ functions.you should have your code written like this instead.
6809	your original code was susceptible to sql injection, which is not good.
6810	i would also not reccommend using $_post["log in"] because it is terrible practice to have spaces in an array key.
6811	try something simpler such as "submit" or just "login".
6812	since you are using the procedural form of the mysqli_ functions, you need to pass a mysqli link identifier as the first argument in mysqli_select_db() , mysqli_real_escape_string() , mysqli_query() and mysqli_error() (see also the documentation for more details).
6813	the aforementioned mysqli link identifier is the object returned by mysqli_connect() .
6814	the modified code should look something like this:
6815	this will iterate through every item in the array $_post['addbox'] and give you its $key in the array and the item's $itemid , or value (which you made the item id).
6816	it will then append to your sql string.
6817	warning: you usually want to prevent against malicious clients with sanity and validity checks.
6818	there are some good answers already on stackoverflow for preventing sql injection.
6819	you also need to check for empty, invalid characters, overflowing numbers, etc.
6820	this snippet, as it stands now is vulnerable and can cause problems if $key or $itemid contain unintended values (including being not set or empty).
6821	its done with mod_rewrite and the router part of the script:
6822	you've got a lot of poor php syntax in your example.
6835	on the other hand you can also redirect the users to login page if they are not logged in using header()
6836	so for example if you don't want user to see a page called admin.php than on that page at the very top you can specify the condition, if it's false you can redirect
6837	since we're talking about post variables, don't assume they're exactly as you want them.
6838	keep in mind that $this-&gt;input-&gt;post('field') returns false when the index is not present; that might well brake your if condition.assuming you need numbers to do this, you can do a check like
6839	and yeah, ok, maybe you can write a cleaner code than mine, but you get the picture ;)
6840	you don't seem to quite understand how long the variables stay in memory.
6842	if you want to use values from a form when next the user posts a form (the next request made), then you're already half-way there, try:
6843	before you can use the session, you'll always have to call session_start .
6844	assuming there's no need to keep the data around after you're finished processing the third form, session_destroy is worth a look.
6845	but anyhow, after storing the data in the session, the id value will be available to you as long as the session is valid.
6846	check the manual for more on sessions .
6847	you could use a cookie, too.
6848	since you're using get, i take it you're not passing any sensitive or crucial data anyway, so setcookie would do the job, too.
6849	refer to the values using the $_cookie super-global, then.
6851	this makes them vulnerable (can be tempered with) and unreliable (client can disable/reject your cookie)
6852	because you're passing it the value instead of the key.
6853	the key is $i , so the second line should be
6854	i am not sure if i got this correctly but if you want according to the user's group to display different links just do:
6855	also i suggest you to use mysqli.
6856	it is pretty similar to mysql.
6857	first, you're definitely on the right track with the separate file for each class.
6858	this is pretty much considered standard practice at this point.
6859	i would look into class autoloading and spl_autoload_register .
6860	i highly recommend setting up an autoloader first thing, trust me when i say you really don't want to have to do countless interface_exists and class_exists calls before you include your class files.
6861	i answered a similar question here but the basic gist is that you create a single database instance and inject that into the classes needing database access.
6862	as far as mysqli , if that is what you like using go for it.
6863	its awesome that you aren't using the older, deprecated mysql_* .
6864	i wouldn't use array_push here if you are in a loop anyway.
6866	perhaps you have a typo with your $durgs_value_current when var_dump() 'ing it?
6867	calling var_dump($undefined_variable) will result in a null and if you have error reporting turned of or are suppressing e_notice's from logs then you won't receive an undefined variable error.
6868	remove the '@' before $_post and you should be fine.
6869	however, your current script looks like it's vulnerable to sqli.
6870	and you are also using a deprecated extension.
6871	you should consider using mysqli or pdo instead.
6873	i can't use php functions inside the array - boring and i'd missed the : off adf_add2.
6874	which, will when run of course only show the last entry in $citn, but in your where clause you specify the category must be 'art' for example, as a result, whats the point of the query, you already knew the answer to be 'art' ?
6875	so, im left wondering what you think your code does, as far as i can tell, the first one for 'art' will return $citn as 'art' the second will return "fashion|fashion.." for each line in the tags1 table that it finds, the last update will probably fail if theres more than 1 fashion, as exploding it into an array im not sure how the sql will handle a php array dumped in there.
6876	the last query you dont show any code for, so.. im a little lost.
6877	i get the impression you wanted to explode the text of a given article, and then see if 5 or more tags it has appear in the cateogry.
6878	if so, i dont see this code doing that.
6879	ok, you want to do a post request with file_get_contents.
6880	i don't know if content-type is correct, normally api's use "content-type: application/json"
6881	i just had to test it on my server to see if it works.
6882	so i added the $post_type variable that should return the post type, and then i just put that in your class in the &lt;article&gt; tag, so you can differentiate :)
6883	when in doubt what your loop outputs, always do print_r() .
6884	this will show you what you are dealing with (arrays, strings, objects) so you easily know what to target :)
6885	assign the result of explode to a variable and pass that variable to end :
6886	the problem is, that end requires a reference, because it modifies the internal representation of the array (i.e.
6887	it makes the current element pointer point to the last element).
6888	', $file_name) cannot be turned into a reference.
6889	this is a restriction in the php language, that probably exists for simplicity reasons.
6890	php complains because end() expects a reference to something that it wants to change (which can be a variable only).
6891	you however pass the result of explode() directly to end() without saving it to a variable first.
6892	at the moment when explode() returns your value, it exists only in memory and no variable points to it.
6893	you cannot create a reference to something (or to something unknown in the memory), that does not exists.
6894	or in other words: php does not know, if the value you give him is the direct value or just a pointer to the value (a pointer is also a variable (integer), which stores the offset of the memory, where the actual value resides).
6895	so php expects here a pointer (reference) always.
6896	you don't need to explode or something else.
6897	you could get image extension by path_info() php function.
6898	please have a look on below.
6899	if you want to explode a file name.
6900	your month and year &lt;select&gt; boxes have name="q" so only the last one (year in this case) is passed to your php.
6901	i was able to solve this problem by using a slight delay in the refresh header.
6902	we set the header (which must be done before any methods which might output, like setcookie), and then set the cookies.
6903	i added a message so that the user doesn't see a blank screen for those couple seconds.
6904	as far as i can tell, this follows the algorithm described in your link, and should work correctly.
6905	(apart from the syntax error you have in the definition of $suffixesa - you're missing a couple of apostrophes.)
6906	you can also combine those two str_replace s into one: $word = str_replace(array('j','v'), array('i','u'), $word); , or, since you're replacing single characters with single characters, you can use $word = strtr($word,'jv','iu'); - but i don't think that will make much difference in practice.
6907	you'll have to try it out to be certain.
6908	furthermore i adjusted the arrays so they can be used more effective.
6909	i changed the $quewords array so it can be used for a fast hash-table lookup, not a slow in_array .
6910	furthermore i have saved the lengths for the suffixes in the array.
6911	thus you don't need to compute them at runtime (which is really, really slow).
6912	i may have made more minor optimizations.
6913	i don't know how much faster this code is, but it should be much faster.
6914	furthermore it now works on the examples provided.
6915	the mysqli_connect() needs to be told what database you want to connect to.
6916	remember mysql can run 100's of databases simaltaneously.
6917	now both objects reference each other, but they are both not referenced from anywhere else, so they are unreachable.
6918	this is, what the circular-reference gc tries to detect, but to find them, it iterates over every known object and finds out, if there is a reference "from outside".
6919	its a little bit more complicated, but simplified thats it ;) so in structures with many references, espcially circular ones, it is a huge task.
6920	i think you missed the mysqli package in this server.
6921	if apt-get says it is already installed try to do a ping to localhost, if don't resolve edit /etc/hosts and check the line where localhost points to 127.0.0.1should be there, if not, your server its horribly configured!
6922	just adding this since i didn't think it was clear, but the problem is definitely your production version of php.
6924	if $sql is empty, that means your $time is empty; have you tried to check what is the value ?i think your $time=$_post['tar']; might be returning null from the form or at least not one of the case you tried.
6925	you are trying to access an associative array of arrays(multidimensional) with $row['trend'] etc... while you don't have it, as indicated in your first var_dump.
6926	your first var_dump should look like this:
6927	you should always use the session_start() function.
6928	if a session exists, it will continue it, otherwise it will create a new session.
6929	but putting custom objects in the session is dodgy and something i would generally try to avoid.
6930	to be able to do it you have to have defined the class in question before calling session_start ; if you don't, php's session handler won't know how to deserialise the instances of that class, and you'll end up with the __php_incomplete_class object .
6931	if you must take this approach, make a copy of the data from $_session into a local $mysession array.
6932	however, i have to say i think the whole idea of a safestring is dangerous and unworkable; i don't think this approach is ever going to be watertight.
6933	whether a string of raw text is ‘safe’ is nothing to do with where it came from, it is a property of how you encode it for the target context.
6934	if you get another text string from a different source such as the database, or a file, or calculated within the script itself, it needs exactly the same handling as a string that came from the user: it needs to be htmlspecialchars ​ed.
6935	you're going to have to write that escape anyway; the safestring gains you nothing.
6936	if you need to send the string to a different destination format, you would need a different escape.
6937	you just have to include the safestring.class.php before you call session_start() when you want to read the safestring objects from $_session variable:
6938	and yeah, if you are using php framework that (most probably) calls session_start() internally, make sure you require_once the class file beforehand (use hooks or whatever mechanisms that the framework provides).
6939	i know it's been years since this was asked, but i'm posting my answer because none of the answers above actually explain to the op what is actually wrong.
6940	if you don't want your session objects to convert to __php_incomplete_class , you can do it by either requiring the class files before you invoke session_start , or by registering an autoload function.
6941	the problem is that you explode at the char % and not at the char ,.i think what you need is:
6945	you don't need to call pdo::query() .
6946	for a prepared statement, you call pdo::prepare() , then pdostatement::execute() performs the query and you can retrieve the result using pdostatement::fetch* .
6947	if you need ids then fetch them from db and return in ajax call (i guess this is the id you are talking about).from this point you can use something like this, that you cache the returned results in e.g.
6948	associative array:$arr[value] = id;and if user selects one of the values you can get the corresponding id.that's one method i guess.
6949	btw.some tips for the future:1. the id's fields should have unique values.2.
6950	you should consider protecting your query from sql attacks.
6951	here you do not even escape the string which is given by the user.3.
6953	yes it's relatively safe to do, as long as you have full access control over your server (no shared hosting whatsoever).
6954	seriously, your code contains a serious vulnerability called sql injection .
6955	if you don't fix it, your website can and will be compromised very easily.
6956	to take that into account, what you should do is to set it to 0 by default , unconditionally, and then , if the checkbox was checked, set it to 1.
6957	yes, it does require you to possible do 2 queries in a request, but it's the only way to ensure you get the result you need.
6959	you can call $.ajax() directly, but for most cases, you can use one of the convenience wrappers.
6960	in this case, i think $.load() will meet your needs.
6961	so, let's say your php file is called detail_ajax.php and it returns the html you wish to put in your div (with class data ).
6962	all you would have to do then is this:
6963	if you want to pass data to detail_ajax.php , you can pass it along this way:
6964	you are looking for $.ajax() .
6965	however, 3 things will need to take place for this to happen as you intend.
6966	first, we need a reference held in the html that is generated by the table so we can streamline the server request.
6967	when you generate the table, add a unique data-name string to the td.
6968	now, we need to detect the request on our page so we can properly return the data to the browser, we'll look for $_get['name'] as per your example.
6969	now we need to employ ajax to bridge the gap between the server and the browser.
6970	produces a cartesian product between cars and customers .
6971	that is, it returns all combinations of rows between the two tables.
6972	to avoid this, you need a join.
6973	if you will always have at least one sold car per customer (ie, it's a sales database), then use an inner join .
6974	if, however, you may sometimes have customers that have not bought a car, but still want all customers, then use a left join .
6975	this will cause all of the car columns to contain null if there's not a corresponding record.
6977	you problem is quite simple: you are using explode on the wrong thing.
6978	if your code/comments is right $products is an array and you explode it.
6979	you probably have your php error level too low because this produce a php warning: php warning: explode() expects parameter 2 to be string, array given in php shell code on line 1
6980	so from there 2 solutions: either $products is an array of strings and you can do
6981	or $products is an array of objects (as your code comment suggests) and you go with:
6982	remote_host usually contains the result of a reverse dns lookup and can also be done in php using gethostbyaddr in the case, that your server does not fill this environment variable.
6983	it gets derived from the $_server['remote_addr'] value, which represents the (ip)-address as its name suggests.
6984	banning ip-addresses on a shared host is not optimal and i will come to that later.
6985	assuming you are using a shared host i would not let the script die like you did.
6986	instead i would just return a http header in order to (at least) save some bandwidth on that ip, like:
6987	and returns something like this to your visitor (using chromium):
6988	a cleaner and more professional approach to block ip addresses is not possible on many shared hosts, but should be mentioned here anyways, because it saves bandwidth, memory and cpu-cycles and can be described as dynamic creation of firewall rules .
6991	your php application could just write to a log file and fail2ban would disallow any connection attempt from that ip address to your server.
6992	root servers ain't expensive nowadays if you would like to try it.
6994	if you didn't, someone could store a malicious &lt;iframe&gt; , or &lt;script&gt; in your code.
6995	now, you don't necessarily need to protect the output.
6996	if you sanitize the data coming in, you can store the sanitized data instead.
6997	doing it this way allows you to purposefully store non-sanitized data for maybe styling purposes which would be ready for output.
6998	as far as your example is concerned, it is correct.
6999	that is one way you can do it.
7000	also note that a context may require different types of encodings.
7001	for example, if you want to print a javascript value embedded into &lt;script&gt; , you have to obey both javascript and html syntax rules.
7002	i know there is already an answer to this but it may be worth noting that var_dump outputs boolean values better it just has worse formatting imo.
7003	you need to concatenate the phone number to the message in order for it to be sent.
7005	probably not the best answer but have you considered using var_dump instead of print_r?
7006	var_dump only goes down a couple of nesting levels so the issues with circular references that edmondscommerce mentioned would not cause your memory to become exhausted.
7007	when this form is submitted, $_post['firstname'] and $_post['lastname'] will be arrays, so you can loop through them and insert them into the new table.
7008	note that you should use a class rather than id for the shuffle_results div, because you're adding one for each row in the results.
7009	unless you have hundreds of keywords in your page, performance should not being impacted.
7010	but you sould better re-write the source files, instead of making the replacement at each request.
7011	the double output is obvious because for each of your resultset from the query, you are running a for loop the number of times equal to the number of responses by the user.
7012	a solution might be that inside the while loop, you can use in_array() to check if $row['answer'] exists in $_get['answer'].
7013	and accordingly decide if to check or uncheck the check-boxes.
7014	the problem is that the value isn't being passed in querystring, and therfore $_get doesn't recognize it.
7015	as there is no element bearing that value and nothing inside that conditional statement will execute.
7016	therefore, you need to change it to the following by adding value="add to records" :
7017	do note that if you change it to value="add to records" with lowercase "to" and "records", the conditional statement will fail.
7018	also this name="post_title" seems related to $_post['title'] and doesn't match.
7019	therefore, you need to make them match in array names.
7020	you may have to pass the connection parameter to it, such as mysql_query ($query, $link); .
7023	you want to use array_map() here and concatenate both corresponding values from both arrays together creating a new array, e.g.
7024	of course if you just want to output it you can use echo inside array_map() .
7025	and if you have an unknown amount of arrays you want to merge by concatenation you can do it with call_user_func_array() , e.g.
7026	here's a good tutorial for pdo in php if you want more.
7027	php doesn't decode that data and map it to the $_post super global automatically.
7028	if you want php to do that, you need to send the data as application/x-www-form-urlencoded (ie similar to the uri of a get request: key=value&amp;key2=value2 ).
7029	you can send data using the applicatio/json header, but to get at the request data, you need to read the raw post body.
7030	you can find that in the php://input stream.
7031	just use file_get_contents to read it:
7033	you should also use a prepared statement and password_hash() .
7034	your present code isn't really all that safe to use, if you're going live or are live with this.
7035	you should also create a logout file and to destroy the session.
7037	use a site-wide string just to alter the standard hash like md5("mysitesalt!!"
7040	if the enctype="multipart/form-data" is added to the form this will stop working for file type fields.
7041	but it doesn't have anything to do with you errors.
7042	not sure about the missing argument error, but it seems like you have an argument defined in userdata , but calling it without the argument.
7043	the second error is about the variable scope .
7044	your connection handler, here it is $mysqli is undefined inside the function userdata , because it tries to find a local variable $mysqli and fails.
7045	you have to either pass the handler inside the function as a parameter, or restructure your code in a way, that you can get the handler from the other place.
7046	first of all, please specify in the question which line is 116, it would be much easier to answer if we can see the exact operator.
7047	looking more closely at the code, it looks like you are mixing pdo and mysql functions.
7048	it looks like you're getting a connection with pdo, preparing a statement with pdo... but you are calling the msyql_error , mysql_num_rows and mysql_fetch_array functions.
7049	replace those calls to the mysql_ functions with the appropriate pdo functions.
7050	each identifier (the column name and the table name) can be escaped separately.
7051	the dot character between the table name and the column name should not be escaped, because that's part of the sql text, not part of the identifier.
7052	or, for a query equivalent to the original query ( with the dot character as part of the column name), like this:
7053	(that's not invalid, to include a dot character in a column name, but it is an unusual pattern, one that we don't see very often.
7054	i think that's because that pattern leads to more potential problems than whatever problem it was intended to solve.)
7055	if the query works the way it is in your code, then that dot character must be part of the column name.
7057	you should take a look at those.
7058	if your field is an integer, consider using an int cast (int) before appending the value to the query.
7060	you can get the current page's url using php's $_server method.
7061	here is a tutorial - php: how to get the current page url
7062	then you may pass this data into login form page using get method, so that login page (containing login form) can catch this url.
7063	then you may include this url data in the login form either as a hidden field, or as a part of the action's target php file (like &lt;form method="post" action="target.php?targeturl=someurl.com/somepage" ) where the form's target script file can read this url.
7064	then after processing login data, the processing script can redirect browser to the target url.
7065	print_r() will automatically print to the screen.
7066	you need to set the second parameter to true to actually capture it in a variable.
7067	you should change $_post['add to list'] to $_get['add to list'] since a click in a link generates a get request.
7068	with ?add to list you are creating a variable, and you should not create variable names with spaces you are not passing an id as a parameter or any way of identifying the specific row, so if the user clicks the link, the variable will be set and for all the elements on the loop will be an insertion in the andrew table.
7069	you should receive the id and make a new query to the db
7070	but as have been said, you will try to look soon for a replacement for mysql_* functions
7071	you query to insert element in your table is not properly built.
7072	your values are in a php array which is not interpreted properly between your double quotes, it should be something like this:
7075	well, first i don't see anything assigning anything to the session values, but the issue with your code is in this pattern: '$_session[itemorder][1]' .
7076	first, i would make sure that mysql is expecting a varchar there and not an int.
7077	if it is an int, good form would be to make sure it isn't quoted.
7079	put braces around the lookup to make sure it knows to treat it as an array, and then put quotes around all string indexes:
7080	i do feel obliged to point out that that system does not seem scaleable, and column names like agree_pppg_02 are not descriptive.
7081	you may want to go to the codereview stackexchange site to see if they can't offer tips on database design.
7082	if you want to check if the session is started, you can use
7083	the problem is that the session als also there if the user isn't logged in.
7084	you have to check if e.g.
7085	you have a small glitch in your code.
7086	it should be $bccfiled.="," .$email; , note the .
7087	before the = , otherwise you overwrite the variable content in every iteration of the loop.
7088	but even better style would be to store the addresses in an array and implode() them afterwards like this: implode(',',$bccfields) .
7089	so the lower part of your script should go something like this:
7090	note that i have not tested this, just typed it down.
7091	but you should get the idea when you study it.
7092	to compliment marc b's answer and the usage of a ternary operator , you can use sessions to pass on that ( hidden ) value to another page and any subsequent page when using sessions.
7093	sidenote : although you can pass that ( hidden ) number in a second page using $hdnnumber = $_post['hiddennumber']; you are limited to just that.
7094	should you want to use it for db-related work, you could assign it to a session variable that can subsequently be used anywhere else thereafter.
7095	you were pretty close, but some syntax issues and some addition of inputs (you didn't have any in the form) that you tried to use as data for your php submission didn't exist.
7096	there was no form submission, but the button act the same as a submit and we were not stopping their default action.
7097	no field with the name post_id eists in your form.
7098	you are however passing the id manually through the url in your form action.
7099	to get the id, you would use $_get['id'] rather than $_post['post_id']
7100	you have a few options as to how to extract data from the uri.
7101	every segment after box/ in the uri will be passed as an argument to the box method as levye suggested .
7102	use the url class to get the information you need.
7103	you should be ok with method 1. once you get into remapping and rewriting urls then method 2 will sometimes be your salvation.
7104	put die(var_dump($this-&gt;uri-&gt;segment_array())); as the first line in your controller and then access http://localhost/mediabox/home/box/this_is_argument_1/this_is_2/4/500/six/ from your browser.
7105	$this-&gt;uri-&gt;segment(3); will hold the string this_is_argument_1 , $this-&gt;uri-&gt;segment(5) == 4; etc.
7106	keep in mind that segment 1 is the name of the controller and 2 is the name of the method being called.
7107	also note that the url class is initialized automatically by codeigniter so there is no need to load it manually (nor do you need to explode() or anything like that).
7108	well array_pop changes the internals of the array.
7109	whereas end just returns the last element, this is equivalent to a "peek" command.
7110	if you want the array to shrink use array_pop if instead you want to retain the original array use end
7111	if you read the documentation for pdostatement::rowcount you will see this line
7112	the reason why the result aren't displaying is because you fetched all the row already so you cannot use fetch() again.
7113	use the array returned by fetchall() instead and use a foreach instead
7115	have a look at mysqli ( http://uk3.php.net/manual/en/book.mysqli.php ) or pdo ( http://uk3.php.net/manual/en/book.pdo.php ) and parameter binding.
7116	yeah instead of using global you could very well save it in a $_session variable as this is a super-global array and it can be accessed under functions or nested functions too.
7117	first of all, i don't see the mysql_query() - the function to execute the query.
7118	also, have you defined the $v_id before using it in the query?
7119	similar to saying $var += 2, or $var = $var + 2. in this case, it's $showplayer = $showplayer | isset....
7120	there is no such function called filter_val .what you are looking for is filter_var()
7121	in order to solve it, specifically for symfony2/travis, i had to do var_dump($client-&gt;getresponse()-&gt;getcontent()); in the test and let travis rerun to determine exactly what the test was seeing.
7122	it looks like symfony2 was running in dev mode by default (to be expected) and was showing a few warnings that were suppressed in production mode, which was running locally.
7123	you first have to implement the user login part.
7124	and after that, get the specified user id or login credentials and use that in your query.
7125	it looks like you just need to explode again on the colons, so perhaps something like this ?
7126	if mysql in your mamp is running in non-socket mode, you can try replacing the host value with 127.0.0.1 which connects via tcp on via port to the local machine--you'll need to figure out which port it's running on if it's not the default port.
7127	you can see if it's starting in socket mode, and what file it's using if it has a config param like:
7128	you can also investigate what open socket mysql might be using by following the answer in this question: error: &#39;can&#39;t connect to local mysql server through socket &#39;/var/run/mysqld/mysqld.sock&#39; (2)&#39;
7129	if you're running in socket mode, you need to make sure pdo knows the path to the socket file.
7130	one way to do this is specify the unix_socket instead of host in the dsn:
7131	please print_r the $user variable and use the key of the array in where clause.
7132	$user = $result-&gt;fetch(); probably returns an array.
7133	it could be an array of users or a user array.
7134	try var_dump($user); to inspect what it holds.
7135	if you want the nth value then use array_values to convert your named keys into numeric keys (in a copy of the original array)
7136	you probably want to use some unicode character encoding, for example utf-8 , and htmlspecialchars.
7137	because there isn't any need to generate "html entities" for "all [the] applicable characters" (that is what htmlentities does according to the documentation) if it's already in your character set.
7138	sometimes you're writing xml data, and you can't use html entities in a xml file.
7139	because htmlentities substitutes more characters than htmlspecialchars .
7140	this is unnecessary, makes the php script less efficient and the resulting html code less readable.
7141	htmlentities is only necessary if your pages use encodings such as ascii or latin-1 instead of utf-8 and you're handling data with an encoding different from the page's.
7143	this leaves your string more human-readable than it would be if you used htmlentities () to encode absolutely everything that has an encoding.
7144	when there is no need to encode all characters which have their html equivalents.
7145	the second one is shorter, and does not cause any problems if iso-8859-1 charset is set.
7146	when the data will be processed not only through a browser (to avoid decoding html entities), if the output is xml (see the answer by artefacto ).
7147	you should use htmlspecialchars($strtext, ent_quotes) when you just want your string to be xml and html safe:
7148	however, if you also have additional characters that are unicode or uncommon symbols in your text then you should use htmlentities() to ensure they show up properly in your html page.
7149	&#039; will only be encoded by htmlspecialchars() to &amp;#039; if the ent_quotes option is passed in.
7150	&amp;#039; is safer to use then &amp;apos; since older versions of internet&nbsp;explorer do not support the &amp;apos; entity.
7151	technically, &gt; does not need to be encoded as per the xml specification, but it is usually encoded too for consistency with the requirement of &lt; being encoded.
7152	you can check the following code for more information about what's htmlentities and htmlspecialchars:
7153	you need to pass it a little differently, like this:
7154	in your php don't use $_post['forminfo'] but rather $_post['nameoftheinput'] .
7156	this prevents sql injection attacks, which i suggest you read more about :)
7157	1.problem is you are using $_post['genre'] in your query but it should use $genre which is parameter value you are passing.
7158	the notice really had to do with the error.
7159	the problem is, zend_session_exception gets registered as error handler for session_start() and session_start() passed the small notice on to zend_session_exception.
7160	even though it’s only a notice (which does not get fired on the production system, thus it worked there), zend_session_exception gets fired and it sets zend_session_exception::$sessionstarterror to an error.
7161	you can see this in this line ( $startedcleanly indicates the return value of session_start() ): if (!$startedcleanly || zend_session_exception::$sessionstarterror != null) {
7162	you can use the attribute onclick=?
7163	in your button tag in combination with your js function: onclick=removetag(this) .
7164	php: the trick is you need to retrieve the variable sent by ajax with $_request['...'] not with $_get['...'] or $_post['...']
7167	then, simply assign the values for your cart to session variables like so:
7169	of course, you'll have to create the function scrub to scrub your input, but that's outside the scope of the question.
7170	the var_dump() function could not do what you want ?
7171	if you could display your delete.php, perhaps i can edit this post and assist you further but, so far... a check is required and you can use as many forms as many you like (even on one page) but, make sure they all have different id/names.
7172	pdo escapes "%" (may lead to sql injection) : the use of the previous code will give the desire results when looking to match partial strings but if a visitor types the character "%" you will still get results even if you don't have anything stored in the data base (it may lead sql injections)
7173	i've tried a lot of variation all with the same result pdo is escaping "%" leading unwanted/unexcited search results.
7175	you can use a regular expression to do that.
7176	by no means am i a master of regular expression, but a simple example that meets your immediate need is:
7177	without seeing any more code, i'd guess that your redirect when there is no $_session['auth'] is happening when you're trying to access the register page.
7178	you'll probably want to add an exception so that anyone can access it.
7179	if you also need the array keys look at the function of array_keys.you will get an array of every key.
7180	you will be able to figure out if the sql query is getting created correctly.
7181	obligatory warning: this is not a good way to make queries.
7182	since deletepatient() is not firing, the issue must be earlier in the source.
7183	since the query is not the source of the issue, remove the debug statements:
7184	since the delete itself is not part of the issue, your next step is to debug the other parts of the code.
7185	you can remove the last ?&gt; from .php files.
7186	this will save you from some weird header bugs down the line with trailing line breaks in your outputs.
7187	output plain html if you are sure about the contents.
7189	if it is text, then use htmlspecialchars to convert it to html.
7190	if it is untrusted html then you need to sanitise it to make it safe.
7191	that generally means parsing it with a dom parser, and then removing all elements and attributes that do not appear on a whitelist as safe (some attributes may be special cased to be filtered rather than stripped), and then converting the dom back to html.
7192	tools like html purifier exist to do this.
7193	then you have the third case and need to filter the html.
7194	it looks like you're storing raw html in the database and then rendering it to the page later.
7195	if you want the outputted data to be treated as html by the browser then no, htmlspecialchars is not the solution.
7196	however it is worth thinking about using striptags to remove script tags in order to combat xss.
7197	with striptags you have to whitelist the allowable tags which is obviously tedious but pretty safe.
7198	it might also be worth you taking a look at tinymce and see how they deal with such things
7199	you should just try to connect and if it fails, then you know the creds are wrong.
7200	you can run this in your code, or create a method in your db class to check this and return true or false.
7201	(or i guess you could modify the constructor to throw an exception, but i don't think that's the right way to go)
7202	this way, when you'll write your unit test for the database class, it will be easy to inject a mock object
7203	you should use mysqli if you cannot then dont mix them.
7204	see your last line you have mysqli_close($connect);
7205	as for the parsing the json data, you just need to serialize it, so that you can access them, make sure you log everything.
7206	if your code has still issue, you can try this:
7208	in your case you decided to go for a mysql a database.
7209	that is the most common choice that goes along with php!
7210	notice : the new standard interface to access a mysql database isn't through mysql_* functions anymore!
7211	this extension is deprecated already and will be removed within the next versions of php!
7212	its preferible to go with mysqli_* functions instead or to use one of the two object oriented alternatives available mysqli and pdo
7213	ok, now let's head onto the add friendship example!
7214	conceptually you need three pages only to accomplish your task, i wont go into detail too much because in the end the code is simple to write... but you need to understand sessions/get variables and how they are different, and still able to interact each other!
7215	other_profile.php this pages grabs the information of the people from the database, and addresses the "add friend" button or link
7216	as you can see global doesn't mean that you can pass the variable through different users at all!
7217	every user belongs to its own session within its own pages and the only way cross information, is to use some sort of database!
7218	it can be a file a dbms or whatever!
7219	it just need to be on the server and both users have to be able to read and write on it!
7220	remember : you have to call session_start on each page the session needs to be transported, furthermore session_start has to be called before anything is sent to the browser, so its best to place it at the very beginning of your page!
7221	try to place isset in your php to make sure they get all the values (works like required field) also i think the problem is in your querying
7222	also, are you trying to print_r($_post['message']) in the page you're redirecting to from javascript?
7223	even your submit input is sent (as it is part of the form ).
7224	and even without receiving anything, $_post will return an empty set array, so neither isset is a good option to check post fail or success.
7225	you need to evaluate a specific field, like $_post['text'] , for emptiness instead.
7226	also, try using == instead of === == will cast the value of $_post, so if it's null, it will be evaluated as false instead
7227	you need to get your buttons to submit to a link, and then have the php unset the content.
7228	at the top of tabledata.php , you can then have logic handling the delete.
7229	simply check if the delete is set, and then attempt to unset from there.
7230	you will want to have further validation that checks if post delete within the bounds of $_session['citydata'], but the basic idea is there.
7231	you are using db class as an abstract class, you should create an object of it.
7232	and you should also pass $dsn, $user, $password.
7233	if $row['id'] is array of id then you have to make these changechange name close in this function to carry array of id as close[]
7234	you cannot mix javascript and php like this, and $row does not - or shouldn't - actually exist in this context due to it not being within the foreach statement or - if this is a seperate js file - you have no corresponding context.
7235	to achieve what you need, i'd suggest using ajax and setting a get request to a file which then returns an array which you can then use in your javascript.
7236	note, $row should be used like this: $row['columnname'] (not just for readability).
7237	output is now the array of all your results and can be used.
7238	setcookie will not work if you include a.php in b.php .
7239	a common way to avoid outputting anything is to start an output buffer.
7240	at the top of b.php put:
7241	edit: you have some errors in your you should add exit(); after your header(); also, $_session['user'] is just a variable, change it to isset($_session['user']) because i think that is what you want to do
7242	you could just make the whole thing in one file.
7243	this is crude and totally incomplete, but something like this -
7244	but as you asked, this is all on one page and that's the basic idea.
7245	** update 1 **i updated this example to consider a dropdown that only shows after a result is made.
7246	it will re-submit the form with an added order parameter.
7247	this example does not consider pagination and makes the assumption that you have a sanitize function that cleans the input.
7248	obviously you should be using mysqli or pdo as they will both offer solutions for this.
7249	do not rely on mysql_ functions like mysql_real_escape_string.
7250	all mysql_ is deprecated and should not be used anymore.
7252	you use the querystring session , but in code you can't refer to session , you must use session .
7253	you mention ?session=2 is used, but in code you refer to $_get['session'] .
7254	the case of these two should match.
7255	so you can increase the time.
7256	so set a date in the future that the cookie isn't deleted.
7257	the questions and answers are stored as a string.
7258	so, we need to explode them when a new line (\n) appears.
7259	first thing you need to explode the string by _
7260	so if you pass [1, 2, 3] to visitarray you will have 1_2_3 , 1_2 , 1 in the result array.
7261	update: if you need to remove the position param you could replace the forloop with list as below:
7262	so you need to call callvisit() by passing two params, the array, result array (where result should be stored)
7263	it's easier to simply use the internal redirect to get the request from your webserver to php and let php deal with the request parameters.
7264	so if the request was made to www.site.com/user/register?layout=red var_dump(parse_url($_server['request_uri'])) would give you something like this.
7265	so in your case this doesn't help, the use of flag l|last is enough.
7266	as @arkascha already mentioned, to keep the other get parameters, you must use the qsa|qsappend flag
7267	you could try to use addslashes instead of mysql_real_escape_string before you add the image to db in addproduct and then when you query the db to do something like this:
7268	i guess i'm late, but you can also limit the results of explode to 5 :
7269	in your code there is no quantity based on a particular product.
7270	the quantity is assigned to the session variable $_session['qty'] .
7271	if you want to store the cart items based on individual product based.
7272	you should save that using an array of information.
7273	you could also try what you already have, but include exit; at the end like this and add !
7274	otherwise, using if (isset , you're telling "if it is set" which it isn't.
7275	i think you want to get $_server[server_name] from php so you need to add &lt;?php echo when creating the url to get from.
7276	also you need to have echo when opening the php tag to echo, not .
7277	.dot is used to concat string in php like this "aaa" .
7278	"bbb" (without opening the php tag)
7279	this just extracts all unique_id values into an array like array('banana', 'apple', ...) .
7280	then finally, this goes through the original arrays again to filter out all elements whose unique_key is not in the array we created in the previous step:
7281	well if you are testing it on a dev environment then you can simply ignore the cloudsql routing now.
7282	i believe you need to do the following verify you can connect with simple mysql connect function and then make sure mysqli is installed (since on the web installation steps of google app engine that was not included)
7283	you need to reconfigure your php installation to include mysqli
7284	then you may need to re-run the configuration to enable mysqli &amp; pdo drivers
7285	the action attribute will default to the current url.
7286	it is the most reliable and easiest way to say "submit the form to the same place it came from".
7287	there is no reason to use $_server['php_self'] , and # doesn't submit the form at all (unless there is a submit event handler attached that handles the submission).
7288	when using $_server['php_self'] it is very easy to inject malicious data by simply appending /&lt;script&gt;... after the whatever.php part of the url so you should not use this method and stop using any php tutorial that suggests it.
7289	in addition to above answers, another way of doing it is $_server['php_self'] or simply using an empty string is to use __dir__ .
7290	or if you're on a lower php version (&lt;5.3), a more common alternative is to use dirname(__file__) both returns the folder name of the file in context.
7291	the value of $_server['php_self'] is taken directly from the url entered in the browser.
7292	therefore if you use it without htmlspecialchars() , you're allowing hackers to directly manipulate the output of your code.
7293	for example, if i e-mail you a link to http://example.com/"&gt;&lt;script&gt;malicious_code_here()&lt;/script&gt;&lt;span class=" and you have &lt;form action="&lt;?php echo $_server['php_self'] ?&gt;"&gt; , the output will be:
7294	however, if you used &lt;form action="&lt;?php echo htmlspecialchars($_server['php_self']) ?&gt;"&gt; , the output would be:
7295	when you submitted the form, you'd have a weird url, but at least my evil script did not run.
7296	on the other hand, if you used &lt;form action=""&gt; , then the output would be the same no matter what i added to my link.
7297	this is the option i would recommend.
7298	also, this works on the raw output, not an array.
7299	i would change exec() to system() and capture the output using an output buffer.
7300	or, you could modify the code and use preg_match on each line of the array from exec.
7302	you can also explode your string using a regular expression, depending on what you really want for data.
7303	if you want extract numbers like "9.860", "9.750" and "10.250" like this:
7305	the problem is that you're using a mysqli resource in a mysql function (note the missing i ).
7306	there are 2 different extensions there.
7307	if you're using mysqli , don't switch to mysql .
7308	so just change that function to mysqli_insert_id($dbc);
7309	your are using binary or | instead of the boolean or || in your if clause.
7310	instead of manually localizing the variables, you might as well extract($_request); - this is probably bad advise, since you might not understand the security implications of your script running entirely in the global scope.
7311	so the (better) alternative would be to manually foreach ($_request as $key=&gt;$value) and thus fill up your $_session.
7312	do so likewise in the second script.
7313	remember: foreach loops are our friends .
7314	likewise the html output can be accomplished in a loop, reducing the overall code size.
7315	you might be missing a session_start, or also likely: have premature output and got a notice which you didn't tell us about.
7317	in the second page "error page", you placed session_start but after you tried to read the $_session var, so place it in the top of that "error page" instead of the middle.
7318	this value tells php which session id to look up for you.
7319	without it, calling session_start() will generate a new session, which appears to be what is happening in your case.
7320	check if the query executes first.its also better to use this one
7321	you can hash current password with user's salt then check if they are equal.
7323	and for echoing your errors you can have a paragraph with error id
7324	this has nothing to do with bootstrap, which is just css + a bit of js.
7325	forms are meant to format http requests based on user input values - in this case you just need a link:
7326	if you want to fancy style it in bootstrap, add something like:
7327	but also you need to sanitize the data first so...try this
7329	edit...i also noticed your inputs aren't closed, there should be a / at the end of each...
7330	if you used the function somefunction($conn) , that would make your code much messier, since you wouldn't actually have universal access to $conn from anywhere.
7331	you should go with solution b imo.
7332	that way, you can have simple access to it database::$conn which will be consistent throughout your script.
7333	you could should have an initialize function (you could use a different name if you want) that will initialize database::$conn , and you can then use that to initialize other things on the database class later, if desired.
7334	solution b: database::$conn should be public if you want to be able to access it by database::$conn from anywhere.
7335	if it's private, then you would always need to call database::getobject();
7336	in your code you would simply iterate through your post array and concatenate the values creating a new variable with a string containing the values i exampled before.
7337	i'll call such variable $my_selected_fruits just so i can use it in the sql query i'll example below.
7338	to get them from the database later will only need $fruits = explode(",", $db_array) where $db_array will be apples,bananas,oranges (or whatever there is stored in the database) and this will output:
7339	i don't know exactly why you are trying to do this, but since you insist, i now find it better to just create a json object and save it on the database.
7340	you don't need to know json, fortunately, because you'll only need it to save it in a text column.
7341	so using json_encode() you would create a json object like the following one and save it in the database (it's an example, depending on your array, it will be encoded differently, you don't need to worry about this json):
7342	after that, you can play with your php array again, for example, exploding it.
7343	$message , a string, is where an array of matches is supposed to go.
7344	explanation: if the cookie is set already => !isset($_cookie['domain_newvisitor']) and user is not admin you are setting cookie.
7345	then the cookie will exits every time.
7346	as you are creating it if it is first time and checking if it exits.
7347	now you can use $cookievalue in js by passing it from server to client.
7348	strip_tags is useless, because it is only relevant in an html context.
7349	any one of the other two methods would be sufficient to prevent sql injection.
7350	generally, just use the appropriate escaping mechanism for the language you're dealing with.
7351	in this case you're dealing with sql, so mysql_real_escape_string alone is fine.
7352	see the great escapism (or: what you need to know to work with text within text) for a step-by-step approach to escaping.
7359	i am sorry, but your code is bad (a little bit).
7360	very bad to read and understand what your code is doing.
7361	you need split code by logical parts.
7362	one part is a server side which wrote by php .
7363	for mysql to best use pdo.
7364	front part need contain only html .
7365	css and javascript in other files and include by html.
7366	or, all of this you can do with some frameworks, instead writing all by himself.
7367	then access the folder from the root directory.
7368	for example: href="http://&lt;?php echo $_server['http_host'] ?&gt;/demo/assets/css/style.css" href="http://&lt;?php echo $_server['http_host'] ?&gt;/demo/contents/test.php"
7370	if you want to print the value itself, try:
7371	if you want to see what comes from the function, try debugging with:
7372	in your example it looked like you were trying to unset the value instead of unsetting the key of the value.
7373	for the exact example you have shown this should work:
7374	your problem is with the names of the fields in your html form:
7375	i think you meant to call them quantity[] and item_id[] instead, so they will and up as arrays in your $_post variable later on, now they overwrite eachother, making $_post['item_id'] only contain the last id in the database.
7376	the reason for that is that your array has a hole in it: it has the indices 0 and 2, but misses 1. json can't encode arrays with holes because the array syntax has no support for indices.
7377	you can encode array_values($a) instead, which will return a reindexed array.
7378	in addition to the array_values technique it is possible to use array_splice and remove an element and re-index in one step:
7381	lastly, you are lacking a where clause to pull only your selected product.
7382	the product you are displaying is being chosen at random.
7383	if you wish to display a single product, and a list all others that are not that product, you should use two separate queries, one that specifies the product and another that excludes it from your list of "other products".
7384	alternatively, you can display all products, but mark the selected product during your loop -- you can save this product to a second variable for use later in the page as well.
7385	if i understood you correctly, you just want to return the row from the database into a session, so you can use it later to construct html elements:
7387	if you insert $_post["location"] = "'' -- " into @frank provost's code, then you will update all the rows instead of the one with the fbid session key.
7388	if you have multi query enabled then you can insert $_post["location"] = "''; drop table users -- " into @frank provost's code, then you will drop the table users .
7389	you can take a look at my pdo implementation example on github: https://github.com/maartensch/database-pdo-mysql-class-php
7390	when you create a new object via $database = new mysqldatabase(); the method _construct() isn't invoked and therefore neither is $this->open_connection() and therefore no value is assigned to the property $connection which remains null and no connection to the mysql server is established .
7391	now when you call $database-&gt;query('something'); and there is no database connection mysql_query() tries to establish the default connection as explained at http://docs.php.net/mysql_query :
7392	fix the typo in _construct() pass $this->connection to mysql_real_escape_string(), mysql_query() and mysql_error() make sure open_connection() has all the parameters it needs, e.g.
7393	isset($db_server,$db_user,$db_pass,$db_name) or die('missing parameters'); add some debug output to see whether it has been called at all, e.g.
7394	echo "debug: this-&gt;connection = mysql_connect($db_server,$db_user,$db_pass);\n"; don't roll your own mysql class, use one of the gazillion existing classes, preferably one with broader acceptance.
7396	while using these functions, a user may encounter an error - notice: undefined index.
7397	this error can be avoided with the help of php isset ().
7398	this error will be notified, but that depends on the configuration of the server.
7399	notice: undefined index is a minor error and hence not notified by default.
7400	with the help of the error_reporting function, the type of error reported can be changed.
7401	you should also consider using php pdo.
7403	in your code you need $finalresult[$i][$j] because it's a 2 level array.
7404	this is caused when you've not set your form method attribute value to post so set that to post , using no method attribute will set it to get instead and your block of code will be ignored as you are using if(isset($_post['login']) {} so as no login isset , the code inside your if condition will be skipped.
7405	also, there are many many issues in your code, you are calling your query twice which is not required, not sanitizing your inputs, using mysqli_real_escape_string() is not enough consider learning a bit more about the basics and than get started with your project.
7407	mysql_connect() and mysqli_connect() use two different default ports from the php.ini file.
7408	i wouldn't guess that these would be different than the standard default 3306, but worth a check or try adding the path to the host url.
7409	i think your connection is fine, but you wouldn't want to check the object it returns as you have above.
7410	you'd want to use mysqli_connect_errno() .
7411	below is the example from php.net.
7412	you need to understand the difference between php sessions and cookies.
7413	cookies are strings that are sent by the server to the browser, and that the browser must send back to the server on every subsequent request, until the cookie expires.
7414	for example, if the server responds with a request with the header set-cookie: foo=abc123; expires=wed, 09 jun 2021 10:18:14 gmt , on every subsequent request until 9 june 2012 the browser must send the request header cookie: foo=abc123 .
7415	on the php script, $_cookie['foo'] will be abc123 .
7416	php sessions are based on cookies, but they don't store the values inside a cookie.
7417	if you store $_session['foo'] = 'abc123' , the server will not send foo=abc123 to the client as cookie, but will rather create a session stored on the server and will send as cookie only the id of the session.
7418	so, when you call session_start() , php generates a new session on the server, with an auto-generated id (if you're interested, you can read the id with session_id() ).
7419	it will then send (automatically) a cookie to the client similar to phpsessid=php_session_id_here .
7420	all of this is done automatically by php, and you don't need to worry about that.
7421	at the end of this story, yes, your code is safe.
7422	that is because you're not setting a cookie authenticated=pass (which will be insecure, as clients can easily overwrite cookies), but you're instead storing that value in the php session storage and the client sees only the session id.
7423	ps: instead of just storing a boolean 'authenticated', you may want to store more useful information in the session, like the user id of the authenticated user in the database or anything else that can be meaningful.
7424	ps2: php sessions have legacy support for browsers that do not have cookies enabled, but in 2015 that's meaningless (i wonder who still disables cookies!
7425	- if you do that, 90% of the websites will stop working).
7426	as a consequence, you should ensure that you have these two ini settings: (docs: http://php.net/manual/en/session.configuration.php#ini.session.use-cookies )
7427	sqlite_open was the function in the sqlite2 extension.
7428	what you've installed is probably the sqlite3 module, which requires sqlite3::open() instead.
7429	but you should not use the native interface either way.
7431	so first of all you loop over wrong array.
7432	array you looking for is under statuses index, so change your loop into:
7433	look at your print_r() and check carefully how sub array are build.
7434	if you want to print name of each tweet author, you should modify yor echo in foreach to:
7436	now $query is an array containing the separated values.
7437	then you do your query, but without further informations about that, i have to stop here.
7438	from what i can see, your script doesn't handle data from $_post['remark'] .
7439	you are only handling the $_post['present'] part of your post.
7441	based off your code, the "remark" is an array.
7442	brackets in name [ ] you would need something like:
7443	otherwise, if there is only 1 remark it should be renamed "remark" without the [ ] .
7444	$value is the value associated with the key.
7445	if you wanted to remove that value, you would unset the associated key:
7446	you can use array_multisort to order the array values by a second array of mt_rand values:
7447	here $order is an array of mt_rand values of the same length as $arr .
7448	array_multisort sorts the values of $order and orders the elements of $arr according to the order of the values of $order .
7449	i know this is old, i had a case where i needed the array key to be included in the csv also, so i updated the script by jesse q to do that.i used a string as output, as implode can't add new line (new line is something i added, and should really be there).
7450	i added the $number on to the hyperlink and then retrieved it with $_get on the next page
7451	if you want to access test value by $_post you have to use form like this :
7452	it's not bad per se, but function calls in php are relatively slow, so if you avoid array_push throughout your code, you may notice the effect.
7453	personally i always use the [] notation, mainly because i think it's cleaner, but it's also faster.
7454	even the documentation of array_push mentions this alternative as a faster one:
7456	it sounds as if magic_quotes_gpc is enabled in php (this is deprecated in later versions of php).
7457	in which case you'll need to call stripslashes() on the $_get value before processing it.
7458	you should also be url encoding the content before sending it in the get request (the encodeuricomponent() method in javascript).
7459	however, this is a lot to send via get, consider using a post request instead.
7460	try this code it's works for you.your code not working because of you have pass array in color so you need to implode your array and then paas to you mail.i have try this and it's works fine.
7461	i would check the actual value of $_session['action'] , as well as separately echoing out (or var_dump) other variables such as $emp_name for testing / ensuring they are actually populated as you expect.as jay blanchard mentioned, using $_session['somevar'] is better than using the global keyword.
7462	since you're calling the page directly, i'd probably setup a quick script to log the data to a file when the page is called.
7463	of course, you want the code neat.
7464	so you can make a wrapper function, like so:
7465	i think your problem is that you reload the page when you click on a button.
7466	so, instead making the input type to submit , you instead use button .
7467	also, use a hidden input to store your value when an user presses on approve or unapprove .
7468	from there, you can bind the buttons to event handlers (we will use click()):
7469	now you don't need to reload the page (which saves server-bandwidth and loadtime).
7470	and restart your xampp once you have applied the settings.
7471	start by placing the value of the clientid in the button value.
7472	then move the delete code up to the top of the script, and outside the loop.
7474	your error message is already telling you what goes wrong: there's simply no _name in $_post .
7475	i guess that you meant to supply these things using a html &lt;form&gt; , so maybe you forgot to make fields for that?
7476	anyway, you just rely on your user input, which is a security and stability hazard deluxe.
7477	you must always first check whether the data that comes from the browser of your user is what you expect, otherwise terrible things might happen.
7478	you $sql is something that your php/sql tutorial should have told you never to do.
7479	read this comic and then write a one-page essay about what you did wrong, please!
7480	you should have a method to check if a user is user_banned and a method to ban_user a user.
7481	cast the user_id as an array and you can do one loop.
7482	rather lengthy for what seems to be such a simple task, and i'm thinking that the mysqli::multi_query is probably still the best way to go about this (after using mysqli::real_escape to add the needed security) but other than the bulkiness of this function, it works and it's safe (from what i can tell) while keeping the server request cost to a minimum.
7483	alright well, thanks to user934258 i went back and re-examined the coding of this/these methods.
7484	by taking his advice i was able to cut about 25 lines of code from the banning method(s).
7485	but, with only a couple additional lines, and passing/injecting an extra argument i was able to make the code multi-purpose to incorporate the unban method which in turn removes about 77 lines of unneeded repetitive code (the unban was a mirror copy of the ban except it checked for a zero instead of a one in the db, and displayed a slightly different response.)
7486	for those of you in the future who may find this topic helpful, here is the final product of my code.
7487	note that very little error checking/filtering/sanitizing is occurring in these methods.
7488	i have a couple reasons for this: values of variables are checked in the script, i am the only one granted rights to do this, and the values for the vars like $user_id are pre-populated into checkboxes and drop-down lists with the exact values from the db so chances of a wrong $user_id is slim to none.
7489	ps: i don't know if i understood correctly your question, but i hope.
7490	so why not do a fuzzy search?
7491	when you explode the data, do something like this:
7492	i'll assume you know what to do with the results.
7493	quick update, if you are worried about users entering in last name first name middle, or what have you, you could always use the above but do a locate on the entire string:
7494	this will check both columns for any instances of any of the string.
7495	you should probably (after sanitizing the string, as was rightly suggested already) also remove any commas (but not hyphens) in case someone enters last,first or what have you.
7496	replace them with spaces and then reduce all multi-spaces to one space to be double sure.
7497	the problem i see in your function is that you return immediately after you check !isset($_post[$p]) .
7498	i believe you want to continue on to the next item and operate on that accordingly.
7499	also, you don't need to pass these by reference since you are not modifying any of the passed parameters.
7500	so, you can work in this string using whichever string manipulation function you'd want, like the ones you talked about.
7501	but note it will only replace the url in the href attribute when that attribute is the first one of the &lt;a tag...
7502	if you are working with an html document and want a "full" solution, using domdocument::loadhtml and working with dom manipulation methods might be another (a bit more complex, but probably more powerful) solution.
7503	the answers given to those two questions might also be able to help you, depending on what you are willing to do :
7504	if you want to replace two strings, you can pass arrays to the two first parameters of str_replace .
7505	if you want to replace all instances of ' &lt;a href=" ', well, it's what str_replace does by default :-)
7506	the addsponsor() function is calling var_dump on what it sees as null because the variables you are trying to access are in the global scope.
7507	this page explains it pretty well.
7508	also, please note that using output buffering ( ob_start , etc) is nice, but can be messed up by var_dump; something to watch for if you're in a page within an ob structure.
7509	i ran into that because of trying to capture a var_dump string in an output buffer for the json data to be dislpayed in an alert().
7510	you'll be able to resolve it, but keep it in mind.
7511	an example of a successful ob html approach is in the comment here .
7512	to take advantage of the insert speed of multiple inserts in mysql ( http://dev.mysql.com/doc/refman/5.0/en/insert-speed.html ), you can use a prepared statement that builds the larger query.
7513	this does add complexity over an more iterative approach, so is probably only worth it for high-demand systems or largish data sets.
7514	we're looking to generate a query that looks something like this:
7515	this is a general problem with most orms.
7516	they tend to use additional memory in order to improve performance.
7517	unfortunately, you will occasionally find a time when they use too much memory.
7518	the solution is just don't use an orm when you run into these situations.
7519	switch to something lower level like pdo instead when you need to process a huge amount of data.
7520	that will only use a few kb of memory and execute extremely fast (as long as you have appropriate indexes in the database).
7521	all we need to do now is add a condition to the ajax request page, in this case data.php, to exit if this isn't set, or if it isn't a request from our domain.
7522	what you have is an array of objects, so you can't access id with brackets .
7523	instead, you need to use -&gt; to get the object property directly:
7524	similarly, use array_pop() if the element is the last in the array.
7525	ok so i finally managed to have something that is actually working, here is the code to have a sign up form that needs to be validated by an administrator if someone needs it in the future:
7526	neither method is "more correct"; both are just as valid, the one you choose completely depends on the ux you are trying to achieve.
7527	where you are supposed to put the four components depends on whether you are using method a or b.
7528	if the form is on one page, and you're going to be submitting the data to another page via the action="example.php" attribute, the html for the form should (obviously) be on the first page, while everything else should be on the second ( example.php ) page (all the php and sql).
7529	if there's a validation error, you can use header(location: firstpage.php?error=something) to return users to the original page to fix their mistake.
7530	if you're doing everything on one page (by putting action="&lt;?php echo $_server["php_self"]; ?&gt;" or simply action="" , both of which do the exact same thing), you should do the validation when a user submits the form on that one page, and if there are no validation errors, insert the data into the database and redirect the user using php's header() function.
7531	you can make a method inside lomsdocumentlist class that unsets that variable objectids by using the array_search function.
7532	name="medid" => $_post['medid'] name="medid[]" => $_post['medid'][0] de last [0] will get you the first element of the array
7534	a form where the number of inputs is not set, for example a contact form where you can click on a plus icon to add another text input for multiple phone numbers.
7535	bacause its unknown how many phone numbers someone have its easier to just retrieve one variable as an array and iterate over this array after.
7536	in your code you have name="medid[]" and $_post['medid'] .
7537	so your form is sending an array but you retrive a normal variable.
7538	few things to say; first i don't understand the concept of using a query string for action when you are using post as a method for submitting the values.
7539	secondly if you are trying to consume the values from the query string as well; then i can't find the $_get[] in your entire program.
7541	also, the name="medid[]" won't create any array for php.
7542	is the ytube.php the same page where you have created this form?
7543	put that table into a form with method=post and when submitting you'll find all input 's in the $_post array by name.
7544	without an explicit variant of the function, there is no reason to expect a function to execute your callback, rather than simply leaving it as a variable.
7545	the array is now full of 10 copies of $something .
7546	that happens to be 10 pointers to our closure .
7547	there's no reason for php to think that that's not what you want.
7549	for an object, it will try to call __tostring() (or the equivalent "under the hood" for built-in objects), but closure has no such method.
7550	this is where your error is coming from.
7551	so, no, you haven't messed up exactly, but it's not reasonable to assume that php will execute a callback just because you know that's what you want.
7553	in the if statements where you have $_post[...] = 'some value' you need to use == to compare the values instead of = which sets the value of the variable.
7554	if your php application uses connection pooling to the database, and the database caches prepared statements, then yes, the caching will persist between pages.
7555	if the prepared statement caching is done by the client library, then this is more nebulous.
7556	you need to look at the docs for php-fpm and/or pdo to see how to tell them to use connection pooling.
7557	there should be an option in both to do it.
7558	you should be aware that mysql connection setup and teardown is actually very fast and many php installations do not use connection pooling because of this.
7559	either way, you should also invest time in your server settings, particularly the wait_timeout parameter.
7560	php is also designed around the idea that you create everything you need when your pages starts and it all goes away when the page finishes.
7561	most php code and libraries assume this is the case.
7562	it is quite a different paradigm than under java.
7563	when a request is served php "cleans" the instance and frees resources and other variables.
7564	this is done in several steps.
7565	since fastcgi keeps the process alive after a request not all steps are executed and not all memory is freed.
7566	eg(persistent_list) which is used by mysql_pconnect() , pg_pconnect() , ... this list isn't emptied between requests as long as the process keeps alive (could be, depending on the actual implementation, but that would defy the purpose of eg(persistent_list)).
7567	if you use persistent connections your script might get a "re-used" connection established during a previous request.
7568	to (re-)use a prepared statement directly you need the identifier for that statement (and that connection).
7569	when using (php-)postgresql this is simply a (connection-wise) unique string you pass to pg_execute() , so your script has no problem to gain access to the statement previously prepared by another instance (using the same connection).
7570	using mysqli or pdo-mysql you need a resource/object as statement identifier.
7571	that's kind of a problem since neither the mysqli nor the pdo extension seem to offer a way of storing the resource in eg(persist_list) between requests and you can't recreate it either.
7572	unless php-fpm offers such a "service" it's seems impossible to re-use a mysql prepared statement directly.
7573	all you can hope for is mysql's server-side query cache .
7574	in recent versions (see link) it may recognize the statement when using prepared statements.
7575	but even then it doesn't re-use the actual prepared statement:
7576	sorry, it can't be done as far as i know.
7577	prepared statements are for a single page load.
7578	you have to unset the key from the original array :
7579	you are trying to unset the variable named after the key (which makes no effect as such variable does not exist), not array element as you wanted.
7580	to do the latter, you should work on your source array instead.
7581	your are echoing fields that you did not declare... try adding extract($_post); to the begining of your code
7584	i assume you know this, as you're already using $newemail to hold an escaped version.
7585	first of all look at your browser debugger of what is really sent to the php file.
7586	second thing: you will send json to it.
7587	that means, that you have an post form array like this:
7588	i then select the post by the id which i $_get from the uri and display some form -specific elements that hold the post values.
7589	then i update the data in the db.
7590	replace "userid" with the columnname of the id in your table.
7591	it's a operator precedence issue as .
7592	therefore you append 2 to "sum is " and then increment the string by 8 which results in this odd behavior.
7593	requesting a parameter with cleanstr() is not a good idea, it's better to use
7594	as $val_1 will be an integer after that line.
7595	this might be important for later development e.g.
7596	indent correctly, reading your code is hurting my eyes
7597	this way your form has it's own unique send value rather than the bog standard submit which could lead to future issues if and when you decide to add anymore forms into the website.
7599	accordingly changing the value of $element will not change the array too.
7600	it's not clear from your question why you would need to instantiate a pdostatement directly.
7601	i think you need to rethink your goals.
7602	moreover, you are making a gibberish out of almost natural english of sql.
7603	not to mention that this function is prone to sql injection.
7604	so, you just have to get rid of it.
7605	if you want a one-liner, you can make something like this
7606	there is a lot going on here, so i will try to answer specific questions and address some issues.
7607	note that just because code has objects doesn't mean that it is object oriented.
7608	you can use pdo in a purely procedural style, and the presence of -&gt; does not make it oop.
7609	i wouldn't be scared of using pdo for this reason.
7610	if it makes you feel any better, you could use the procedural style mysqli instead, but i personally prefer pdo.
7611	consider $pdo-&gt;prepare("select * from t1 where col1 = $_post[rightfromuser]") .
7612	this is a prepared statement, but it is still vulnerable to injection.
7613	injection vulnerability has more to do with the queries themselves.
7614	if the statement is properly parameterized (e.g.
7615	instead of $_post ), you would know longer be vulnerable.
7616	actually is vulnerable because it has variables in it that can be injected.
7617	although the query is vulnerable, it doesn't necessarily mean that the code is.
7618	perhaps you have a whitelist on the table and column names and they are checked before the function is called.
7619	however the query is not portable by itself.
7620	i would suggest avoiding variables in queries at all -- even for table/column names.
7621	looking at the count of fetched results, using select count or looking at the table stats (for some engines) are surefire way to get the column count for select statements.
7622	note that pdostatement::rowcount does work for select with mysql .
7623	however , it is not guaranteed to work with any database in particular according to the documentation .
7624	i will say that i've never had a problem using it to get the selected row count with mysql.
7625	i would advise against this because you have to know about this functionality when using the function.
7626	it can be convenient at times, but i think it would be easier to handle the result of the function transparently.
7627	that is to say, you should not have to inspect the return value to discover its type and figure out how to handle it.
7628	generally exceptions should not occur unless something catastrophic happens (mysql error, unable to connect to the database, etc.)
7629	these errors should be very rare in production unless something legitimately happens to the server.
7630	you can display an error page to users, but at least make sure the exceptions are logged.
7631	during development, you probably want the exceptions to be as loud as possible so you can figure out exactly what to debug.
7632	i doubt you will have to use this, so don't worry too much about it.
7633	essentially it allows you to fetch from separate prepared statements in parallel.
7634	i could be wrong, but i don't think you need to do this for mysql (i.e.
7635	you could call execute on both statements without calling closecursor .
7636	pdo's documentation on this (above) seems to be more forgiving about it than it is about rowcount and select .
7637	i would use it with confidence for mysql, but you can always just select last_insert_id() .
7638	this is a difficult question to answer because there are so many possible definitions of right .
7639	apparently your code is working and you are using pdo, so in a way you are.
7640	this creates a reliance on the declaration of a global $database variable earlier in the script.
7641	instead you should pass the database as an argument to the function.
7642	if you are an oop fan, you could also make the database a property of the class that had this function as a method.
7643	in general you should avoid global state since it makes code harder to reuse and harder to test.
7644	rather than create a generic function for querying like this, it is better to design your application in a way that will allow you to run queries that serve specific purposes.
7645	i don't really see why you would want to select all columns for a table for a given id.
7646	this is not as useful as it seems.
7647	instead, you probably want to get specific columns from these tables, perhaps joined with other tables, to serve specific functions.
7648	firstly, make sure your markup is valid.
7649	note that you have some spaces where there should not be spaces (e.g.
7650	at a minimum you should have a blank html document, with your contents inside a &lt;body&gt; tag:
7651	with the php itself you are best off trying to debug this by outputting the contents of the post, e.g.
7652	going back to the code in your question...if all of your code is in the same script, it will say "not sent" on page load, because nothing has been posted at that point .
7653	it will only output "sent" once you've filled in the name field and pressed the submit button.
7654	you were wondering why this "works" with the get method.
7655	well, the reason is because get will append the form fields to the url.
7656	on page load you run index.php .
7657	after submitting the form, the url would be manipulated (e.g.
7658	so on page load it says "not sent" but then once it has ?name=andy in the url it will say "sent" because that's a get parameter.
7659	you can store your data in the $_session variable.
7660	you would then get something along these lines;
7661	instead of using an if to only update your $return_rows in one of the cases, assign the regex match result directly:
7662	you might want to use a more appropriate variable name instead.
7664	it's way less circuitous with parameter binding.
7665	alright, first of all, your code you're using there is vulnerable.
7666	( $_get['id'] part) you should check out sql injection and sanitizing your code.
7667	the most important thing is to stay safe.
7668	you can solve this in any way you like, here's my very simplistic example.
7669	i made this database assuming you will always have a same path to your uploads, if not then you will have to go with a different solution.
7670	our load.php now checks if there is a video with a specific name (ex.
7671	x5wa88bq), since that file exists it points it to the correct directory.
7672	the code that handles the video realises that load.php?v=$name points to a video (or not) and plays it (doesn't).
7673	now if you want to do more 'styling', you can check out .htaccess guides .
7674	it will help you out with rewriting your url's.
7675	and hopefully then you could do
7676	you should use array type naming loc_chks[], this also lets you use specific keys for each item, for example: loc_chks[sales] and with php you have it in $_post["loc_chks"]["sales"] html (myform.html):
7678	php has perfectly adequate ways to deal with cookies and sessions.
7679	they're called $_cookie / setcookie and $_session .
7680	you don't need a wrapper for these that is designed for another purpose, even if the interface is adequate on the surface.
7681	for example, cookies have extra things that you have to worry about, like domain names and expiration times, while sessions won't.
7682	maybe your cached data will expire, but then how will you manage that expiration information in the session?
7683	if you want to wrap them, wrap them, but don't wedge them into an interface designed for another purpose.
7684	session_id() returns an empty string when the session has not yet been started, at least at the interactive prompt.
7685	you can use this to detect if you need to start a session.
7686	cookies are limited in number and size per domain.
7687	for example in ie , each cookie is limited to 4kb and a there can be a maximum of 20 cookies per domain.
7688	cookies get sent to the server with every request.
7689	if you are storing 80kb of data in cookies that will make every request (including requests that are for non-dynamic resources on the same host) quite large.
7690	caching data in the $_session is much more reasonable since the only increase in back-and-forth traffic is the single small session-id cookie header.
7691	the big downside with caching in the $_session array is that the session-data is separate for each client.
7692	with your other caching back-ends (apc, memcache, etc), data is shared and available for requests from every client.
7693	the issue this raises is that with per-client session caches, there is no easy way to clear or update a value from other clients' session-data, resulting in stale caches.
7694	if you print_r your $_post['fan'] , you will see that this is array .
7696	well, in order for the on button to checked, the $_session['r1'] must be equal to "o".
7697	have you checked the value of $_session['r1'] ?
7698	you need to decide if you're using mysqli in procedural style (like in the first line of this extract) or in object oriented style (like in the second line).
7699	looking at the rest of your posted code, i'd imagine that changing the second line (your line 19) to if ($result = mysqli_query("select * from users")) will get rid of that error (though not necessarily any other errors).
7700	with a little trick and with .htaccess you can make this much easier.
7704	and now i'll give you my php script correction, if you want to use it feel free on doing it:
7706	in order to update, you need an update statment, dont forget to add a student_id on the form.
7707	consider this example: (same page process).
7708	at a guess, the submit field has no name, so it won't be included in $_post .
7709	your file upload will be placed in $_files , see handling file uploads .
7710	beyond the sql injection mentioned above by daverandom take a look at the php manual on how setcookie works:
7711	it mentions specifically the info is injected into the headers, and therefor not available until your next page load.
7712	you probably want to do something like
7714	nobody enjoys a sql injection attack.
7716	you can get the last insert id using mysql_insert_id , http://php.net/manual/en/function.mysql-insert-id.php .
7717	i have written an example using pdo instead of the basic mysql functions.
7718	this should give you what you need, it is not working because of your condition :
7719	and check for errors on php and mysql and that the session array does have a value and that the column is long enough to hold the data.
7721	which is what's going on here.
7722	your code puts on the brakes as soon as it hits starting the session and failed on you silently .
7724	if you left it unchecked and looked for $_post['test'] it would error out, as it is not set.
7725	if you pass no values, i think mysql is using defaults from the settings ini.
7726	so maybe this happens too if you pass empty values.
7727	in that case the connection could actually be established, and the result won't 'die'.
7728	best thing is to use var_dump to check what $dbc contains after the call and continue from there.
7729	but anyway, there is no way, php is going to tell you which settings to use if you don't remember them.
7730	for the reason why the die() gets not executed, do what @yes123 and @binarylv had said (i think both are right, the mysqli is not installed, so it throws a e_fatal_error upon calling mysqli_connect(...) and as error_reporting is disabled (or maybe display_errors , or maybe both), you don't see that error.
7731	first check your php versionecho 'current php version: ' .
7732	phpversion();exit;if it is above 5.5 and even not working then write script in your php file phpinfo(info_modules);exit;it show all about php and check mysqli listed or not.
7733	if not then inform to our server admministrator or if you have access then go to phpini file and enable mysqli (remove semicolon from it)
7734	what you want to do is reshape your naming of your select box, in html try making the select box value into an array:
7735	then when you get the $_post data, you can run a foreach through the array of [select] which will be an array of 1 value:
7736	this will give you access to the values, this is a little bit long winded but your question seems to be abridged, so i've worked a bit of a long way round.
7737	the reason to put the select choices into an array is that with foreach accessing the array key (thus the worksheet name) is trivial.
7739	you could explode the string (assuming it is) and then get the correct index from the array.
7740	most likely, you have to escape the backslash "\" into a double backslash "\\", both in $a and in ("\"... which becomes explode("\\", $a);
7741	even stackoverflow's syntax highlighting tells you there is an error :) (see your print_r in red?)
7742	\" = a double quote, which by the way generates your syntax error as the string is not "finished" and the parser treats ,$a); and the rest as a continuation of the string...,
7743	so in some cases \ is not a "real" character on its own, and therefore it needs to be typed twice to mean a "real" backslash.
7744	(it implies, as another user [@xdazz] said, that you could use single quotes strings '...' to avoid escaping).
7745	just have a look at the different pdo fetch modes.
7746	the little thing is that it does not affect given array, but returns an array.
7747	so you have to assign it to another variable.
7748	the charset is called " utf8 " in mysql, not utf-8.
7749	having set this charset parameter correctly, $stmt-&gt;fetchall(pdo::fetch_assoc) will already return utf-8 encoded data and there's no need to use utf8_encode at all.
7750	even that wouldn't have helped though, since the callback for array_walk needs to modify the parameter by reference, which utf8_encode does not do.
7751	you probably meant to do this:
7752	you are using isset() function in a wrong place.
7753	you should check if $_get['page'] is set or not first.
7754	$libraryuser-&gt;mysqli-&gt;real_escape_string($_get["page"]) returns "" when there is no $_get['page'] , which is then set as value for $getpage .
7755	so your isset($getpage) is always true , which makes the main problem.
7756	fix it first and it will work.
7758	you never need to implode json objects, they are decoded perfectly find.
7759	make sure you know the difference between csv (comma separated values) and json.
7760	if you're trying to get a json decoded array's values, use it like this:
7763	if you need multiple connections open at once, you can simply create multiple instances of pdo:
7764	you can make multiple calls to mysql_connect(), but if the parameters are the same you need to pass true for the '$new_link' (fourth) parameter, otherwise the same connection is reused.
7765	if you do not pass a link identifier then the last connection created is used (in this case the one represented by $dbh2) e.g.
7766	retrieve all the rows from the table without any order by or limit clause, like this:
7767	loop through the result set and append the rows to the $resultarray array, like this:
7769	and this is why you shouldn't use mysql_* functions .
7770	i've seen that solution in several snippets but it has a bug which is related to the output of realpath() .
7771	the realpath() function removes the trailing directory separator, so imagine two contiguous directories such as:
7772	as realpath() would remove the last directory separator, your method would return "good path" if $_get['path'] was equal to "../baz_baz" as it would be something like
7773	define $msgemail before if (isset($_post['login'])) { since you are adding it inside if $msgemail will be killed by php after the closing of if } .
7774	and put yout php code at top before using it in html
7775	ok to be honest with you , your code needs more and more sorting , its not secure , yes maybe its a code that you are testing something with , but first thing you should thing about is security .
7776	so be careful and its a good example to start with .
7777	but i have fully edited your php code to a new one and added a table to my database and tested the code and its working perfect .you are going to see me using array inside the execute part and that's for the security porpoises .
7778	this is the code : i will link an image to the database structure that i used in the end of my answer
7779	hope this answer help you , but again , you have a lot to learn and good luck .
7780	let me know if the code did not work with you , cause its working perfect with me .
7781	another edit : could not do the part that you asked for which is (when the user press submit a recored store in the database and then a new page opens that have all the data recorded in the database like a history page ) the reason for this is because it will take sometime to style the page and then type the code , so if you needed help with that let me know , just try to read some stuff from w3school and from this subject : php select data from mysql .
7782	even if you did have the value of their active filed in there ( you have select * ) you would still be checking string '1' against string 'yes'
7783	in fact that second query is not needed as you already have the data you seek, so you can change it.
7784	now if you are sure active will always be yes for them being active, the $user already contains this data, so why not use it like this, and save the query.
7785	one thing i feel compelled to mention is that you should look into prepared statements.
7786	you can find information on that here
7788	now that i look closer you are using escape_string while this is good, the preferred way is prepared statements.
7789	this is because with a prepared statement, the variables are entirely separate from the query commands and so the db knows not to execute anything in them.
7790	even with escaping there could be edge cases that may be an issue, i don't know of any per-say, but something like using a hexadecimal version of a quote are things i have seen in examples, or weird character strings that the db would see as a quote.
7791	look, i see several issues in your code.
7792	the first is the double query for the same data.
7793	you can simplify this whole thing to one query.
7794	another (and more important) is the fact that you're just appending data to the sql query, where the whole objective of mysqli is to avoid injections by binding params.
7795	so a -more- correct way to do it would be this one:
7796	of course, the best alternative is to use a mysqli statement and use bind_param / execute .
7797	this example is only to follow your style of using mysqli.
7798	it's returning you an object rather than an array, so you should try using object notation to access the properties:
7799	this might have been clearer if you used var_dump instead of var_export , which displays code required to recreate the object, rather than a straight breakdown of the object itself.
7800	you'll also have to add the user and the user permissions on that database.
7801	as we discussed in the comments, your code snippet shows that you are using both mysql and mysqli functions.
7802	you should pick one and stick with it.
7804	mysql_real_escape_string() requires an existing or previous mysql_connect() connection, see the error notes in the manual .
7805	it looks like you're using mysqli instead.
7806	consider also using something like pdo - mysql and mysqli extensions are both deprecated &amp; removed come php7 (see the deprecation notice at the top of the page).
7807	if you want to add $row in $result , you can use array_merge() function like this:
7808	your call to database::lastinsertid() throws an undefined method error because you haven't defined a method database::lastinsertid() .
7809	you need to add the definition to your database class the same as you did with prepare() :
7810	implode() does the exact opposite of explode() .
7811	basically, it glues the entire array back together with whatever string you want (a &lt;br&gt; in this case).
7812	so the only code you would need to display the postcodes in order would be:
7813	this will output all the postcodes with a line break between them.
7814	the reason you were getting the output 11 times is because there are 11 items in the array, so the implode() got called 11 times.
7815	there is nothing at all wrong with saving "lots of data" in the $_session .
7816	by doing this you are not at all increasing transfer size or anything so you're not affecting the client as $_session is purely server-side.
7817	as above, this is a non-issue, you're not "posting all the data in a form each page change", it's stored server-side in a flat file that is simply deserialized automatically when you reopen the session, and put into $_session .
7818	provided that $_session 's lifetime is enough for you, you should use it.
7819	if you need something more persistent than a $_session , for example you need to store an object against a user for the whole time that they're logged in, you can consider either serializing objects in a database and pulling them out on pageload, or simply recreating an object from values you store against the user.
7820	your code is correct, i have tested it with my database.
7821	only small typo error is there, catch(pdoexception §e) have the wrong character '§' instead of '$'
7824	what are they teaching in these "schools"?!
7825	if you wish to specify multiple delete conditions across several tables, then you can use join syntax for the delete statement, however this might be inefficient - but that way, the query will fit within mysql_query();
7827	the mysql protocol supports a special command com_ping for this purpose, and the c api has a call mysql_ping() to send it.
7828	this tests if the connection is active.
7829	unfortunately, neither of these features are supported if you use the current version of pdo.
7830	you can only submit sql query strings, not special commands.
7831	and pdo now uses the mysqlnd driver, which has its advantages but doesn't support the reconnecting option.
7832	so the issue is moot anyway.
7833	i don't know of any more elegant solution than trying to issue a "dummy" query like select 1 , catch the exception, and if you get error code 2006 (server has gone away), then reconnect.
7834	you can create a singleton class to hold your db connection, and test for a live connection every time the application code calls getconnection().
7835	you can see that it detects that the connection failed, and reinitializes.
7836	also, instead of using $_request i highly recommend using $_post .
7837	you are referencing your variables incorrectly.
7838	on xyz.php you are setting $_session['myvar'] = $var1; and then on ljk.php you are trying to echo $_session['var1'] which wouldn't exist, as it has not been set.
7839	the variable that you would want to access would be $_session['myvar'] , as that was the variable that was set in xyz.php .
7840	you want to utilize $_session , not $_session .
7841	you are using $_request which is a superglobal and can raise some security concerns.
7842	while your code may not be affected for its current purpose, its always a better idea to just avoid it.
7843	instead utilize $_post as that will only take the data that has been posted.
7844	i think what you want to use something like intval (int)$_post['id'] instead.
7845	(edit: @zerkms correctly points out that an explicit cast is better than intval() .
7846	in this case they're equivalent in functionality, but the cast is faster. )
7847	you should also correct your php to avoid sql injections.
7849	as we can see $rows contains again array.
7850	so you cant not echo it.
7851	instead you have to use print_r , to echo you have to iterate $row array.
7852	so after a lot of looking it seems i found the answer in the php manual
7855	2) install an older version of php (before php7) which supports the mysql extension
7856	if what you claim is true... that mysql_ functions are working under php7, then the most likely explanation for that is that someone installed a third party module/library that exports mysql_ functions.
7857	but you must do it over an encrypted connection (that is, one that uses tls).
7858	that is the only way to be secure.
7859	the problem is the way you use arrays in your form:
7860	so when you send this information to the server, the index of the file is not related in any way to the index of the text fields.
7861	edit: when you do it like that, you need to remove the loop in the loop as now you are overwriting your $key / $value variables of the outer loop in the inner loop.
7862	you only need one loop and you need to prepare your sql statement before the loop (you are not preparing it at all now).
7863	then in your loop you can use the $key variable to execute your statement once with the corresponding $_post variables.
7864	(?i) - turning case sensitivity off ( unless you need to check for 1 uppercase and 1 lowercase letters - then, remove the i flag and replace (?=.
7865	*[a-z]) ) ^ - start of string (?=.
7866	*[a-z]) - positive look-ahead requirement to have at least 1 letter (?=.
7867	*\d) - positive look-ahead requirement to have at least 1 digit .
7868	{8,} - at least 8 characters $ - end of string.
7869	as you are using the post method in your action you should get the values accordingly
7870	for german words we need to use iso-8859 encoding which is compatible with european words.
7871	this solution worked for me before encoding json.
7872	you can also encode string with utf-8 for html is iso-8859-1 doesn't work.
7873	isset($_post['submit']) is just a convention, just to check that the post data is coming from form - not anywhere else.
7874	the ajax function is using get for the method but in the api.php script you are attempting to use $_post['categoryid'] so perhaps you ought to change that to $_get['categoryid']
7876	to test to see if the onchange event is actually firing, use the console ( most browsers nowadays have the console ) and open the network tab.
7877	try unsetting variables that are not needed and vacating memory before line 39. also, continue to clean the code that follows.
7878	though not preferred, you can also increase the memory allocation in php.ini.
7879	make sure the columns have indexes to achieve faster results.
7880	the query also needs to use 'limit' if you are sure about the number of results that needs to be retrieved.
7881	first you need to check you are using recursion in your php script, because some time recursion failed, that's why this error occurs.
7882	if you are using too much array so after using it please unset it so it will release some memory for other execution.
7883	ie: unset($array) please increase memory limit in your php.ini or use php function ini_set('memory_limit','128m'); or use .htaccess file to override memory_limit
7884	yout calling the method without initializing the object first, in this case there is no special variable $this as $this refers to the local object, but there is no object until you do: new language() ;
7885	what you should be doing is using the :: operator to specificy that your accessing the method of a class, and not an object:
7886	one thing you need to understand, is that once you echo something in php, it leaves your server, and is completely separated from your php code.
7887	the only way your output code in html can delete something in php, is if you use form post/ajax call.
7888	1) create a php page that outputs your html page content.2) create another php page that accepts a call from your html page with an id of the item you wish to delete ( google php $_post variable )3) create a javascript "delete" function, that gets called when user clicks the delete button.
7889	jquery("textfield_id").val() &lt;--- returns a value from an input.
7890	your label is not an input.
7891	and then your page.php file would contain something like this.
7892	im not going into more details because it is allot to cover.
7894	the result of print_r($temp_rows) coming like this array ( [0] =&gt; 123 [1] =&gt; 234 [2] =&gt; 312)
7895	your php is executed with $_post["subject"] not set, and you never post the subject the user chose to the page; if you don't make an additional post request, there's no way for the classes to populate.
7896	one way to do it (without changing any of your files) is like so:
7897	we then replace the current page's #class select element with the version in the generated data (wrapped in $() to create dom elements from the stringified html, so we can use find() ).
7898	another way might be to have files, getsubjects.php , getclasses.php , and so on, and post individually to them (you make the first request onload , and subsequent requests onchange ).
7899	this way, you can just append the generated option elements to the select elements on the page.
7900	also: please please please sanitize $_post["subject"] before using it in a database query.
7901	a user could easily add a fake option to the select locally with a malicious string for value , and you'd unknowingly query the db with that.
7902	you can use prepared statements for this (mysqli has the prepare() function to prepare a statement before querying).
7903	more on that and combating sql injection here .
7904	ps: your query is vulnerable to sql injection, by interpolating unsafe values $month and $days directly into your query.
7905	you should use a whitelist method to ensure these inputs match real table and column names in your database, don't just trust the user input.
7907	if this is a new application, you should start using mysqli or pdo before investing more time into using the deprecated api.
7909	alter the names of the elements so that instead of name="myname" and name="myname2" , name="mayname3" you have name="myname[0]" and name="myname[1]" , name="myname[2]" .
7910	so that in the $_post array you will have $_post['myname'] as an array will al original and cloned values and not $_post['myname'] , $_post['myname2'] , $_post['myname3'] .
7911	depending on the way you want to hanlde that you could also have original elements with names like name="form[0][myname]" and the others like name="form[1][myname]" , etc.
7912	at the end the original elements values are on $_post['form'][0] and the others in $_post['form'][1] , $_post['form'][2] , etc.
7913	your requisition need "precise syntax description", and a lot of examples for assert your description.
7914	only 3 or 4 examples is not enough, is very open.
7915	if you want to get exactly line 59 of the data returned from $newurl and you're not worried about it being that large, you could just use file($newurl)[58] .
7916	if you're talking about the data from curl , you can use explode("\n", $data) to get a similar array.
7917	array_insert2's second param is the position.
7918	in the first code you are actually giving it an integer making it a valid position ( $p, combined with the array_splice function ).
7919	in the second piece of code, the position supplied to array_insert2 is the key ( $k ) from the foreach loop on $results[$p].
7920	the key given cannot be used correctly with the array_splice function.
7921	maybe instead of supplying $k, give the array_search result of $k in $results[$p].
7922	short-answer:the position supplied in the second piece of code is not an integer, making it not usable for the array_splice function.
7923	please use $_post instead of $_post .
7924	and please declare the $job variable before it used or the outer scope.
7925	it seems that that the job is not a variable its a index for the array.
7926	so please use 'job' instead of $job.
7928	do you have a script that always runs before each page executes?
7929	if not, this is a great place to set up any utility functions or initialize variables, like $_session['login'] .
7930	you can set a default false value for $_session['login'] there.
7931	then you have a reliable default value, which is a good practice for a variable that's important, like this one.
7932	you could use this to check if it's set and assign a default:
7934	this will suppress warnings about the existence of the variable, but i think it's better to know what the default value should be.
7935	sometimes it's useful to get those warnings.
7936	make an array of valid hidden field names, then iterate through $_post and if the $_post field name is in the array of valid field names, echo them.
7937	at the top of each page, you run session_start() before anything else.
7938	this will load any existing session, or start a new one if none exists.
7939	this regex seems to work on your example.
7940	you won't be able to explode but it does capture each item/group which you can then loop through
7941	when i was facing this problem, it appeared that in several instances, there was actually two cookies by the same name.
7942	one of them was the php created cookie, the other was the javascript created cookie.
7943	in other instances, there was one cookie, but php would not properly output the updated value until a full page reload had occurred.
7944	it was problematic that the loading of a fresh page which caused the cookie's desired "new" value to be read.
7945	so one way to deal with php's late cookie update effect is to both use the cookie methods available to it and also just setting $_cookie['yourcookiename'] = $val as well.
7946	looks like an issue with your insert statement.
7948	i added mysqli_real_escape_string to help some.
7949	you are using the oop calls so you dont need to have the $db parameter inside the parameters
7950	for the query issue, if you use it procedural style (as in not the function of a mysqliconnection object) then you need two parameters (1- db link, 2-the actual query) see doc mysqli_query
7951	as for the second, there is no function validate_email.
7952	you should also be using jinput instead of $_post or $_get calls:
7953	looking at your query, it should looking something like this:
7954	is concatenating the two addresses together.
7955	so if you do an echo or print_r you would see something like this:
7956	alternatively, you can use cc and bcc to send copies.
7957	before i begin i want to recommend you something: avoid the use of the while statetements.
7958	unless they are really needed - like in the exact way they are used in the php docs (and even then you can find alternatives) - they should be avoided all the time.
7959	i present the motive down under.
7960	after you change it, you still remain with the issue: an infinite loop .
7961	because you are using a while loop without changing the state of the loop condition.
7962	e.g_ you are validating the $notification array for beeing existent.
7963	because it exists all the time - it's state never beeing changed in the loop - then the iterations will be infinite in number.
7964	in order to avoid this dangerous (!!!)
7965	situation, you can use the following codes.
7966	notice the difference: $notification is valid only for the period of a loop step.
7967	after each iteration $notification is newly created.
7968	and, when mysqli_fetch_assoc() returns false on the (last + 1)-iteration step, then the $notification receives that value and, therefore, the loop ends.
7969	or, if you want to fetch the results in an array and to output its items later, then you can do it like this:
7971	use exception handling in order to catch all errors and handle them correspondingly.
7972	especially when you run database operations.
7973	use pdo instead of mysqli .
7974	you will still be writing 'old' mysql statements, because 'mysqli' is an improved driver (hence, the "i") to take advantage of features in mysql >= 4.1. it is considered 'dual procedural and object-oriented api'.
7975	for instance, to connect to your mysql db, you could do either of the following :
7977	if you look closely you can see that i have added the value attribute to the html which will be the value when the browser reloads.
7978	this will only work if you post the data to the same page!
7979	you need to alter the code such that "if" prizeticket has one item, it does one thing, "else" it does something else.
7980	this is a good place to use a function.
7981	suppose it was named `handle_a_ticket($ticket)', you would replace print_r with handle_a_ticket.
7982	the problem is that you don't set the returned value of str_replace() function
7983	you can explode() the string by a space and array_shit() the first element.
7984	simply use the explode() function to split each element by a single space and take the first element of the resulting split.
7985	you need to pass the $index to the delete method and remove that item from data object
7986	i am using a custom function working with pdo... i can post the function here if you need to
7989	therefore, to accomplish what it seems you're trying to do, you'd write:
7990	i would guess that if uid isn't set in the request, $this-&gt;input-&gt;get will return null or false or some such.
7991	you don't need isset , the return value should already be falsey .
7992	the best thing to do is to put the possible choices in an array, iterate over it when generating the form element, and use in_array() to validate it.
7993	first of all you need to add error_reporting() on in your code:
7994	if you want associative index than you need to use associative array as:
7995	now you can use as you need.
7996	note that i am removing password field from session i think its not need.
7997	i don't know why are mixing procedural and objected oriented style together.
7998	one thing first about how you access the get variables.
7999	you check the value using $_get["pg"] == false .
8000	note that this expression will fail to do what you expect in a lot situations.
8001	in fact, the value will never be directly false .
8002	the only way it will equal to false if it is empty or unset (in which case you will also get a compiler warning, which you should avoid).
8003	usually a safer way to check if the value was set is using isset( $_get["pg"] ) .
8004	the next thing i want to address is a security problem you introduce.
8005	you use the get value directly to include a file with that name.
8006	if i was a user with malicious intent, i could easily set the pg value to something, you usually wouldn't expect and which break your website in some way.
8007	you generally should avoid using data the user entered somehow (request parameters are user data), and make sure to sanitize them first.
8008	a good way to do this, when you plan to use the value as a base to which page you want to include, would be to have some kind of whitelist of acceptable/allowed values.
8009	then you can check if the entered data is in that whitelist and if that is the case, include the correct page.
8010	another simple way would be using a switch statement to simply go through all accepted cases.
8011	now finally, onto your problem: i'm not sure if this was just a mistake when you posted the code, but file 1 is missing the include of file 2. as such you will never include file 3, and of course the variable will never be set.
8012	another problem might be the usage of the get value.
8013	if the value does not contain the exact filename (as in casing and no extra whitespace), then the file won't be found.
8014	it is a good idea to echo out the filename you want to include in file 2, just to check if you are making any mistakes.
8015	the whitelist as explained above would be another way to make sure that you are trying to include the correct file.
8016	finally, you should enable error reporting on your server, you can do that either in your server configuration, or by adding the following line to the top of your first file (i.e.
8017	your code seems to be good, but i think you have a problem with your display (it is interpreted as html tag) :
8018	if you look at your source, or if you try with htmlentities , you should get all
8019	you should use var_export instead of var_dump , which allows you to store its output in a variable rather than print it using:
8020	get the number of lines in the terminal using an exec() call to tput lines get the size of your var_dump by using var_export() as anubhava mentions.
8021	as you are saying you have too much repeats in your code.
8022	why don't you think of using a function which will take different parameters foreach db pull.
8023	on another side you can make a for(or foreach) loop where your
8024	you can apply seo_id = 1 to a variable.
8025	create a counter variable for example $counter = 0(if you use a foreach) and update its value at the end of each iteration
8026	another thing is try to name your variables more describing.
8027	what does q, $r mean for you.
8028	?you should consider using mysqli instead mysql.
8029	i think in php7 it is deprecated(if i am not wrong)
8030	there are many many many more things you should consider changing but first take a look at this fundamental articles and try on your own.
8031	good practices take long time to apply.
8032	get_result() was introduced in php 5.3.0 and, as mentioned, requires mysqlnd .
8033	however, i don't think you need it.
8034	you can use fetch() in combination with bind_result to retrieve the data.
8035	there may be other ways as well.
8036	this is a variable scope issue - you need to pass the $mysqli object in to the mycallbackfunction function as a second parameter or it won't be set inside that function.
8037	then where you call that function you'll need to pass in the $mysqli object:
8038	as long as you don't care about any of the url parameters you can use explode .
8039	have a look at your php.ini settings.
8040	in particular, you want to set session.auto_start to 0 if you are manually doing session_start() .
8041	and if you're relying on the session cookie or transparant url rewriting, you will need session.use_cookies=1 and/or session.use_trans_sid=1 as well.
8042	first of all, a couple of questions : (they matter at least if none of these suggestion does the trick)
8043	is there always a problem when you are browsing the site ?
8044	is it still present when you are accessing the site from another browser ?
8045	what about from another computer ?
8046	if you use something like var_dump($_session); die; at the end of the script that sets data in session, what does it give ?
8047	second idea (at least if you are on windows) : did you try disabling you antivirus / firewall ?
8048	is the session cookie correctly created in the client's browser ?
8049	if you are using sub-domains (or not) : is the cookie's domain ok ?
8050	what about it's expiration date ?
8051	another one : are you sure there is absolutly nothing that gets to the output before the session_start ?
8052	but, if i remember correctly, not that you can modify them
8053	what are the permissions on the session's directory, and on the (empty) files that get created ?
8054	you are posting the form but looking at the get result
8055	your first issue is that arrays start at [0] so if you have two values in the new talentline array then the first is key [0] and the second value is key [1] .
8056	your second issue is related in that because you're comparing the key values in the anonymous function, you are looking for the first value (array key [0] ) by asking for value number 1 as given by the $_get array.
8057	this is why it's giving you the uexpected (but correct) results.
8058	you need to adjust the key value by either increasing the key values by +1 or to decrease the input reference values by -1, to make the input align with the given csv values:
8059	$value is a copy of the array element, so when you unset parts of it you're not affecting the original array.
8060	if you want it to be the actual array element, use a reference variable:
8061	you're nearly there with your loop, however $value is not a key within the $key variable.
8062	if you print_r your $keywords you will see that the $key variable will be the string on the left side of the =&gt; and the $value on the right.
8063	alternate fix (if you have a too old version of php that you cant do the anonymous functions above)
8065	refer to pdo support for multiple queries (pdo_mysql, pdo_mysqlnd)
8066	in my personal opinion, i think this is bad practice to put multiple queries into one pdo statement.
8067	you should consider using a transaction with pdo and multiple statements which allows you to more easily figure which query is causing issues and rollback if an error occurs.
8068	secondly, you are using prepared statements but are still not protecting yourself from sql injections.
8069	don't use $_post in the prepare().
8070	you are supposed to bind those after you prepare the statement.
8072	you don't need to compare it to 1 .
8074	you may want to just check that it's not empty:
8075	the correct way, is to use prepared statements .
8076	as far as your code is concerned, you are using mysqli_real_escape_string the wrong way.
8077	you need to include your mysqli connection as well.
8078	when using prepared statements there is no need for this.
8079	to get rid of the quantity string for whatever reason just unset($results[0]); .
8080	in your fetch.php file, you'll need to access the $id via $_get again.
8081	i'm sticking within the scope of your question here, but something to note is that you best sanitize that information.
8082	especially if you're going to use it in a database query!
8083	you can't echo or have an if inside an echo for a start.
8084	basically if the $error is set then $channel = $_post['n_channel'] otherwise it equals nothing.
8085	then concatenate it in the main string.
8086	to me this code is doing exactly what you've told it to do and the result of both a function as well as a class method (using the same code) are identical... see the working 3v4l pastebin here .
8087	however, my guess is that your expectations may be different from what this code actually does.
8088	specifically, this function will return at the very first match of the $needle in the $haystack .
8089	such that the following array, returns 0 (_that is with a needle of 'foo' ).
8090	it will also return only the key of the outer-most array in the $haystack .
8091	meaning, the following array returns 0 as the key.
8092	even though the actual match is in $haystack[0][1][2]
8093	so you'll need to clarify exactly what you want the code to do and provide some reproducible example of what didn't work ( and that includes the data used or arguments provided to the function ).
8094	so since you're looking for the existence of the needle in any part of the array and don't actually care about the key, you may want to make your intent more obvious in the logic.
8095	so for example, always return a boolean ( true on success and false on failure) rather than return false on failure and the key on success.
8096	this makes checking the function's result easier and clearer from the caller's perspective.
8097	also, consider naming the function to describe it's intent more clearly (for example: in_array_recursive rather than recursive_array_search since we're not actually intent on searching the array for something, but proving that something is actually in the array).
8098	finally, consider avoiding multiple return points in the same function as this makes debugging harder.
8099	so a cleaner way to write the same code might be something like this:
8100	making the code more readable and easier to debug.
8101	notice you also don't have to use exact match if you wanted to add an optional argument for $strict at the end of the function there and also be more inline with in_array .
8102	so it sounds like the problem is you might have some arbitrary value for $key so you don;t know how to get all of them.
8103	i would suggest using array access notation in your form inputs such that you have a better way to know where to get your key data from.
8104	the inoput might look like this:
8105	i think that not using reg-ex here is actually a better method since you are looking for special reg-ex chars, and they do not have to be escaped if you use strpos() .
8106	not sure, your code needs some improvement.
8107	you should really look into mysqli or pdo.
8108	all of this could easily be done with a simple class.
8110	it is not visible with only the partial php code you posted, and you should post the whole code if not too heavy.
8111	but it's pretty sure that your error resides somewhere near the top of your php file: when you test if(isset($_post['f'])){ you have already output the begin of the original page, which is generated by the same php file.
8112	btw, you should also ensure to exit; after echoing message responding to ajax call.
8113	first off, i strongly recommend you don't listen to anyone telling you to set it as global.
8114	a more robust version includes by wrapping your functions into classes (and instantiating objects from those classes), and passing the pdo object (or some sort of factory object) to the constructor of that object.
8115	then it would be "globally" available throughout the methods (functions) of that object.
8116	your trainers.php script actually does have access to $db .
8117	for example, if you added var_dump($db) as the first line of trainers.php , you would see you have access to it.
8118	the problem you are having is that the functions within trainers.php do not have access to $db within the scope of the function.
8119	there are really a few ways to handle this.
8120	as the first line within each function you want to provide access to the $db variable that is in global scope.
8121	another way would be to simply pass the db object as a parameter to every function that needs access to it like this (dependency injection):
8122	a final (and in my opinion best) way to do this if you build a singleton class around your pdo object and get the pdo object from that, guraneeting only a single instance will ever be created.
8123	some programmers like to assign each element of the associative array to a regular variable, so they can use them less verbosely.
8124	using bind_result does this automatically for you, and you don't have to repeat it each time through the fetch loop.
8125	it's basically just a stylistic choice.
8126	imho, the main problem with bind_result is that you have to make sure to keep the order of the arguments in sync with the select list.
8127	this is also true for bind_param (which is why pdo allows :name parameters, to solve this), but the benefits outweigh it.
8128	then check if the field is not empty .
8129	if it is not empty and (most likely) filled in by the spambot, then make it die(); or redirect.
8130	first of all, i honestly don't recommend this as a spam/bot deterrent - there are many well tested third party libraries out there for you to use.
8131	having said that, i've edited your code with some minor improvements.
8132	is this what you're trying to achieve?
8133	also, you should be validating each of the fields e.g.
8134	checking whether they're empty, of the right format and length etc.
8135	preg_match() is an awesome way of doing this, plus you can add some minor validation at the client side as well.
8136	you are probably doing one of these two things wrong:
8137	if the content-type is not application/x-www-form-urlencoded , cors must send a preflight request.
8138	that means that the browser will send before doing the post request an options request, which is used to determine if the post request is allowed.
8139	take a look here how this works.
8140	secondly, if you use xhr.setrequestheader("content-type", "application/json") , the $_post parameters will not be filled with parameters, this is only the case for application/x-www-form-urlencoded.
8141	to get the json you send, you will have to do:
8142	furthermore, if you go into the debugging facilities of any decent browser, it will create an error message if the cors request is not allowed, please be sure to check if the cors request was actually made by the browser.
8143	you can use utf8_decode (i'm guessing the encoding is from $_post ):
8145	turns out that the protocol i was using to connect to sql server via pdo limits to 255 characters when fetching from a varchar column.
8147	so the user can't ever modify $_session['username'] .
8148	the only thing you have to really be wary of with sessions is session hijacking (where a user gets the session id of another logged in user, and uses it to pose as that user)
8149	comparing across a number of php versions , it looks like this will work for php 5.3.15+ and php 5.4.5+.
8150	then in php you can access the multidimensional array using $_post['prods'] , you can loop through each one using a foreach like this:
8151	you're not pulling the session variable, but assigning $campaignid to literally the string $_session[campaignid] .
8153	note: if $dr_img_scores1 or $dr_img_scores2 are not in order, you can use ksort() on them to synchronize their orders to permit an easy visual comparison of scores.
8154	if you want to transfer the data to a table then a good approach could be to explode() the string by &amp; then explode() each element by ; using array_map() ,
8155	first you need to set session_start() .
8156	then your problem is because after getting logged in first time and setting session you don't redirect your page.
8157	so first time when page lands session is empty and you get logged in and set session but no redirect.
8158	when you again submit it is already set, so it shows you logged in.
8159	if what you posted is your full and actual production code, then you have a few missing closing braces, and i'm unsure where you wish to have include('config.php'); inside or outside of your first conditional statement.
8160	this is questionable but feel i need to mention it.
8161	if you indeed have a function called start_session(); ok. if not then that may need to be changed to session_start();
8162	normalize each value to only contain the value you want to look for extact duplicates ( strtok docs ).
8163	remove duplicates from the array ( array_unique docs ).
8164	you actually build a hash for each entry in the list.
8165	the hash is representing the comparison value of the original value.
8166	then unique the hashes (and you actually want only the hashes).
8167	if the outcome does not suit your needs, you need to adopt the hash function.
8168	i had chosen strtok as it seemed suitable for your (original) case.
8169	however if looking for a delimiter get's more complicated, you might look for regular expressions to specifiy a delimiter, like preg_split docs or preg_replace docs .
8170	once $test_array is no longer in scope (and there are no additional references that point to it), it is flagged for garbage collection.
8171	it ceases to be in scope when the process returns from the function to the calling routine.
8172	so there is no need to unset it.
8173	this would only be different if you had declared $test_array as static
8174	when you create the activation link, store a unix timestamp with it in its record in the table
8175	furthermore, you do not want to use simple numeric activation keys.
8176	you should generate long random strings that can't easily be guessed.
8178	notice : doing a query like that is not secure as the $_post is not check before
8179	but you could invert the return result of preg_match function ie.
8180	for example, if you wanted to match an a or e , you'd write [ae] .
8181	if you wanted to match grey or gray , you'd write gr[ae]y .
8182	as said above, character classes match a single character from the list.
8183	here, you're using ^ to get a negated character class, so this will match a single character that's not in the supplied list.
8184	in this case, our list contains the following characters:
8185	the only difference here is that 5 changed to 6 .
8186	it now checks for the absense of any of the following characters:
8187	they look similar but they do different things.
8188	alternation can be used when you want to match a single regular expression out of several possible regular expressions.
8189	unlike character classes, alternation works with a regex.
8190	a simple string, say foo is also a valid regular expression.
8191	it matches f followed by o , followed by o .
8192	use character class when you want to match one of the included characters.
8193	use alternation when you want to match between n number of strings.
8194	if you want to achieve this directly using a regex, then you may want to use look-arounds.
8195	if this is exactly what you're trying to do, then you don't need a regular expression at all.
8196	leverage php's built-in functions for string manipulation!
8197	not only it will be faster, it will be more readable too.
8198	you may want to save valid terms into a second array:
8199	but you'll need to var_dump the mysql error to see what went wrong with your query
8200	there is definitely something fishy if a 700kb file eats up 140mb of memory with that code you gave (you could unset $relation at the end of the each iteration though).
8201	consider using a debugger to step through it to see what happens.
8202	you might also want to consider rewriting the code to use splfileobject's csv functions as well ( or their procedural cousins )
8203	the name element on the textarea needs to have the name news_item in this instance as this is what your looking for in your post request, $_post['news_item'] .
8204	a brutal way would be to store the orientation change in a cookie through jquery and access it with the $_cookie variable in php.
8205	a quick fix would look like this, where user doesn't extend database, because it's wrong.
8206	user is not a database .
8207	database should be injected to objects or used by objects, you shouldn't be extending database just to have it.
8208	if you want to do it properly, in an object-oriented way.
8209	remember php doesn't allow multiple inheritances by extend.
8210	tomorrow, you might want to have a person class that every user will extend, but since you did it wrong in the beginning, and wasting precious extend on database, it won't be possible.
8211	and by not having a control of how many database instances you have created, you will run into issues.
8212	you need to know for sure that you have only a single connection object for one database, if of course the opposite is a must - which in your case i doubt.
8213	of course this will change if you have multiple database requirements, and more sophisticated app structure.
8214	this will generate a nice long string that is unique to the person browsing that page.
8215	the point of doing this is to pass this session variable into the next page as a $_get variable, then compare the two to make sure they equal each other.
8216	you're exploding order number: 12345 as :- explode('order number: ', $newline); and therefore your required value is in the 0 offset of your array.
8217	passwords are probably hashed first you must determine which hashing function used at storing passwords at your database.
8218	then you can do it like below i assumed passwords are hashed using md5 which is widely used but exploitable but if password is also salted im afraid you have to learn salt word too else it is next to impossible based on used hashing algorithm.
8219	also using this way to access to database is really vulnerable i really suggest for you to look into pdo .
8220	if you aren't using any js plugins like select2 or bootstrap-select , then you have http://jsfiddle.net/nyl7d/ this possibility, but we need work a bit to reach it.
8221	well, so far there is no result different from yours.
8222	note that {{ choice.label|raw }} raw filter displays the raw text stored (it prevents from being escaped) into label, in this case the icon font content.
8223	finally, you need to register the form theme like describe the documentation :
8224	the first function returns the url, the second function should return an array of arrays... you will have the standard index, with "category_id" and "url" as nested/sub arrays... (if in doubt, just do a print_r of the return value to see what i mean)
8226	if needed, you could also use $_get instead of $data , when calling parse_str() .
8227	$_cookie is set when the page loads so if you want immediate access, you can set $_cookie['variable'] direct.
8228	the reason is that $_cookie[$cookie] returns the current cookie sent by the browser.
8230	when you retrieve the value $_cookie[$cookie] , the cookie is not yet set because it will be set after the page is requested.
8231	if you are struggling with this i would suggest you need to build the part you are struggling with outside of ci as plain php get it working and then port into your ci application - i suspect your problem is not ci related.
8232	i'm not 100% familiar with mysqli but i've played with a lot of pgsql commands doing this sort of thing and i think what your looking for is mysqli-result->fetch_assoc .
8233	this will produce an associative array that you can loop over pretty easily like so:
8234	edit: alnitak has linked to better explanation than i have in the comments for this answer.
8235	create a session variable called 'created' which holds the timestamp of the moment when the variable was created.
8236	now on every page load you check if 3 days have passed.
8237	if 3 days have passed you unset the session variables and destroy the session.
8238	if you do a simple explode line by line, this will give you the count:
8239	when i went to the database, everything was there as it should be:
8240	the only things that i did, really was to remove the quotes from the variables and just changed the way that it connects to the database.
8241	neither of those should have affected anything, though, so i'm not sure.
8242	try pasting my code into your script and see if that works.
8243	that being said, it's got to be something with another part of your script that's wonky.
8244	are you able to select records from the db?
8245	meaning, is your connection set up properly and you don't have to specify a host, username or password?
8246	i'd suggest, checking there for problems.
8247	check to make sure your message looks like that as well.
8248	you are posting in json format so you need to grab the post with file_get_contents('php://input') and then decode it so that you have it as an array.
8249	your pdo object gets stored in a local variable ( $db ) in the constructor.
8250	assign it to the property ( $_pdo ) instead, because your query() method is calling $this-&gt;_pdo-&gt;prepare() .
8251	however, i do think you are not using the right way to store your tags; they should be stored in a separate table as separate values.
8253	if you really wanted to get a single dimensional array without having this multidimensional thing going on, all you really need to do is utilize another loop within that loop.
8254	is the directory depository in the same folder as your main script or is it in the same folder as your upload script you presented to us?
8255	how do you make sure, that there is now uploaded file?
8256	(at some ftp clients you have to update the directory to see new files.)
8257	i took your script and used it on my server.
8258	i used @date to suppress warnings, because often times it throws an error, when timezone is not correctly specified.
8259	another way would be to use date_default_timezone_set(utc);//use your own timezone here.
8260	as long as date throws errors, your filestring might not be build correctly.
8261	basically, you are moving your uploaded file to a new filename for your image file, which is generated using uniqid() and hashed with md5() , with the file extension appended at the end.
8263	by the way, you might know already, but there is an entry in php manual page on uploading multiple files
8264	you always have to match the exact case.
8265	you should create only one pdo instance, e.g.
8266	it should be passed as argument to each function that uses it.
8267	of course, transfer style attributes to classes.
8268	apply exception handling and activate error reporting/handling.
8269	i gave you a general view by throwing only exception .
8270	normally you should throw and handle the spl (standard php library) subtypes of it.
8271	always read in the php manual what php functions are returning so that you can correctly apply handle cases (exceptions, bools, etc).
8272	use strpos to find first tag position.
8273	then find ending tag also with strpos .
8274	i mean - if u know from where to what you are looking for and they are unique.. so what matter in preg_* functions?
8275	so i guess something like this will work fine (i make code clear as possible for understanding my idea in step-by-step actions):
8276	i believe the source of the issue here is that when using a palette based image, such as the one you have created by calling imagecreate() , it is possible to declare the same color at multiple indexes within the palette.
8277	there are two things that you could do about this, the first and probably easiest is just to use a true-color image, which is just a simple case of changing imagecreate($width, $height); to imagecreatetruecolor($width, $height); .
8278	if you want to stick with the palette-based image (for example for reasons of output image data size - with an image containing so few colors, a palette-based image will be considerably smaller), you will need to cache the allocated colors manually so you can re-use them, something like this:
8279	you may also wish to track the colors in use in the image so you can "cleanse the palette" afterwards (i.e.
8280	deallocate any colors that are no longer in use in the image, which will further help with the data size reduction).
8281	although arguably it would be better, in this case, to start with a clean palette and inspect the old image resource to get the pixel details, instead of copying the original to a new image resource.
8282	first at all, some theory about html tags: a tag starts with a &lt; followed by non-whitespace characters.
8283	if this string starts with a ?
8284	, it should not be parsed .
8285	if this string starts with a !-- , it's considered a comment and the following text should neither be parsed.
8286	a comment is terminated with a --&gt; , inside such a comment, characters like &lt; and &gt; are allowed.
8287	attributes can occur in tags, their values may optionally be surrounded by a quote character ( ' or " ).
8288	if such a quote exist, it must be closed, otherwise if a &gt; is encountered, the tag is not closed.
8289	two buffers exist, one for the output, the other for "inside html tags".
8290	a counter named depth holds the number of open angle brackets ( &lt; ).
8291	the variable in_q contains the quote character ( ' or " ) if any, and 0 otherwise.
8292	the last character is stored in the variable lc .
8293	by "outside tags", i mean not in tags as in &lt;a href="in tag"&gt;outside tag&lt;/a&gt; .
8294	text may contain &lt; and &gt; though, as in &gt;&lt; a&gt;&gt; .
8295	the result is not valid html though, &lt; , &gt; and &amp; need still to be escaped, especially the &amp; .
8296	that can be done with htmlspecialchars() .
8297	one way to do this, is to put $category inside a session variable.
8298	after the session_start but before the if (is_null($category) || empty($category)) you put:
8299	and then after the $category = $category + 1; you put:
8300	first of all you need to learn about classes and object oriented programming.
8301	the subject itself could be a book but what you should research is autoloading which basically allows you to put your functions code in different files and let server to include these files when you call function used in one of these files.
8302	this way you will be able to split code responsible for database connection and for performing data operations (fetching/updating/deleting).
8303	second, drop mysqli and move to pdo (or even better to dbal when you discover what composer is).
8304	i know that internet is full of examples based on mysqli but this method is just on it's way out and it is not coming back.
8306	never, ever put external variables into query like this:
8307	anyone with mean intentions is able to put there string which will modify your query to do whatever he wants eg.
8308	using prepared statements in pdo your query would look like this:
8309	if i understand you correctly you would like to have some field to input ship name and button to show its details after clicking into it.
8310	standard form - you just create standard html form and submit it with button click redirecting it to itself (or other page).
8311	in file where you would like to show results you just use function selectyacht getting ship name from post and passing it to function selectyacht and then just printing it's results (field by field in places you need them) ajax form - if you prefer doing it without reloading original page - sending field value representing ship name via ajax to other page where you use selectyacht function and update page with java script
8312	it looks like you are expecting $_session['tourselected'] to be set on allotment.php the when a user loads opens the page for the first time.
8313	however this is not the case.
8314	$_post data is attached with an http request.
8315	when you load alloment.php for the first time, the browser doesn't send any $_post data to it.
8316	this would explain why $_session['tourselected'] is unset when you get to your second script.
8317	that said, if your only goal is to send data from the form built in alloment.php to alloment_report.php you shouldn't be using sessions at all.
8318	all of this can be done with only $_post .
8319	you should use get instead of modify your script to use post.
8321	new way : all you gotta do is create a new pdo object.
8324	i always use console.log(data), so you don't have problems with css or html that is not putting your var_dump data out.
8325	second thing open your inspect element on chrome or on ff firebug, to see if there is post made it and to what url, and what data has been posted.
8326	tip: keep $conn = new pdo( db_dsn, db_username, db_password ); outside the foreach loop.
8327	no need to repeat the connection on each loop
8328	they are there for a good reason, then your if would expand to:
8329	notice, that i have exchanged $_cookie['vistits'] with $visited .
8330	in the next call, $_cookie will be filled, there is no need to fill it by yourself.
8331	as long as you explicitly set the character set of the connection object, you should be fine:
8332	the same problem with the character set applies to pdo prepared statements, so pdo is the recommended way, but it does not make you safe in this case.
8333	there is no problem in using mysqli_real_escape_string() with a defined character set.
8334	take care that you use utf-8 for the connection object, as well as for the html page, this avoids a lot of problems.
8335	assuming you have the email addresses in indivudual strings in the database, you might be combining them with \n in the textarea, then explodeing on \n ... but if you're running windows then the lines are separated by \r\n , so you'd be comparing email@example.com with email@example.com\r , which is different.
8336	this would cause the entire array to be listed, without any visible cause.
8337	it will be always true so you'll always get 500 error page.
8338	now, if someone use today as $day it will be if (false || true) it it evaluates to true , same if it's tomorrow .
8339	you should rather don't do it in your controller or middleware.
8340	you can user route parameters as in 5.1 ( https://laravel.com/docs/5.1/routing#route-parameters ) - i haven't tested it but it should work or (this is recommended) you should use for example form validation request to accomplish that.
8341	you can group array elements and then do unset to whole group.
8342	you have an on-prem hosted application that uses active directory to authenticate to your on-prem sql server.
8343	you have a requirement to move to azure sql.
8344	you do not have the option to change the authentication method for sql.
8345	so you dirsync your directory to azure ad and use windows authentication to connect to azure sql.
8346	$_server['remote_addr'] is the only reliable ip address you'll get - it's extracted directly from the tcp stack and is where the current connection was established from.
8347	this means if the user is connecting via a proxy, you'll get the proxy's address, not the user's.
8348	any of the other header-based ones are unreliable, as http headers are trivial to forge.
8349	you can use the information from them, if you'd like, as long as you don't trust it.
8350	since $dbc is a mysqli object, mysqli::query() returns a mysqli_result object on a successful query.
8351	this means that $result is not going to be the single value you expect it to be; instead, it's going to be an object that represents the entire response to the query.
8352	you will want to do something like this to actually get the value of your clear column:
8353	you can then use $clear to update your database in the second query.
8354	(you can't easily do this in one query because the column you are modifying depends on the value of a row in the database.
8355	doing this in entirely in one query may be possible, but is probably also more trouble than it's worth.)
8356	if the query returns no rows, $row will be null.
8357	so you will need to check for this.
8359	for $useridentity , you should use parameterized queries (which means you can't use mysqli::query() ; see mysqli::prepare for an example of how to do this).
8360	since $clear is used as a column name, and you can't parameterize column names, you will need to take extra care to ensure that it is valid.
8361	first of all, add a unique index to your users table, like this: alter table users add unique(username) after this you won't need to worry about name duplication: mysql will throw an error (but please be careful and handle errors properly).
8362	use the where clause as suggested in a comment.
8363	so you won't need to loop through a large number of rows to find one single row.
8364	use parameterized queries and prepared statements.
8365	as you're using pdo (which is, i believe, one of the best things you could do with php and mysql), this shouldn't be a hard thing to do.
8366	so you'll be secure from (most of the) sql injections.
8367	queries in loops are a really bad thing to do because this slows down your whole website.
8369	don't use mysqli for that if you can avoid it, it'll just give you headaches.
8370	if you really want to use mysqli, the approach you'd use is similar but instead of providing the data in execute() you'd have to either make a very complicated single bind_param call (involving call_user_func_array() unless the number of elements in your array is fixed) or loop over making several bind_param calls.
8371	you need to escape characters, to stop them from breaking your sql statements.
8372	i recommend you read up on sql injections.
8373	i think this is taken care of automatically in the mysqli extension, which you should be using as this method is depreciated nowadays.
8374	the problem is you are printing your array at wrong place.it is inside loop right now that's whay it is printing in that manner.just remove it inside while() loop and put it outside loop.
8376	you'll want to use if(isset($_post)) (else you will get php notices) and try to change your action from "" to "#" , also add the name="submit" attribute to your submit button.
8377	there are various different ways you could get just the publishercount value.
8378	one way is to use array_merge to combine the result of get_publisher_count_by_app_id with $row , and then add the modified $row to your main array.
8379	if you do it this way, $i should become unneccessary.
8380	you can use similar_text function, which calculates the similarity between two strings.
8381	note that complexity is o(n**3) where n is the length of the longest string.
8382	while you learn mysqli or pdo , do this to your code
8385	as a side note, the error message "wrong password" is misleading.
8386	first of all, it could have been the username which was wrong as well.
8387	second of all, never provide an unauthorized user with more information than they already have.
8388	if you tell an attacker that they got a username right and just got the password wrong, you've given them have of the login information.
8389	if anything doesn't match in the login, simply say that the login has failed.
8390	then you can access the fields via $results['first_name'], for example.
8391	(you may want to make sure that the section ( $name_of_picture ) and directive ( faces ) exist, see isset() .)
8392	as you said that you pass the $_post['picup'] from the first submit, just simply modify your second form and put the $_post['picup'] value in the hidden field.
8393	so there is a profile.php which contains and shows the uploaded pictures.
8394	i want want to use a button which increase the limit in sql.
8395	there is a div which contains the pictures wit query result and after it have the load more button.
8396	in the show_more.php i just write $_post["limit1"] to get the data.
8397	first of all when the profile.php is loaded the pictures are shows if you have one but its limited to shown only 3 at first.
8398	so after you click the load more button it runs the ajax code which increase the limit variable with 3 so we get a new number which is 6 now (i always increase with 3).
8399	the ajax code first send the data to the given url which is the show_more.php in this case.
8400	i write it in oop so i have a class which handle all the image thing and i have a function in it which show the images so i just pass a variable in it like this public function showimg($limit){...} .
8401	so here is where the magic happens.
8402	it's always change the limit number once i clicked.
8403	after when it's happened in ajax code the success part handle the result.
8404	the result will the html code which will be added to the image container.
8405	you are forgetting to execute your query, you are only preparing it:
8406	also there was a typo in the delete command.
8407	a limit in the delete queries is never a bad idea.
8408	should be using mysqli_query.just please be sure to change $link with the connection result (of mysqli_connect).
8409	your negative lookahead isn't working because there is nothing to look ahead at.
8410	remember that lookaround assertions are zero-width — they do not actually consume characters.
8411	you will still need to account for the filename extension characters.
8412	a better approach would be to use pathinfo() though.
8413	maintain an array of extensions that you'd like to disallow and then use in_array() to check if the extension of the filename is in that array:
8414	you'd probably be better looping through the values you enter from your $_post and match them up to your array values.
8415	if you don't need to keep your arrays separate for anything else, you could just combine them yourself and remove the array_combine.
8416	might also be worth doing a check inside the foreach to make sure each $_post value ($char) exists inside the $combi array - if (array_key_exists($char,$combi)) or similar.
8417	mysqli_stmt_init is needed as you are accessing mysqli using the procedural style.
8418	this returns an object of type mysqli_stmt , which then acts as a container for the query you are building.
8419	as such, you should pass this as the first parameter to mysqli_stmt_prepare , mysqli_stmt_bind_param and mysqli_stmt_execute .
8420	one, unrelated point - you appear to be requiring that your tel field (which i presume to be a telephone number) is an integer.
8421	this might be a bad idea if you have to handle telephone numbers starting with 0 (common in the uk for example) at any point.
8422	you have wrong order of arguments.
8424	it is an obsolette database api with a lot of vulnerabilities.
8425	switch to mysqli or pdo instead
8426	your first check isset($_post['register']) is always false because there is no input in your form with the name="register"
8427	and keep in mind that your code is highly vulnerable don't publish this on a server except of your localhost
8428	mysqli_connect can to return falsy value.
8429	you should use oop style ( new mysqli ) or check $conn :
8430	if you getting this object for a lot of times change the object like this:
8431	you must single-quote dates in mysql.
8432	additionally, since you are acquiring it directly from $_post , you are advised to escape it with mysql_real_escape_string() first.
8433	edit: in the (unlikely) event that it's stored in the mysql database in another characterset, use mb_convert_encoding to encode it to utf8 first, like mb_convert_encoding($str,'utf-8','iso-8859-1') - or iconv: iconv('iso-8859-1','utf-8',$str)
8434	$_request['toner'] refers to &lt;input type="hidden" name="toner" id="toner" tabindex="1" /&gt; .
8435	since all the inputs are in the same form, this one is always sent, hence the first part of the code is always executed.
8436	keeping in mind that clicking on an &lt;input type="image" /&gt; will send the x and y coordinates of the click , you'll need to check for $_post['img_need_toner_x'] and $_post['img_need_toner_y'] (if you click on the first image).
8437	you will have to use $_get or $_server['argv'] depending on how your script is called.
8438	neither one is used for both.
8439	the manual didn't state this very well, but, if you want $_server['argc'] , $_server['argv'] , $argc , $argv to be registered when you are not running in cli mode, then the php.ini value register_argc_argv needs to be enabled in php.ini (off by default [for performance reasons]).
8440	you could do the following to get argv , or query string args depending on how the script is running:
8441	you can read about cleaning inputs here and pdo here
8443	if the variable could be missing, you can provide a default value by using php's ternary operator :
8444	what you want to do is ask "which student_id did the user select?"
8445	and use that in the next page load.
8446	here is a jsfiddle to simulate the reload.
8447	(it will show a 404 as 'search_enroll.php' does not exist but you can still see that the reload works. )
8448	in case you have 2 fields ( student_id , grade ) you should add a hidden input field to the form.
8449	the form should look something like this :
8450	the simplest way i found to do it is to add only base file names and files containing 150x150 in them to an associative array with the key as the base file name.
8451	then, overwrite existing values with the files that contain 150x150 in the name.
8452	sorry i didn't use your code.
8453	i figure you have enough experience to integrate yourself.
8454	if you need further explanation how to adapt to your needs, just let me know.
8455	level, type these are mysql reserved keywords.
8456	you need to enclosed them properly
8457	a better, (and much more secure way to do this) would be:
8458	i'd suggest that you do some reading up on pdo, prepared statements, and post vs get...
8459	you wouldn't do that when you can do this instead.
8460	it's less work and easier for others to follow
8461	i shouldn't really post how to do it the way you asked because it's a bit mad but if you must...
8462	including the static template css_styled_content in my main template (solved the empty body tag) updating the extensions automaketemplate to 0.2.0 and rlmp_tmplselector to 2.2.1 modifying the ts as described in the readme
8464	however, for your particular situation, i’ll recommend you to use array_slice :
8465	for the horizontal display, you may simply omit the &lt;br&gt; at the end of every iteration of your loop, but, depending on the resolution of the user’s browser, the images may occupy more than one line.
8466	for a strictly horizontal arrangement, use an html table with 10 columns:
8468	it does not return the variable value, the you need to add another check in your condition :
8469	well, i think it boils down to preference.
8470	adodb is more geared towards people who are used to the microsoft style of database access (ado) and pdo is more "php" like and also part of the mainstream of php versus adodb which sort of sits off to the side.
8471	at the end of the day, it would based on what your target db is (adodb supports more) and what sort of language style your prefer.
8472	personally, i like pdo and it suits my needs.
8473	from a technical perspecitve, the most notable difference would be that pdo is a native extension and, from php 5 on, always included in php in its fast, compiled form.
8474	there is an extension for adodb as well but you have to install it in php first.
8476	pdo is standard in php as of version 5.1.
8477	(it is also available with a pecl extension in php 5.0) most hosting provides will have it enabled.
8478	adodb is not a standard extension.
8479	the problem is that every input you add has the name “name”, so php can only access the last one (which overwrote the others).
8480	to get around this, you can add an index to the input name or make an array of them.
8481	this can be achieved like so:
8482	now you can use $names inside $f_data to see all the inputted fields.
8483	your rename probably throws an exception , either the file you try to rename does not exist or you do not have permissions necessary for the operation at your folder.
8484	look at the error message in your network at the given request, fix the problem and get the test code (echoing var_dump ) out.
8485	try using empty() instead of isset .
8486	this way if the variable exists but is the empty string the parameter wont be set.
8488	if you do not care if the webpage loads, when submitting, then you can easily use the include function in php.
8489	genre_ids is an array (notice that the name is plural, and "the whole truth" is in two genres), not a number, so
8490	why are you unsetting the variable ?
8491	instead you can replace the session variable with the current value.
8492	this gives you the array of arrays, containing your dates and values.
8493	the transformations are replacing / to \/ and ' to " to make the string json-compliant.
8495	could be a lot of things, but here's probably the ideal way to do the search.
8496	make sure you always addslashes() to protect against sql injections.
8497	as others mentioned, a while page could be a syntax error, or other errors are appearing while error reporting is turned off.
8498	enable error reporting if you haven't.
8499	edit: apparently my methods are a little bit outdated, though no less functional.
8500	here's an alternate version using a mysqli object.
8501	you can also use mysql_real_escape_string() in place of addslashes() in the $selectstmt for something a little more suited to the task.
8502	i hope it works for you.if you want to know also what tags each user have on the same query just adjust the contain or recursive value.
8503	to include the po number, explode that variable into another array, and use the index in the foreach loop to access it:
8504	if you could also have fewer ref numbers than po numbers, you could use this code to use the longer array for the loop:
8506	if you can't output the user id, try to debug your code by checking if your session is set ( print_r($_session); ).
8507	perhaps you have got an if-clause which will not be executed or something like this ( if(false) $_session['user_id'] = $user_id; would be wrong).
8509	also - there's really no reason you should need to write 2 separate queries - that's something cakephp can handle easily for you with the containable behavior
8510	do a print_r on your $article variable.
8511	i assume you'll see that it should be:
8514	on a side note, i should also tell you that you shouldn't use one verb for another, each one as a specific purpose.
8515	the get method is about getting data, not updating it, while post , put , delete are about updating data.
8516	this means that your example is following these rules, and should not try to use a post form instead (although this is technically feasible, you would just need to replace your link tags with forms).
8517	to access the $id variable, you need to use $_post['id'] .
8518	you will use this in the form and the sql query.
8519	i think your php is returning an error, rather than the json you are expecting.
8520	since you have datatype: 'json' , jquery attempts to parse the response, but fails.
8521	when that happens, jquery does not call the success callback.
8522	if you can, use firebug to see what is being returned by the ajax call.
8523	another way would be to temporarily change to datatype: 'html' and then change your success callback to:
8524	hopefully when you see the message being returned, it will help identify the problem.
8525	one thing you should do though, is add code to handle the cases where the query fails to execute and where no row is fetched from the database.
8526	you could add the following code to the php file:
8527	(1) you are specifying contenttype: "application/json; charset=utf-8" , but then you are not sending json.
8528	you should do something like this:
8529	but if you do this, you cannot get the data on the server using the $_post function.
8530	therefore, you might want to get rid of the contenttype setting instead.
8531	see this so answer for more information.
8532	(2) when you specify datatype: 'json' , jquery will parse the response to an object before calling the success callback, so the msg parameter should already be an object.
8533	therefore, you should not call json.parse(msg) .
8534	(3) you are returning an associative array from the php file.
8535	that will be converted to a javascript object, not an array.
8536	then you can simply sort it with usort() .
8537	and then you can display the data in your table.
8538	array_slice() takes another optional boolean argument as shown in the php's documentation.
8539	you should specify some session parameters before you want to print them
8540	you only use array_push to push a value on to the end of a list-style array.
8541	this is not relevant here, as you're just setting a new key/value pair.
8542	it doesn't look like you're testing to see if $_session['login_flag'] is set and also true.
8543	also, your present code is open to sql injection .
8545	sidenote: $_post['read'] will need to be changed to the name attribute you'd of given to the hidden input.
8547	but beyond adding single quotes, the code is vulnerable to sql injection .
8548	to make the pattern more clear, the code example above doesn't check the return from the prepare or execute .
8551	in addition to ugur's answer, you are mismatching mysqli commands and mysql commands.
8552	here's how to do this in an object oriented fashion:
8555	and if you're having problems with your fix_input() function, you should consider using the mysqli_real_escape_string() function.
8556	you don't have table name in your query!
8557	also do not use quotation in your column name :)
8558	there is no "consequence" to notices, per s&eacute;, other than bad coding practices.
8559	you should be coding with error_reporting set to e_all on your development machines, so obviously the consequence there is a lot of notices...
8560	empty checks for existence automatically (just like calling isset before it) but it also checks to make sure your value doesn't evaluate as false with values like false , 0 , or '' (empty string).
8561	call to a member function bind_param() on a non-object means that $stmt , which you're trying to call bind_param on, is not an object.
8562	you need to add the primary key to the where-clause of the row you want to update, now you're just updating all rows with a certain category_id .
8563	you should also know that the code you have written is very dangerous and prone to sql injection .
8565	please use mysqli with prepared statements or pdo .
8566	what you're attempting to do here has been done many, many times before, so don't think you're trying to reinvent the wheel!
8567	the general premise is something like this:
8568	user clicks a button/link/whatever the jquery sends an ajax request to the php server using get or post methods.
8569	for get, the parameters are in the query string (e.g.
8570	for post, the values will be stored in the body of the message, represented in jquery $.ajax by the data field.
8571	the php page will make the mysqli call to the database based off of what was in the $_get[] or $_post[] variable (depending on if you used get or post).
8572	this is where things like sql injection prevention (i.e.
8573	the php page returns results, normally as json (javascript object notation), but technically can be anything that you will eventually interpret with json the json call takes the results returned and does what you need it to do with them
8574	there's a few technologies involved there, but the general idea is that the client (jquery) cannot talk to the database directly, it has to go through the server.
8575	the use of ajax makes it possible to do so 'on-the-fly' without having to reload the page.
8576	using named parameters in pdo, you can't use the same name more than once, unless you do:
8577	but if you do that, the values for :skip will be interpolated into the query as quoted strings, which are not valid in the context of limit.
8578	or else interpolate the value into the query yourself, without quoting the integer.
8579	but i agree with the comment from @class, you don't have to do union at all.
8580	if nothing else, '%search%' works for both of the other two patterns: 'search%' and '%search' .
8581	you don't have to search all three.
8582	this will cause $_post['id'] to be an array of all the checked values.
8583	then delete them in a loop:
8584	you can't use a comma-separated list of ids with = .
8585	you can use it with id in (...) , but you can't do parameter substitution with this because the number of elements isn't known.
8586	so the loop is th best way to do it.
8587	your issue means that you aren't successfully running the query.
8588	while we may be able to guess the issue with your query, it would be better for you to be able to determine the error exactly.
8589	to troubleshoot this, you'll need to display the error that mysql is encountering:
8591	implode returns a string, so it is only natural that json_encode encodes it as such.
8592	it does not recognize already json-like data passed as a string.
8594	with so little info about what $wage looks like before it's imploded, it's hard to tell exactly what you want to get.
8595	how is that structure ( [1,4],[7,11],[15,11] ) an object?
8596	is the first element of each tuple a key?
8597	that's what i assumed with my example, but it might be off.
8598	right now, or die(); is a separate statement because there is a ; right before it.
8600	how can you know that mysql evaluates and and or in the same way as intended?
8601	by default, a cookie for http://mobile.example.com is not available to http://www.example.com .
8602	however, it is available to all sub domains of the domain that created the cookie.
8603	not sure if this is the full answer for your problem, but since you're mentioning multiple domain names, this may be part of the problem.
8604	you need to specify the domain in the call to setcookie() :
8608	however, you can try to convert the value by doing the following:
8609	if the value of $interest is a float, it stays a float.
8610	if it is a string that cannot be parsed as a float, it will convert it to 0, in which is_float() will return false because it is not a float.
8611	in short, now it will only except integer values.
8612	you could also use the filter_var() method explained in deceze's post.
8613	also you can use some mod_rewrite rules to prevent hotlinking of your files.
8614	if it is really a security issue to you, you will need to control the access.
8615	this can be done by requiring authentication to access the url in question, e.g.
8616	by making use of http authentication with php .
8617	of course, you can replace the &lt;span class='painted'&gt;" + temp_reg + "&lt;/span&gt; to whatever you need.
8618	if you need it to be done by php only - use the principle of breaking the keys to array by explode( "\s" , $words ); - that will give you an array of symbols only and then loop to replace the string for each word in the array.
8619	also, here is a link to a similar post regarding pdo escaping escape arguments for pdo statements?
8621	so pdo with prepared statement is a must.
8622	what else you do is added bonus.
8623	yes (opinions will differ here from person to person) for preventing sql injection (assuming you are using prepared statement).
8624	though i prefer storing the raw data in database even if it means sacrificing for some malicious xss code may contain it.
8625	use htmlpurifier (with a view that you are outputting from a database.)
8626	validate input and store it using prepared statements.
8628	typically, you don't want to strip out html tags on input because doing so could lead to a loss of data integrity.
8629	when displaying user-generated data ( output ), you can guard against xss by using a combination of htmlentities and mb_convert_encoding.
8630	for pdoexception: could not find driver for mysql, and if it is debian based os,
8631	now, in your module php file you can call your helper like this:
8632	it must be at the top of any page using sessions.
8633	it must also be before any output.
8636	right now, your query is open to injections using a $_post variable directly in the query.
8638	it may have saved you a trip here.
8639	i don't use php nor pdo drivers, but you can use process monitor by sysinternals/microsoft to see if php_pdo_informix.dll is loaded.
8640	if you really want to post the entire array, then: serializing your array.
8644	if the preceding if statement evaluates to false, $query will never be defined.
8645	return a different value if $schoolid does not exist, and check the result before using it in the rest of the script.
8646	so isset($_post) is always true .
8647	you should check the existence of parameter within it (e.g.
8648	$_post['signme'] ) or check if its not empty (e.g.
8649	the getlink function doesn't really print the result out itself.
8650	it just returning the html string that you just ignored.
8651	you should print the returns of getlink .
8652	this code seems similar to your code but im not too sure if there is some differences (this one i am 100% sure that its working perfectly fine).
8653	now for your question where you want to submit the form for the second modal.
8654	there are many ways to handle this ( like using ajax and saving everything without the need of forms or refreshing the page.)
8655	but since you said you are new to php and you already started in this way so... what i can suggest is that....
8656	1) for every input you have you must give it an id and name.
8657	so your inputs should look like this (you can set the same name and id for the same field but every field must be unique):
8658	this way what you are doing is whenever a submit button pressed you try and check the two values and save them again both of them.
8659	the way i usually do this is by using javascript and ajax so i dont have to refresh the page also...
8660	answer to side-quest: "can anyone provide me with a guide or reading on how to beautify the message as its so plain".
8661	when you send the mail as html you might apply css styles to your html.
8662	the basics seem right, although you will need to move the &lt;table&gt; tag out of the while loop, now you are creating a table for every entry and my guess is that that´s not what you want.
8663	you also need to prepare your output for output to the browser with something like htmlspecialchars($row[...]) .
8664	that way you avoid potential problems if the output contains html tags (javascript, etc.
8665	this is just a guess, but if you have xdebug installed, then the default recursion level of var_dump output is 3. this setting is xdebug.var_display_max_depth you are using print_r , but some similar recursive limit could be being reached.
8666	you didn't post your code inside controller.php but considering that your first approach was accessing that code via url parameters, i'll assume that you are executing variables in that code as get variables (example: $_get['patient_id'] ).
8667	if that is the case, now that you are executing that code via include_once you have to change the way you set your variables in controller.php because there is not more $_get .
8668	but in your script you are reading query parameters as
8669	you just need to set a cookie by using the setcookie function.
8670	you could technically do this outside of a class, by calling $_cookie[$key] to call the value, but the benefit of this is that you have a working instance you can refer back to, you can do away with accessing the global variable $_cookie, and you can add additional logic in one place.
8671	this saves you the trouble of having to update each place you check for a cookie.
8672	unless you are running facebook i doubt that strlen will be where your server will spend most of his resources, and you should keep using strlen.
8673	secondly, i want to make you aware of the fact that xdebug greatly decreases performance of function calls, so if you are running xdebug you may get convoluted numbers.
8674	so, in production (where you hopefully do not have xdebug installed) the difference is even smaller.
8675	it goes down from 6x to 2x.
8676	thirdly, you should know that, even though there is a measurable difference, this difference only shows up if this code runs in a tight loop with millions of iterations.
8677	in a normal web application the difference will not be measurable, it will go under in the noise of variance.
8678	in modern objectoriented web applications a single line that you write within a small class easily can be run several 100s of times to build a single web page.
8679	you might want to profile your web site with xdebug and you might be surprised how many times each method of a class is executed.
8680	then in real world scenarios you might not work only with little strings but also with really big documents up to 3mb size or larger.
8681	you might also come across text with non latin characters.
8682	so eventually what was initially just a little performance loss might result in serveral 100s of milliseconds on a web page rendering.
8684	even if they try, the prepare() function make the necessary changes before send to the database.
8685	to confirm, download the pdf file it serves up instead and look at the file size.
8686	if it's exactly 64k you'll need to make more room in the db by setting the field to mediumblob .
8687	i was recently working with this problem and it is important to give answer after test solutions given by us.
8688	then, i solved this problem as follow.
8689	to save generated fpdf i have used this code.. :
8690	of course, it also says to use store_result() whenever a query returns a result set.
8691	i don't really understand why (something to do with buffering), but since these two prepared statements and stored procedures work without store_result() , the problem is solved.
8692	as a side note, instead of using two prepared statements with two stored procedures, a way around it is to use one prepared statement to set variables
8693	$_server['request_uri'] includes the query string, so you're echoing the whole thing, and then appending the language to it again.
8694	and you should not quote the variable in the sql statement:
8695	however, no matter what kind of database functions you use (the mysql_* functions are deprecated), this is vulnerable to sql injection.
8696	the only way to avoid sql injection in this case, would be to use a white-list of allowed orderby strings and check against that.
8697	there are security flaws in the way you're working with the database.
8698	please try to learn pdo and drop the deprecated mysql driver as it will be removed in the next php version.
8699	never ever let the user know anything about your tables, be it column names or the name of the tables.
8700	in order to understand what the parameter should be like, you need to be aware of how prepared statements work .
8701	oop stands for object-oriented programming .
8702	it is about different objects interacting with one another.
8703	the code you have done has one class that wraps a function.
8704	the problem is that you are not passing along the connection to the query.this is fixed by return -ing it in the connect method and the passing it along to the insert method.
8705	but i agree with nikola, that you should take a look at pdo.
8706	if you're just looking to simplify the implementation, you could use an inline statement.
8707	to check if something is an array, you can do:
8708	if it is an array, you can then call array_slice()
8709	the better solution however, is to check the $feed variable to make sure it returned what you are looking for before processing.
8710	i've had this same problem with an rss feed related to a theme i'm using.
8711	on the admin side, the code is supposed to display more themes by the same artist, however i'm getting the same array_slice error, because $feed->items is null.
8712	the link to the rss feed is working properly, and there is information at the address.
8713	so, i started looking around, and i found that the problem is with the rss, not the code (well, the original problem.
8714	it's still a problem that that error is displayed).
8715	i pointed the fetch_rss() command at a different feed, and it works fine.
8717	not an array as you expect.
8718	sort() elements of the recived array parameter will be arranged on the array itself.
8719	so it needs an actual array to work on it; not the resturned value of other functions, which doesn't really exists as a variable.
8720	that's the reason of the error
8722	that is, the value of "$a = 3" is 3 .
8723	a first approach to fix the error might be:
8724	the assignment return the value of $testarray, not $testarray itself.
8725	edit : if you aren't seeing it in your xhr/ajax post either, be sure you're setting the content-type header as well.
8726	jquery (and most js libraries) will do this automatically for you, but you have to do it on your own if you don't use a library:
8727	you're sending raw json as the request data, so you can't access it using $_post on the php side, because that only works with form encoded key/value pairs.
8728	you will need to access the raw post data like so, on the php side:
8729	finally, you are not outputting json on the php side, so remove datatype: 'json', , otherwise jquery will try to parse the response as json and invoke the error handler.
8731	so you are not adding up the actual values.
8732	it can be confusing to your future self and other maintainers as to where the data is coming from.
8733	it can cause collisions, and create hard-to-find bugs in which you are getting the wrong data (because $_request covers $_get , $_post , and $_cookie ).
8738	you copy the value of the session variable into a local variable.
8739	also note that with above code single quotes ( ' ) will not be correctly escaped.
8740	then, you have to wrap by single quotes your field values:
8741	first , you are using this query to find the number of rows to fetch.
8742	to avoid sql injection (assuming your prodid values are integers).
8743	second , the query above gives back a one-row result set.
8744	you need to actually read that row.
8747	always returns the number of rows your previous query wanted.
8748	so your limit clause is entirely unnecessary in the example you've given.
8749	this is because you are unsetting the variable in the foreach over the array... this is not possible.
8750	easiest way to solve this, is to copy the array and foreach over the first array, delete the key in the second array... than use the second array further on in your code.
8751	the long way around is by using functions like array_walk() or storing the keys you want to unset in different array and unset them after the foreach...
8752	first off, is there a reason you are using parse_url....can't just just grab the variables via $_get or $_request?
8753	secondly, if you want to validate your data in_array is a good approach.
8754	a simple thing to clean things up is to simply move it all to your php area and then simply output the post-validated data to the html.
8755	if i were building this i would run all this stuff from a database so you would query to database if a color was valid.
8756	no, you should always know exactly what's going on with your variables.
8757	in fact, you should never need to use isset() on a variable itself at all.
8758	depending on the exact behavior you want, you can check if the variable is empty() :
8759	this should not be abused , however.
8760	as others have stated, those notices are for your protection, so if you can define your variables, you should do so.
8761	where empty() comes in especially handy is things like if (!empty($_get['foo'])) - testing for the existence of input in superglobals.
8762	thanks for the very quick responses, however, i've found the issue.
8763	completely unrelated to pdo, it was the permissions on the second table in the database.
8764	testing from the sql server query analyser retuned the results because i had permissions on the new table; the user i'm using to query the table with pdo did not...
8765	the answer to the ultimate question of life the universe and pdo issues is
8766	if you really need to use like then you need a wildcard somewhere in the string.
8767	as a placeholder has to represent a complete data literal, and if you want to use like you have to create the parameter with the wildcards included like this.
8770	your current code is wide open to exploitation.
8771	you can escape each field using mysql_real_escape_string()
8772	anyway, to actually answer your question, you probably want to look into mysql connector/net .
8773	it's a library that connects directly to the mysql server and integrates with the standard system.data classes.
8774	what you're trying to do seems more like allowing some html tags while removing the others.
8775	to do that you shouldn't use regex.
8776	instead, you need to use an html parser like html purifier
8777	try to use $allitems[] = $item; instead of $allitems[] = array_merge($allitems, $item);
8778	i think in your case the easiest way would be to add: if ( $_get['pdf'] ) ob_start(); to the top of your page.
8779	(starting an output buffer: see http://php.net/manual/en/function.ob-start.php
8780	note that you should not use extract($_post); .
8781	you can't control which local variables get overwritten from the outside with that.
8782	(if nothing else investigate extr_prefix .)
8784	the http headers you get end with \r\n , as should.
8785	it seems curl on linux converts them to \n if it detects the output is tty, but try to redirect to a file and you'll see the \r s in there.
8786	mysqli::real_escape_string() takes only 1 argument at a time, a string (unless using procedural, mysqli_real_escape_string() , then the first is the connection, then the string as the second) the $_post can't be accessed in that way, i highly doubt you have one field named all that.
8787	you'll have to specify the index, as $_post['name'] etc.
8789	an example of that is given below.
8790	usage of php error-reporting would've likely mentioned something about undefined indexes when you use the current escape.
8791	always (in development) let php give you the errors, by enabling error-reporting with error_reporting(e_all); ini_set("display_errors", 1); at the top of your file.
8794	http://php.net/manual/en/mysqli.real-escape-string.php http://php.net/manual/en/mysqli-stmt.prepare.php how can i prevent sql injection in php?
8795	assuming the index of array1 corresponds to the index of array2, you just need to find the indexes of $array2 whose values are 0. once you've done that, just unset the elements with the given index from both arrays.
8796	check variable before use lik isset($config['home']['url']) you can also use !empty($config['home']['url'])
8797	i'm a bit of an idiot i guess.
8798	i was calling session_destroy() rather than session_unset() to clear things out at the top of my authentication script.
8799	this is actually to do with another attribute of the pdo connection that you may not have considered yet.
8800	if you add this attribute, and set it to false it will tell the pdo extension to issue the prepare to the database for compilation, optimization and execution planning, at the point you issue the -&gt;prepare() .
8801	if you leave it unset it takes the default of true , which tells the extension to emulate the compilation.
8802	in other words, it will wait until you issue the -&gt;execute() before the statement gets compiled and errors are reported.
8803	now you will get the message and the file will be created containing the error message
8804	i'm not sure where you came up with printf(), but any print or echo command will output the arguments to the browser and won't return it to the function at hand.
8805	you don't need to use anything special to use a variable as an argument.
8806	printf specifically outputs a formatted string and returns the length of the string.
8807	so this is the equivalent of calling file(integer) where integer is the length of $_post['fname'] 's value.
8808	you can use the implode function to get your string back after you removed the first element of your array
8821	there is nothing wrong about that.
8822	i don't think that you should use the $_session variable for that, because the user needs to see the error message only one time.
8823	in your case, and in most cases, that's why it might make no sense to store it in a session.
8824	simply use array_map like as its an array of objects you can simply achieve it like as
8825	if you want to send data via the url you have to use a get request.
8826	to do this, change the type of the request to get and give the object directly to the data parameter in your jquery, and use $_get instead of $_post in your php.
8827	finally note that you're not returning json - you're returning text.
8828	if you want to return json, use json_encode and get the value in the parameter of the success handler function.
8829	by this way, resulting $chunks is an array like this:
8830	the problem that you are having, i suspect, is that only the checkboxes that are checked will be passed back to the server, whereas all the hidden fields will always be passed so the lengths of the arrays will differ and the keys wont correspond.
8831	the solution to this is actually relatively simple - you just need to specify the keys for the condition array so you can match the values up again.
8832	this ties the values in the $_post['condition'] array back up with the $_post['delete'] array so everything will match up again.
8833	the way the keys are being created above is not great and in retrospect it is the wrong way to do it.
8834	to demonstrate the right way to do it, let's imagine we have the following array, nice and simple:
8835	what we need to do is tie up the two inputs that are associated with each book, which means we need a set of key/value pairs that can be matched up.
8836	that sounds like an array to me.
8837	but unlike the example above, the keys should be irrelevant to the data - they don't need to mean anything, because all we want is the data.
8838	what we need to do is specify every single key explicitly (no stack-style array pushes) and make the keys agnostic of the data they relate to.
8839	...and then, when the form is submitted, we can do this:
8840	i've spent a lot of time to try to do this following several approach with no luck, and finally find it out by myself a clean way to do this: compile &amp; install the extensions from php source .
8841	download &amp; compile pdo_oci (and oci8 if needed) form php source packages, there are some tricks that you need to applied here, including:
8842	i didn't notice you said "submit in background", does it mean you don't want a page load?
8843	you can do that with ajax...
8844	note 1: i'm using jquery from the url http://code.jquery.com/jquery-1.10.2.min.js choose the version you want and place it in your server instead.
8845	the gc_maxlifetime value is the number of seconds after which data will be seen as garbage and potentially cleaned up.
8846	you'll want to make sure this value is set high enough so that your sessions aren't destroyed too early, but you can't rely on sessions being destroyed after this amount of time.
8847	if you want sessions destroyed after a specific period of time, then you should store a timestamp, and then use that timestamp and the presence of the session to see if the session is still alive.
8848	then, your future checks for the presence of any $_session value will work the way you expect.
8849	'something'.isset($this-&gt;sets[$this-&gt;value]) always evaluates to true .
8850	you'll need to group the ternary operator expression:
8851	let me give you an advise.do not use that class from culttt article.
8853	you could first retrieve the categories, and then foreach categories retrieve the corresponding businesses.
8854	there is no sign of jquery in your question.
8855	if you are developing an application, make sure to understand how it works or your project is doomed to failure.
8856	jquery is a library for javascript, a client side programming language, that means this is the browser the user uses that is running the code (as html and css).
8857	php is a programming language running on server side, that means clearly this is running on the server.
8858	so you can not easily interact between them just with your own mind, there is no magic in it.
8859	browsers can natively submit a form with a submit button.
8860	if you want do it with jquery (or pure javascript), you can trigger manually the submission (e.g with jquery $("form").submit() ).
8861	you can also use it to send data to the server with ajax features (e.g with jquery $.post({howifeelit:"good"}) ) and the server gives you some results (http inside).
8862	prefer the international language for programming.
8863	(even if you love you mother tongue, i understand) this is more understandable and re-usable.
8866	look at one of the million tutorial on the web to learn basics.
8867	(look at pdo, include, post and framework keywords)
8868	this line contains a typo (if it isn't a typo):
8869	your pdoexception should also include the real error message, instead of just "database error":
8870	as i said in a comment, this looks like an xy problem .
8871	you don't actually need to increment the keys, you need to keep all the values (including when the keys are duplicate) and sort them by key.
8872	i'll assume when two or more items have the same key, the order they come from the database must be kept in the final list.
8873	now, you can retrieve the values from the array by iterating over each sub-array:
8874	if you don't care about the keys anymore and all you need is the list of $value after sorting then you can put the values into a new list in the double foreach above (instead of displaying them).
8875	or you can write it in a more compact way using array_reduce() and array_merge() :
8876	you could store it in a $_session variable but it's unreliable and users could easily reset the session cookie.
8877	i'd do something like this instead:
8878	pdostatement::bindparam doesn't modify the query string that you passed to pdo::prepare .
8879	it replaces the placeholders with the value of the variable that you bound to it in the moment you execute the statement and the query is sent to the sql server.
8880	it looks like you have it as a comma separated list... so in order to do your unset you need to explode it before calling unset.
8881	but thats a bad way to do it.. you leave alot of room for error in terms of getting the indexes mixed up.
8882	you should just make it an array and let php serialize/unserialize it as part of the normal session behavior.
8883	additionally instead of using generic ordered numeric indexes for the keys, use something unique to each product like the sku or the primary key from the db record.
8884	it seems that you have a comma-separated value as $_session['inh_cart'] .
8885	it is a string, not an array.
8886	thus your use of [] syntax on a string is in essence doing something like:
8887	also, you probably don't want to set/unset items in a cart via $_get .
8888	this is a really bad idea, as as someone navigates your site using forward/back buttons they will (randomly in their mind) see their cart changed.
8889	you're looking for http://[anything]/, and you want it to match everything before the trailing /
8890	to get this into your database, you can use magento's built in functions.
8891	here is a guide on its usage: pdo tutorial 1
8892	here is a more in depth guide: pdo tutorial 2
8893	for your project you'll want to get the url from the header then tart a database connection.insert the url into the database.
8895	if you can't use pdo for whatever reason, look up mysqli .
8896	if you can't use that either, use $sanitized_string = mysql_real_escape_string($string); to sanitize the url and make sure you only use $sanitized_string with the database.
8897	just start sessions at the beginning of your 2nd php file and you can use $_session['user']
8898	now you want to do it with your name as well, (since $_session['user'] =email).just do the same but instead of 'user' use something like 'name'
8899	the problem is you're doing the implode inside the while loop, it should be done outside after building your final array.
8900	this is what i would do:
8901	however, this should not be the case as you should be using concat when doing your database query.
8902	it has to work (if you didn't alter any browser settings).
8903	however, the variable isn't available till the next load of the page.
8904	you should be able to see it in chrome dev tools though.
8905	if not, make 100% sure you're not outputting anything before you set the cookie.
8906	concerning your second problem, session_destroy() destroys a session, but it doesn't invalidate cookies already sent to the client.
8907	you need to manually invalidate them by setting their expiration time.
8908	the value of $_cookie is set by reading cookies received from the browser.
8909	in order to receive a cookie from the browser it must be: set in php -> the browser should load -> the user should navigate to the next page (or submit a form).
8910	so basically if you use setcookie you can't read $_cookie yet until the next refresh.
8911	that's why the echo s weren't showing anything.
8912	they were showing null - to confirm this use var_dump and you'll see the output.
8913	make sure magic quotes are off or, if you can't disable them, cleanse your strings from them.
8914	read the manual for details: http://www.php.net/manual/en/security.magicquotes.php when inserting your text into the database, escape it properly for sql syntax once or, better, use prepared statements.
8915	see how can i prevent sql injection in php?
8916	and the great escapism (or: what you need to know to work with text within text) .
8918	your $con isn't set inside your function, so mysqli won't work.
8921	since you are looking at $_post['m'] you need to define that key in your json.
8922	currently you'd need to look inside $_post['03'] if you selected mar
8923	if you want to know what was returned from your ajax post, you need your success function to accept a parameter (like data ) that jquery will fill with the response to your post.then in the function body, you can write it to the dom or your error console.
8924	your code however, passes only one (and it doesn't match the var you are expecting to be in):
8925	you are trying to send html from your php - header('content-type: text/html'); but you are telling your javascript to expect plaintext - datatype: 'text',
8926	array_push is equivalent to appending an element to an array.
8927	so you don't need to add the isset keyword again and again.
8929	isset() is a, lets say little helping "function", you can check, it the field "is set", whether it is "filled" or not.and &amp;&amp; is a logical operator.
8930	if you have another field and don't exactly now, what you are doing, then yes, just add &amp;&amp; and isset, but i can only give you an advice: learn php and try to understand it - it not hard.
8931	here, if you want to send the value of a new field by mail, you'll always need to test the existence of it by isset .
8934	taken from a comment of the php documentation for strip_tags()
8935	you will have to use additional methods like mysql_num_rows() or mysql_fetch_assoc() on the result reference returned by mysql_query() .
8936	be careful with potential sql injection .
8937	use at least mysql_real_escape_string() on user input, or better bind your variables to your queries.
8940	check orms like propel or doctine as well.
8941	you can add limit 1 to your query to avoid useless processing, if your goal is to check only if at least one match is found in table crm given the party_id .
8944	on the last line in the script use the htmlentities function.
8945	your submit a tag would not be included in the post data, so check for the existence of one of the input tags, say $_post['username']
8946	i have just tested your code.
8947	you are checking if submit field/button is sent over the form, but you do not have anything named submit in your form.
8948	you have got username and password, so changing your if(isset($_post['submit'])) to if(isset($_post['username'])) or if(isset($_post)) will fix your issue.
8950	above answer ashis biswas is fine and you also need to take care that you should check your login session in your controller as in codeigniter you are accessing your controller function instead of view.
8951	if you will check and redirect on view page that will not redirect to your login controller even if you have unset session data.
8952	i would store a session variable, something like $_session['countedpostid']=$post_id then, on refresh, check to make sure the $_get['postid'] is the same as $_session['countedpostid'] .
8953	if yes, it's already been counted.
8954	if no, you need to recount.
8955	perhaps try storing an array of "already-incremented" post_id's in the sessions variable in order to prevent issues from going back/forward.
8957	you could simulate this behavior by using array_reverse(&amp;$myarray) although, please note that as of php 5.3.0 call-time pass by reference was deprecated and it was completely removed in php 5.4.0
8958	as for the why, i have no idea.
8959	some one in their infinite wisdom decided that when you sort you must want to sort the actual array but when you reverse you must want to save it to a new array variable.
8960	those aren't arrays (they're strings), but you can handle the problem by splitting the string into an array and using php's filtering ( filter_var in this case):
8961	you can estimate the correct answer based on your knowledge of your specific folder and web structure, but that is far from a general solution.
8962	but i would recommend you to use a boostrap file that is the entry point for each "page".
8963	there you can setup you $basepath variable and other needed values.
8964	another thing you could do is inject the base path to your $_server array from apache (if that is what you are using.
8965	it would then be available to your entire application.
8966	regular expressions will probably be the most useful here.
8967	preg_match will help you with this.
8968	per your comment, if the number you're trying to get has commas in it, you can use a different regular expression that will grab all characters until the first space
8969	sizeof is an exact alias of count .
8971	to answer your second question, if you try the following code:
8972	$_get is an array .. so you can just iterate over it using foreach
8973	you can also do extract($_get) to make all of them as variable .. but i wont suggest it.
8974	if you want to save it to db you should consider mysql_real_escape_string($value) .
8975	to print a html table .. do you want something like this ?
8976	$_post['data'] is undefined, because its not present in data_to_send .you have to either access the posted elements directly in $_post :
8977	or you can change the js part and provide the data element:
8978	no need for json_decode , jquery already converts the data object into a urlencoded parameter string, which php in turn converts into an array.
8979	you need to check the return value of pdo::query() .
8980	in (ugly) php there are lots of functions that return a value of mixed type.
8982	therefore you are not guaranteed that the value returned is a pdostatement .
8983	in your case the query is invalid (by using a reserved keyword like from as a column name) which results in a return value of type boolean with the value false.
8984	a boolean value is not an object and therefore your call to $sth-&gt;setfetchmode() fails.
8985	an exception (pdo::errmode_exception), so you don't need to check thereturn value a warning (pdo::errmode_warning) nothing (pdo::errmode_silent), so you have to check the return value, errorcode() and errorinfo()
8988	you get an error because $result[$i] is not an array, and array_push expects an array as input.
8989	i got it to work with the following code:
8990	using this file everything in the url if it is not a valid directory or file is ignored and routed to index.php in the site root.
8991	i then access it as a single paramater using $_server['request_uri'] which i can explode using explode("/", $_server['request_uri']) , this gives me an array starting at index 0 of each value.
8992	using this script i am still able to access $_get variables as long as at the end of the uri the convention ?var_name=value has been used.
8993	if you want to send the jquery object as string (html) to the server you should first extract the html from that object:
8994	second (as already commented), inside php you should use $_post['mydata']; (the key should be the string mydata and not a constant).
8996	before using pdo, i guess you were validating your data (using a validation filter for instance), and then you escaped it before inserting it in your db.
8997	now, you only need (but still need) to do the first thing.
9000	'null' is a string, if you want to compare to null value - use null .
9001	i don't think that $ses_id in your db has value 'null' .checking if value is set can be done with isset , and with empty for not empty:
9003	and also try to debug, does your if condition satisfied or not.
9004	in your case if your if condition does not satisfied then it is not possible your below code will execute.
9005	if you take a look at your php code, you're basically doing nothing with the output of json_encode() ...
9006	now you should get the data you want as response.
9007	edit: @1nsan3, you asked in the comment if echo not does the same as var_dump() ... i think you get an answer here: what&#39;s the difference between echo, print, and print_r in php?
9008	the response of your ajax request is already parsed by jquery when using datatype : 'json' , as explained in http://api.jquery.com/jquery.ajax
9009	because of the way how print_r works, it is silly to put it inside a loop, this will give you actual output and is error free :).
9010	first of all stop using the mysql_ and mysqli_ libraries.
9011	they are dangerously outdated and should never be used because of sql injection issues .
9012	if you want to execute a loop you need to put all your logic in the same loop.
9013	if you want to do the inserts faster you can put them in a single insert statement using code like this: how to insert an array into a single mysql prepared statement w/ php and pdo
9020	htmlpurifier is of use where you want to allow the user to input limited html markup.
9021	that can be reasonable for formattable freetext fields (like i'm guessing ques is) if you can't be bothered to go as far as providing your own custom mini-markup language like markdown.
9022	but do you really want the user to be able to input markup for all fields, including their name and e-mail address?
9023	should i be able to have the name “edw ard b oi ng j r”?
9024	are users going to have to enter &amp;amp; every time they want to use an ampersand?
9025	a better approach is usually to accept plain text as it is, and then html-escape it at the point you insert it into an html page (eg with &lt;?php echo htmlspecialchars($value); ?&gt; ) so that the exact string entered by the user appears in the page.
9026	the fields where you deliberately allow markup (and so use htmlpurifier instead of htmlspecialchars) are typically very much exceptional cases.
9027	note that if you are injecting into other contexts you need different escaping functions: for example if you are injecting into a javascript string in a &lt;script&gt; block then you need js-string escaping and neither htmlspecialchars nor htmlpurifier will help you with that.
9028	you are mixing pdo with mysql and there are multiple syntax errors.
9029	your code should be like this:
9030	you should be checking whether the index s actually exists in the $_get array before attempting to use it.
9031	it may be beneficial (if you plan on adding more cases) to use a switch statement to make your code more readable.
9032	actually none of the proposed answers, although a good practice, would remove the warning.
9033	this way, i check the _get array for the key to exist without triggering the warning.
9034	it's not a good idea to disable the warnings because a lot of times they are at least interesting to take a look.
9035	the above code means: if $_post['sub'] is not an empty string, evaluate the statements below.
9037	file base: scripts are not in the folder you expect ckeditor throws out html, either you strip it or,... have a look into the html sourcecode.
9038	use print_r($_post); at the beginning of mail.php enable php debugging / error reporting: http://blog.flowl.info/2013/enable-display-php-errors/ if you have javascript we cannot see in your sample code, remove it for further testing
9039	the ckeditor changes your inputs in a way that they are not anymore labeled by name attributes or renders the form in any other invalid form (don't think that's the problem)
9040	edit: i recall in the past finding a lot of these samples and analyzing a few and also found them to decrypt incorrectly.
9041	most likely the function of the obfuscated code is either a webshell, or simple code to call eval() on code they would sent remotely, for example they'd call the script with $_post['some_code'] = 'malicious php code here'; which would then get passed to eval, essentially allowing them to do all kinds of things.
9042	you select everything from store (* equals all fields).
9043	if you want to use this you should use select count(id) from store.
9044	you use the count, to limit.
9045	but the limit will always be the same as the amount of rows.
9046	you should not use addslashes for escaping your values.
9047	i am not sure what values are in your database, perhaps you could post some?
9048	perhaps you need to perform strip slashes, since you probably save values with slashes in your database?
9049	also note that your code suffering from sql injection.
9050	either change addslashes to intval() or add quotes around $id in the query (otherwise escaping will make no sense)
9051	first you need to check $_server['request_method'] output so best way to convert output in upper
9052	then you can check with submit button name also like
9053	also you can check all values of form which will be submitting by isset() or empty()
9054	i think, there may be a way to be sure the form was submitted using your form.
9055	if i would like to do it, i think i will make something like this :
9057	what i've changed here is $conn-&gt;query($query); to $query-&gt;execute() .
9058	because you're working with prepared statements, you need to call execute method of the object instance of prepared statement $query .
9059	set this attribute as soon as you created the pdo object instance.
9060	you can also set this attribute during the object instantiation through constructor like:
9061	i have found where the problem is on your function.
9062	the problem is here : values (:customer_mail_adres, :naam, :paypal, :subscription_start, null, :password, :country_name)");
9063	i'm not sure what datatype is subscription_end but i guess it should be date.
9064	and also use try catch block so that you can see when you have errors in your sql query.
9065	also don't rush to reload the next page after running your query atleast but some delay on your header() so that you can print success message and see if its displaying then load next page
9066	the problem is that the \r and \n are stored in your database as "\" "r" and "\" "\n" respectively.
9067	they're not stored as a carriage return or new line character but the slash character followed by the letter.
9068	when you're calling nl2br() , it's looking for the new line character, not the textual representation of it.
9069	you could use a regular expression ( preg_replace ) or str_replace to replace them.
9070	but the problem probably is caused by how the data is inserted in your database.
9071	the object of pdo is that you don’t have to escape anything; you just send it as data.
9072	technically there is pdo::quote() but it is rarely ever used and it is not exactly the equivalent to mysql_real_escape_string()
9074	and, now assuming the connection is established, you can execute your query like this.
9075	now, as you can probably tell, i haven't used anything to escape/sanitize the value of $_post["color "] .
9078	last but not least, there are moments when you should not trust pdo 100%, and will be bound to take some extra measures to prevent sql injection, one of those cases is, if you are using an outdated versions of mysql [ mysql =&lt; 5.3.6 ] as described in this answer
9080	is the equivalent of $v = $this-&gt;db-&gt;quote($v); be sure you have a pdo instance in $this-&gt;db so you can call the pdo method quote()
9081	the array_filter function loops through the array and passes the value into a callback.
9082	if the callback returns true, it will keep the value, otherwise it will remove the value from the array.
9083	after all items are passed in the callback, the result array is returned.
9084	oh, you just want to know if .txt is in the array.
9085	the quickest way to achieve what you want would be to just use fastroute .
9086	but where is fun in that :)
9087	i will assume that what you are actually makingis a proper website, but with pretty urls.
9088	first you would have to implement a routing mechanism, which takes a list of regexp patterns, matches them agains your provided url (which you could be extraction from $_get['url'] or maybe $_server[request_uri] (your code actually wouldn't care from where the url was gathered ... you shouldn't be accessing superglobals inside functions/classes).
9089	if you decide to have the human-readable notations, then there are two major directions:
9090	as for "how the end result might look like", you can probably look at the code sample here .
9091	that would illustrate one of the available option for the router's public interface.
9092	your question is vague and it is hard to understand what exactly would be helpful for you.
9093	my next part is i have to set variables for seller or search results with the pagination.
9094	for example i have the url doglist.html/?seller=29 i need to embed pagination with this pagination.
9095	so that the result will be like dog/list/3?breed=&amp;gender=female&amp;state=&amp;submit2=fetch i have solve this issue with this line of code $config['suffix'] = '?
9096	'.http_build_query($_get, '', "&amp;"); now my pagination with variables works fine.
9097	(i'm surprised not to find this referred to in the official documentation; think i'll need to write a patch to improve that.)
9098	if you wanted to be able to swallow exceptions and keep on using the transaction, you must create a savepoint before each statement that might fail.
9099	if it fails, you must rollback to savepoint ...; .
9100	if it succeeds you may release savepoint ...; .
9101	this imposes extra overhead on the database for transaction management, adds round-trips, and burns through transaction ids faster (which means postgresql has to do more background cleanup work).
9102	so: where possible, instead of swallowing an exception, run failure-prone database code in a retry loop.
9103	make sure your code keeps a record of the information it needs to retry the whole transaction on error, not just the most recent statement.
9105	if you do print_r($stored_hash_); , currently it will return something similar to this:
9106	what you have to do is parse $_server['request_uri'] and then do what you need to it.
9107	so if you set the your header location to that address, it should send the user back to the previous page
9108	although be warned that $_server['http_referer'] may be empty, you should check for this first and if it is empty send them elsewhere, like your homepage.
9111	then the form will redirect to the same script where it's generated (so not sure if the second set of code you have is on the same file or different) also you don't need to write the bracket once the values are passed, you just need to use the name of the variable (it's already an array).
9112	as i mentioned this variable is already an array of every checkbox you selected, so you will need to 1) go through the list individually or 2) construct your query so you can retrieve them all in one go.
9113	it all depends on what your final goal is.
9114	hope that this helps you get on route.
9115	i would recommend that you learn about debugging using xdebug so that way you can analyse better where you're failing.
9116	you can simply add a hidden input to your form containing the value of $thought_id :
9117	then when the form is submitted, you can access the value of thought_id using $_post for your query (also cleaned it up a bit):
9118	here php is server-side execution and javascript is client side execution.
9119	and $_session is a server-side construct.so probably you can not access that directly using javascript you would need to store that variable in $_cookie to be able to access it client-side.
9120	after this first replace, you can use str_replace() for all the other ++ to replace with "he".
9121	later edit:i checked and i saw that str_replace() has a limit parameter so you could use it too instead of preg_replace() .
9122	the relevant part of the code then looks like this:
9123	without using intval() i also received the error syntax error or access violation: 1064 you have an error in your sql syntax; check the manual that corresponds to your mysql server version for the right syntax to use near ''0', 10' at line 1
9125	in your case, it seems a post is more appropriate (reply).
9126	if you're going to be able to access it with :
9127	without keys, it would be just $new_option = $_post; to get the string
9128	since you are taking your posted value as $_post['new_option'] ..you need to pass the data object as new_option in ajax...
9129	a cleaner way to achieve what you want is to use arrays instead of $this .
9130	you will have all the info you need and nothing more.
9131	there is a lot of stuff in your $this object than you don't need.
9132	a good practice is also to use the input class of codeigniter when you get your $_post variables.
9133	note you are vulnerable to sql injection.
9134	since you are using mysqli, you may wish to consider using mysqli prepared statements .
9136	it opens up your system to sql injection .
9137	while it's unlikely that someone could compromise your site when only insert statements are exposed in this way, it does mean that:
9138	anyone with an apostrophe in their name will break the logic of the request you are exposing a method by which someone can carry out a stored xss attack by submitting javascript to your guestbook
9139	regarding the sql injection problem, there are 2 methods to protect your system - one is to transform the data in which a way that it cannot break the sql string it is added to (e.g.
9140	using mysqli_real_escape_string()) but the recommended approach when using pdo to mediate your code's interaction with the dbms is to use variable binding.
9141	here you compose your sql command with placeholders for the data and substitute them at run time.
9142	if your id is generated from a mysql auto insert id, then you can read the value from $conn-> lastinsertid
9143	your next problem is how to communicate this securely to the page where the user submits their guestbook comment (in your example code you try to do both operations in the same page).
9144	sending it in a round trip to the browser, as a cookie or as form variable means that it could be tampered with.
9146	when you receive the post containing the guestbook data, then you should use an update user set guestbook=:gstbk where id=:id_from_session (or you could insert it into a seperate table with id as a foreign key )
9147	lastly, when you output the message the person left in your guestbook, make sure you protect the browser from any nasties in there:
9148	you can use regex101.com to easily test your regex statement.
9149	this regex seperates your number from the rest of your result and gives you your number in $3:
9150	you haven't posted any code, so it's difficult to say where exactly you're going wrong, however, here is a simple example that works for the values you posted:
9151	as an aside, i don't really think you want to use htmlspecialchars() when dynamically generating javascript code.
9152	the appropriate context there is not html (unless you're inlining the javascript in an html attribute, which i assume is not the case here).
9153	now that i see the code you've posted, i believe you can resolve your syntax error by single-quoting the rendered json string in the javascript context.
9155	that is not identical to the domain of the site that a possible bot would be working for, though, and will not tell you in what ways your content is re-used.
9157	do you need to use array_push?
9158	$concate = array_push($test,$orgnisation_name); $test is blank at this point.
9159	if you just want to add an item to the $concate array, $concate[] = $orgnisation_name; is enough.
9160	do note that this work only if the string formatting for each piece of data is consistent.
9161	your last item is an array, so you have to iterate through it to retrieve its values.
9163	in your code dont use $_post directly.
9164	there are many reasons, like sql injection attack , data inconsistency etc.
9165	use a function like mysql_real_escape_string or other functions available (another topic for discussion)
9166	to answer your question, you would need an active database present in your server (prefereably mysql my fav :p).
9167	you can follow the tutorial here or here to insert values before mailing to the user his details.
9169	then, you have no $_post['drowpdown'] whatsoever, so your isset() would never evaluate to true.
9170	if you meant to refer to the dropdown html input field, you're on the wrong track.
9171	you don't call a text input like $_post['input'] , don't you?
9172	also, since you give it an empty value (which you presumably don't want to use in your mailing), you can do something like
9173	on second thought , insert in your database a non-empty value for the $_post['user'] field, so you should do that check before running your query.
9174	here we simply use usort() to use our own custom compare function.
9175	in this function we first explode() the time by a dot, so we get the time and the milliseconds separately.
9176	after this we convert the time into a timestamp with strtotime() and multiply it by 1,000 so we can add the milliseconds to it.
9177	you need to install a postgres driver/module, as mysqli is the driver for mysql.
9178	or if the package is installed, you need to enable de module in php.ini
9179	i guess your code is in a class which uses the namespace website\magento so you have to tell php that you want to use the class mysqli from the root-namespace.
9180	but this is just plain php and has nothing to do with pimcore ;-) please have a look at the following link, it describes in detail how to work with namespaces in php: http://php.net/namespaces
9181	i think it's because of your quotes around the set of integers.
9182	moreover it is possible you have a typo on your limit syntax.
9183	let's use the standard limit :limit offset :offset synthax, more readable and compatible with every database.
9184	check out parse_url() , which can do the split you want.
9185	you might want to do a substr to get rid of the www.
9186	this can be manipulated by attackers in certain circumstances, so make sure you escape it with htmlentities($domain, ent_quotes); when you echo it to the page.
9187	in the example you link to the author suggests doing this:
9188	note that in the original, the === comparison operator is being used, but in yours you are using == .
9189	but the form is then processed below that.
9190	all that will do each time is reset the value of $_session['form_secret'] .
9191	instead that chunk of code needs to be with your html form page.
9192	the whole idea is that the &lt;input type="hidden" name="form_secret"… is set with the $secret = md5(uniqid(rand(), true)); value when passed into $_session['form_secret'] .
9193	and then the session_start(); allows your php to pick up the value of $_session['form_secret'] &amp; act on it.
9194	you can add a hidden field with the index to determine which session index it is.
9195	after that you can use the variable to unset the session.
9196	and your php code which catch the remove event to something like this:
9197	$f and $h are not being set you are inserting into (a,b,c,d,e,f,g,g,i,j,k) .
9198	you don't escape your input, making an apostrophe ' in any of the fields break your code.
9199	use mysql_real_escape_string() ... or better yet, don't use mysql_ functions at all, but rather use mysqli_ functions or pdo functions.
9200	uploading too many files will hit the max post value set for php and/or webserver.
9201	(check the values in php.ini and httpd.conf if you are using apache.)
9203	imho, the best way to handle this properly is to create your own thin database layer and encapsulate calls to mysql_query in your own functions.
9205	here's a comparison between mysqli and pdo .
9206	first make sure, $column is in an accepted list of values.
9207	next, you can't bind :column you will have assign it like so:
9208	or a sufficient replace ( preg_replace ).
9209	though you would likely wrap it in a try/catch and set exceptions to be thrown in your pdo instance to make sure it's even legit.
9210	if you can post the page you can get it from $_post array other wise you have to pass in url like http://test.com?photo_id = $_get['photo_id']; using php header function
9211	mysql queries are not case sensitive by default.
9212	you can set a column to be case sensitive by manipulating its collation to be case sensitive or case insensitive.
9213	but you may not wish to have case sensitivity baked into the column itself (unless you need that for indexing purposes, see below).
9214	in order to run a case sensitive query, you need to use the binary keyword to cast your column appropriately:
9215	you would need this type of logic if you want to display some intelligent error message to the user.
9216	if instead you just want to create an exception scenario, or ignore the change, you could instead create a unique index on your column - for your situation you'll need to make sure that it's case sensitive.
9217	then you could do the following:
9218	the ignore is optional, that's why it's in brackets.
9219	that will update the column if it does not violate the unique index, it will give you a mysql error if it does violate the unique index and you omit ignore , and it will silently have no effect if it violates the unique index and you use ignore .
9220	... and that would probably be what you're looking for, or you could use the query modifications above to not even receive a matching result if the case doesn't match.
9221	i'm not sure and i don't fully understand the fix that you had made.
9222	but for me, the check if(isset($_post['submitbtn'])) fails in both ie8 and ff4; it worked fine in chrome12.
9223	and the reason is that when you are using an &lt;input type="image"&gt; kind of button to submit the form, you need to check it like this:
9224	and that check will work on all browsers.
9225	to check this, you may like to do a print_r($_post) just before where the if() starts and see how it looks like.
9226	update: the alternate response on this page using http_build_query is better because it lets you add new variables to the query string without worrying about extraneous ?s and such.
9227	but i'll leave this here because i wanted to mention that you can access the literal query string that's in the current address.
9228	so you can access them directly as variables.
9229	there are definitely different gotchas depending on which database you are using.
9230	if portability is a concern, i'd not rely on some of what might be mysql idiosyncrasies that you seem to be finding, above.
9231	when you are considering writing a piece of code, assume it's going to change.
9232	that doesn't mean that you're assuming the kinds of changes it will have hoisted upon it at some point in the future, but rather that some form of change will be made.
9234	what if i want to make that database connection context aware in the future?
9235	what if i want it to close and reopen itself every 5th time it was used.
9236	what if i decide that in the interest of scaling my app i want to use a pool of 10 connections?
9237	or a configurable number of connections?
9238	then, in 6 months when your app is super famous and getting dugg and slashdotted and you decide you need more than a single connection, all you have to do is implement some pooling in the getconnection() method.
9239	or if you decide that you want a wrapper that implements sql logging, you can pass a pdo subclass.
9240	or if you decide you want a new connection on every invocation, you can do do that.
9241	array_search('68315163', $data) doesn't return anything useful because the value you're searching for is not in the array.
9242	you should use some mvc framework like yii2 for your application to get a clearer separation of concerns here.
9243	at the moment you mix up ui and business code which is not very maintainable.
9244	also this framework provides you activerecords which makes it easy to store formulars into db.
9245	lets assume you have a formular with has the fields amount, note, price for example.
9246	testsave.php references $_post['canvasdata'] , but the js sends the intended variable as imgbase64.
9247	that line should instead read $img = $_post['imgbase64'] in order to match the ajax.
9249	first you need to find out which statement fails by checking their return values (always read about every command you use in the php manual first).
9250	update: and if you want to deal with exceptions (as pekka suggested): how to squeeze error message out of pdo?
9251	i believe you are using print_r() in backend php code:
9252	when you are using datatype in ajax try this in backend:
9253	it's because $lang_result is an array that has array elements.
9254	i'd suggest you do foreach on $lang_result (or even better for , so you get a counter right away) and then use array_search to find if there is a match, and then mark that element using a counter.
9255	also, isset accepts more than one parameter, so you could use it like this:
9256	no, you need to use the mysql function unix_timestamp as described here
9259	for using the cookie, put the following at the top of the script:
9260	this will send all the form fields in the post request with your ajax call.
9261	if this is not working, please try to var_dump($_post) to make sure what you are getting.
9262	because disabled fields are not present in $_post array.
9263	in your case make id field auto increment in the database and make a query without it:
9266	the only thing that links a user to its specific piece of session data is the cookie with the session id, which can manually be changed.
9267	if you have a lot of active sessions, they might guess a valid session id and hijack someone else's session.
9268	i am using php json_decode for ease of use and using print_r to demo, you could use a foreach loop to print it out properly
9269	if you want multiple images on one page, you should use this php file to produce one image, and then use the php file as the source in an html image tag, like this:
9270	when getting the filename via $_get , it would be a good idea to watch out for unexpected characters, especially slashes.
9271	someone could call the url like this: picture.php?filename=../badimage.jpg , which may display a file in a different folder than you want them to have access to.
9272	so perhaps do something like $_get["filename"] = stripslashes($_get["filename"]); or something.
9273	placeholders, you can pass each value to be bounded as the values of an array (see example #3 from the manual ).
9274	now, since you are using implode , $values will be a single string, something like
9275	because you only sent and array that has one value: the implosion of the other array.
9276	since you didn't provide the same amount of values (1) as you have placeholders (5), you end up with
9277	you should note that there're two completely different php extensions designed to connect to oracle databases:
9278	oci8 is the extension developed by oracle corporation.
9279	it's actively maintained and it's the recommended way to interact with oracle.
9280	pdo_oci is the pdo driver developed by the community.
9281	it was never finished and it's actually kind of abandoned (thus the experimental warning displayed in the documentation).
9282	both contain the oci (oracle call interface) term because both make use internally of the oci api provided by oracle.
9283	as such, you need the oracle instant client no matter what library you choose.
9284	but you then need to install the corresponding php packages.
9285	in your case, you're installing oci8 and then trying to run pdo code.
9286	if you're having trouble getting the php_pdo_oci library installed either via pecl or via compiling from source, this pdooci class on github may be able to help.
9287	the only difference is the way you instantiate your pdo object.
9288	the rest should work exactly the same as if you were using a pdo object.
9289	if you want to echo the xml, do echo htmlspecialchars($xml_string) but don't store it in the variable.
9290	but you are missing the xml declaration, at the beginning of the string:
9291	since the id keys are different, you cannot use array comparison functions and operators directly.
9292	i would recommend simply iterating the array and comparing the keys:
9293	if the number of fields is big, or even is unknown, you can create temporary arrays with the id field unset and compare them with comparison operators:
9294	there are a number of ways to do this, the best really depends on the rest of your code.
9295	my personal preference for linear navigation like this is to store pages the user visits in an array in a session, e.g.
9296	then all you need to do is put an if in array around each item in the "breadcrumbs", e.g.
9297	from your newly posted code, there is a closing &lt;/b&gt; but no opening tag.
9298	as for unsetting to revert back to a step, you'd be best to do something like this:
9299	this is a simplified version of how cookies work, but it's basically accurate.since you're unsetting the cookie on the server, you have to request the page again to be given the new http headers that don't contain the old cookie information.
9300	that's what the reload would do.
9301	the output of var_dump or print_r is readable - the problem is the html output, which removes line-breaks.
9302	so i suggest to use this functions inside a pre-tag
9304	so, the size of the column " wochentag " is 2, and that was the problem.
9305	so, the only thing i had to change was the size of the wochentag column from 2 to 3 and the code runs.
9306	i'm not sure what your place_holder variable contains, but i think this might be the reason.
9307	join is just another name for the implode function which returns a string.
9308	execute needs the actual physical input item.
9309	from the php site on execute for the array of input values:
9310	as stated in comments, here is a function that will execute a sql string using the given data object.
9311	it would be best to separate this out into a couple of functions (create parameter array, bind parameters, ect), but i have put them all into one function for readability.
9312	php does have the concept of variable variables , so you can do this:
9313	you can't apply it to all the elements of an array, nor can you use it with $this-&gt;foo notation for object variables.
9314	you can use the variable variable syntax to get the value of your object variables corresponding to the attributes this way:
9315	notice the $key after -&gt; .
9316	normally object variable syntax does not have a $ in that place.
9317	by using a $ there, i'm telling it to get the value of the object variable whose name is the value of $key .
9318	this produces a single string with values separated by commas.
9319	it doesn't matter if you wrap it in array($result) , that just creates an array of a single string, even though the single string contains commas.
9320	instead, you need to pass to execute() is an array with the same number of elements as the number of ?
9322	another option is to use __dir__ or dirname(__file__) depending on the php version you are using.
9323	either of those two ways will return the folder name where the file that is executed by php resides in.
9324	the implementation is similar to the above, the only difference is that you are trying to figure out which file it is accessed, instead of which uri was requested (better practice and more secure).
9325	i would suggest to go for a more general approach, try fetching the uri and then use explode
9326	now you want to compare the, just use the last part to compare!!
9327	to get the completer url, you can use below code (without any tags stripped or without worrying about http/https protocol) :
9350	i'm not sure if you're looking for something this obvious:
9351	(here i go through every element of the array with array_map() .
9352	then i return each element with 999 at the start plus the original value with an offset of 1 which i get with substr() )
9353	you need to call your functions if you define them.
9354	not doing so is like building a room within a new house but forgetting the door.
9355	it's there, but nobody can use or access it.
9357	you should at least do a basic validation of the data to see if they are correct!
9358	first of all before writing a solution and tell to much, it is always a good practice to make step by step code troubleshooting.
9359	i removed the if statement and a lot and just focused to see if i get some thing returned, i did not .
9360	and if you want to check your code returning some thing or not, use var_dump($somevariable) .
9361	last thing, before making a post form, you could create a dummy username and password in your database and inject that directly in your code like, just to see if every thing is working, and then move to your form:
9362	the solution i did is just to demonstrate how to do it and not necessarily representation of the best logic, but it is up to you to find the correct logic and all depends on your strategy.
9363	you can get the value of the radiobutton by using following code:
9364	now you can do a simple check in your backend:
9365	when you want to get the value of a radiobutton and the names are the same(when you have multiple radiobuttons) you can get the value by using $_post['name of radiobutton']
9366	sessions and cookies are domain dependent, it is a browser security issue.
9367	however, there is a "trick" you can try, even though it is a bit more complex:
9368	authenticate the user, emit a jwt code and create a key=>value type of record in a shared storage (database most likely).
9369	the key should be unique, the value should be jwt code and also set an expire time of 20-30 seconds.
9370	in the response html you need to make the browser set cookies for the other domains.
9371	that can only be done on those domains.
9372	so you need to fool it with something like:
9373	you could pass the jwt directly, but passing a key that expires fast should be more secure.
9374	add an image for every domain.
9375	instead of a cookie you can create a session on each domain.
9377	you can also bind parameters separately (rather than in pdostatement::execute ) using pdostatement::bindparam , eg
9378	there's plenty of information around regarding prepared, parametrized statements if you're interested (which you should be).
9379	these would be a good start
9380	you'll want to do the same in your select query, eg
9381	i don't know if this is your problem (don't know how much you know about php so just saying).
9383	looking at this code, firstly i can see $result =mysqli-&gt;query() the $result here is a mysqli object and cannot be compared with the constant.
9384	please get the values of the object first then do the comparative.
9385	the problem is that the key mail_subscribe will exist in $_post only when the checkbox is checked.
9386	that being said, xpath will accept html entities in the place of their literal values, so if you run your variable through htmlspecialchars($var, ent_quotes) you will be safe.
9387	it is written by me, and how to work with it is similar to the pdo wrapper.
9388	you are prematurely ending the string to be echo ed by using double quotes within the string.
9389	one way of fixing this would be to use only single quotes within your double quotes, like:
9390	if you haven't enabled the display of error messages, you will encounter a blank screen when there is a syntax error.
9391	you can enable them by setting the following at the top of your script:
9393	you are concatenating the value of $_session['classid'] .
9394	instead of this you should be using prepared statements.
9395	change your code to something like this:
9396	the 'i' is a placeholder for an integer.
9397	if $_session['classid'] is a different type, you should change the placeholder accordingly.
9398	see the bind_param documentation for more details on that.
9399	$_session is managed by php, sessionstorage is managed by the browser.
9400	if you want to do this, you have to pass instructions to javascript in the document, like this:
9401	preg_match stops looking after the first match.
9402	preg_match_all , on the other hand, continues to look until it finishes processing the entire string.
9403	once match is found, it uses the remainder of the string to try and apply another match.
9404	you can watch this series to fully understand perl compatible regular expressions: https://www.youtube.com/watch?v=gvzoj1renug&amp;list=plfdtiltirhwgrpypmgulpwuiwgei9kp1w
9405	the preg_match_all function searches for all the matches in a string and outputs them in a multi-dimensional array ( $matches ) ordered according to $flags .
9406	when no $flags value is passed, it orders results so that $matches[0] is an array of full pattern matches, $matches[1] is an array of strings matched by the first parenthesized sub-pattern, and so on.
9408	this approach is vulnerable to sql injection attacks.
9409	javascript arrays must be defined first by using var variablename = new array(); , otherwise they will function as if they are standard variables.
9410	so it is best to avoid the hassle of setting and handling them if they are not needed.
9411	if you really want to use preg_match (even though i recommend strpos , like on xeoncross' answer), use this:
9412	your missing an closing tag for the values, and from is preserved, so you should escape it... (use quotes around it should do the trick,...:
9414	there is a missing parenthesis at the end of your generated query.
9415	from and date are reserved keywords, enclose them in `.
9416	seen and toid are not varchar fields, and therefore their values shouldn't be enclosed in ' .
9417	warning : this is vulnerable to sql injections.
9419	prepared statements will help avoiding them.
9420	i believe the function you're trying to use would be mysqli_stmt::free_result() .
9421	you'll need to change this line:
9422	the second uncaught exception occurs because mysqli is an unbuffered sql query handler, so you should store your results if you're looping simultaneous executions with something like $stmt-&gt;store_result(); and then you can unload the mysqli buffer to state a new query.
9423	if you just want to find the row, you don't need to explode in php.you can use find_in_set
9424	those values are telling pdo how to treat the input, not to disallow input.
9426	it won't tell you "you entered abcd but expected value was integer".
9427	you must do this check on your own before passing data to pdo .
9429	this is intended for when you invoke stored procedures and variable is supposed to be modified based on procedure's output.
9430	if you tried to do the following with bindparam , it wouldn't work and you'd get an error:
9431	$stmt-&gt;bindparam(':my_column', 1, pdo::param_int); // it fails and yields an error don't lock tables.
9432	you're already using transactions, no need to lock the table, mysql handles concurrency and access for you.
9433	you are rolling back your changes every time by calling $pdo-&gt;rollback(); at the end of your script.
9434	you should only call $pdo-&gt;rollback(); in your catch block and remove the $pdo-&gt;rollback(); and the end of your script.
9435	your code is working with myisam tables because the myisam engine does not support transactions so that $pdo-&gt;rollback(); has no effect.
9436	change the string that you are getting and use explode twice like this :-
9440	has a parentheses missing at the end and a missing opening brace.
9441	has a missing semi-colon at the end, should read as:
9442	this occurs before garbage collection is even thought of.
9443	so there you have it, unset() does actually help you out during the lifecycle of your app.
9444	nitpick corner: technically, there are two reference counts in play here -- the object's and the zval's.
9445	the reference count of the object is only 1 throughout the program, it's actually the reference count of the zval that's changed in the assignment and in the call to unset .
9446	i realize this line was commented out, but if you are running such a query, i would suggest indexing metadata.memberid to avoid scanning each document in the fs.files collection.
9447	you may be able utilize multi-part http responses to send back multiple images, but browser support could be problematic (see: this question from a few years back ).
9448	in your getphoto.php source, you're intending to call mongogridfs::findone() with a string parameter.
9449	you should be aware that users could exploit the query string so that $_request['filename'] is actually an array (see: this post on the subject ).
9450	you would do well to check the request parameter and/or cast it to a string before passing it to findone() .
9451	this is going to query on the filename field, so you should make sure that it's indexed.
9452	per the fs.files specification , the filename field is optional and not necessarily unique.
9453	it's quite possible that multiple files in gridfs could have the same filename.
9454	considering the above points, it may be easier to just use the 24 hexadecimal characters of the objectid as a request parameter, construct a mongoid , and query with that on on the _id field (or use mongogridfs::get() ).
9455	my previous points on validating the request parameter would still stand in this case -- it would allow you to use the default _id index.
9456	the difference between foreach and array_keys in terms of speed will be so negligible that you will have to run a big scale test to even figure out the difference, just that the array_keys way looks more neat (subjective).
9457	premature optimization is the root of all evil if you want to test which of the two approaches is the fastest, write two scripts, run them a couple of thousand times, and compare the average time taken array_keys does not use foreach as such, but array_keys , internally, iterates over the elements of the array in exactly the same way as foreach does php arrays are hash tables, their implementation is well documented: here, for example .
9458	how a basic array iteration works is explained with c examples, read through it, then look at php's source and find the array_keys implementation if you want to be absolutely, sure
9459	it's entirely possible foreach is faster (no function call overhead), but it's a lot more verbose to write, and the performance difference between the two won't be the major bottleneck in your project.
9460	also note that, depending on your php version (and cached op codes), the benchmark scripts might produce different results entirely
9461	performance wise they are pretty much the same you can't really measure a difference, so simply put: premature optimization is the root of all evil .
9462	use whichever piece of code is most reliable and easiest to maintain, document and explain.
9463	when you're done writing your code, then start profiling it, then think about optimizing the major bottlenecks.
9464	so from performance view there is no real difference between both methods.
9465	but if you look at both scripts you will see that with the foreach loop you kinda write more code and also a "useless" loop, you can also see this that the method with the foreach loop then generates more opcode and makes almost double the amount of operations as the method with the array_keys() :
9466	also as pointed out in the comments from @eliasvanootegem it's not always a bad thing if a code generates more opcode to makes this clear here!
9467	array_keys() doesn't use directly a foreach or for loop, but it also loops through the array.
9468	you can see this very clearly in the source code :
9469	if you echo that into your browser, you have to use view-source to view it or you need to encode it to html first:
9470	you can compare that with the object you have for example with a database:
9471	i think the the problem is in the variable name.
9472	and by the way, if you assign a custom click handler to a html link, it's better to call event.preventdefault() as a first thing in handler, because otherwise browser will try to follow the href attribute of this link, in your case - scrolling page up to top.
9474	i see you using $_session[custno] before it's called.
9475	that's why your textbox is empty.
9477	simple solution: use multiple api calls.
9478	one to set @n=0 , then a separate api call to execute the select query.
9479	as long as you use the same connection to mysql, the value of @n stays alive in the session.
9481	when using pdo::fetch_bound with fetch() , the method will not return a result record.
9482	instead the value of the column should be available in the variable you have bound using $stmt-&gt;bindcolumn() earlier.
9483	however you won't need that bindcolumn() call.
9484	you could simplify the code as this:
9485	there is too much code in your class.
9486	to send a distinct query to get just one property from database, creating a distinct connection for this is a dead overkill.
9487	connection have to be moved away unconditionally and you must think of getting all user data with one query.
9488	better go with foreach( $_post['checkbox'] as $k =&gt; $v) , it may not always be numbers and even if this way you do not have a loop for each possible in range but only for each selected checkbox.
9490	i got this to work and figured i'd post the results for everyone who might need them in the future.
9491	i realized that i know what the keys are and that i can use them in the implosion process.
9492	add mysqli_use_result as the resultmode parameter to the mysqli::query call in order to iterate over the results one row at a time, without transferring them all to php in one bunch.
9493	see also the documentation for mysqli::use-result .
9494	this problem is because, in array_reverse() and sort() you are passing a variable which is non-array.
9495	check your parameter, before executing these function, execute thesefunctions only if the parameter is array.
9496	check your parameter, if it is null or non-array make it array.
9497	i recommend you the second solution, because even if the array is null it will not affect the other functionality.
9498	so that you only get the 1 value, and you can remove the implode() ->
9499	you can't use like '%something%', '%somethingelse%' , that syntax is not valid.
9500	you need to use the or keyword to list your filtering possibilities.
9501	no, you have to instantiate a new mysqli object.
9502	you can use the same variable $mysqli though but you have to write this code again:
9503	although it is not in the documentation, mysqli::connect() is a method, and you can use it to "reconnect" your object -appears to just be an alias for the constructor.
9504	if your login process set a $_session option you can check this.
9507	all that matters in this equation is that the value of the $_get string is always sanitized before being passed to the database.
9508	in your case user_id seems to always be an integer, so for you it's as simple as:
9509	meanwhile if using prepared statements, you can just pass the value along and rest easily.
9510	in this way, we allow the mysqli driver to handle the sanitizing of the data for us, as we've told it that the bound parameter $_get['user_id'] must be an integer as well.
9512	i would recommend that you use pdo.
9513	if you already know about pdo, this would be how you'd make sure you get 'single' result set.
9514	use the str_replace function, it takes a string and replaces all occurrences.
9515	that will print the entire array with the keys and values.
9516	i think the problem could be the connection, everything else looks fine, i dont think you can access a mysqli object with normal mysql_conn..
9517	also, don't change to mysql, it is far too old now!
9518	look at mysqli and the php data object both are very well documented
9519	result of count($_get['s']) is correct, because with ?s=1&amp;s=1&amp;s=1 you overwrite s parameter with the last value.
9520	if you want to pass an array, do it with:
9521	if $result is an empty data set, this error is triggered.check if the number of rows returned is >0 before doing this.
9522	mysql_num_rows is what you should use to check rows returned before trying to put it into an array.
9524	you're checking $_post['search'] , so the name of your text element field should be changed to search.
9525	if you run php in the way you do.
9526	but not actually posting the form.
9527	you will have to submit the form through a browser to populate the $_post vars
9528	you can have both the php driver produced by microsoft and pdo.
9529	the 2.0 version of the microsoft driver includes a pdo driver.
9530	you can download it here: http://www.microsoft.com/downloads/en/details.aspx?familyid=80e44913-24b4-4113-8807-caae6cf2ca05 .
9531	this whitepaper should get you started: http://social.technet.microsoft.com/wiki/contents/articles/whitepaper-accessing-sql-server-databases-from-php.aspx .
9532	(and you should escape the $_post[] columns, too.
9533	your form input's name attributes need to match your database table's columns.
9535	this is an example how to use pdo with prepared statement.
9536	you will have to tweak it according to your needs and you have to check if the post/get not empty as well.
9537	i prefer to use post request for login so this example will use post request..
9538	this is how to create the user.
9539	note that i don't check if the username already exist.
9540	you can either implement it yourself or use unique index on username column provided that the collation is case insensitive.i have also increased the cost from the default that is 10 and i defined password_default to be used because i want the php engine to always use the strongest available algorithm (currently bcrypt).
9541	i'm guessing that $_session[$attachment] contains the name of your generated pdf file, so what you are doing here is attaching the name of the file as an attachment, rather than the file itself.
9542	you should probably be using this instead:
9543	mysqli_stmt_bind_result() tells mysqli which variable you want to be populate when you fetch a row, but it doesn't fetch() anything yet.
9544	this is necessary to call once, before you call fetch.
9545	mysqli_stmt_store_result() sets an optional behavior so that the client downloads all rows when you fetch() the first row, and caches the whole result set in the client (i.e.
9546	subsequent fetch() calls will simply iterate over this client-cached result set.
9547	but setting this option itself does not cause a fetch() yet either.
9548	the reason for that is because you haven't submitted the form yet, but you are already trying to define variables based on $_post values.
9549	you need to check if the values are set first:
9550	while your page is load at the time your $_post data is not set, so that it will not render the keys that you mentioned.
9551	use any of the following solution:
9552	as already said across many answers, the reason you're getting the notices is because you're trying to use data which haven't been sent to the server yet.
9553	to avoid these you first have to test if you have indeed been sent the data, and only then act upon it.
9554	this is the reason why it works if you put it into a separate file, but it would still give you the same notices if you open up the target url for the form directly (bypassing the form).
9555	note that even if stuff have been posted to the server, it doesn't mean that all of the data you expect will be there.
9556	some times normal functions of the browsers mean that they won't send some fields (unchecked checkboxes etc), and other times it's the user trying to do something you don't want them doing.
9557	this is why it's important to also check each and every value.
9558	not only if it exists, but also if it is within an acceptable range of input values/patterns.
9559	this last bit is called input validation, and is normally done with the filter_var() function and its bretheren .
9560	note that i've stripped out a lot of the (unnecessary, imho) html from this, and note that this is a rather crude example.
9561	enough to show you the steps you need to take, but not quite ready to be used in production.
9562	the error handling should be done a bit more graceful, with detailed explanations to the user about what failed and what's required/permitted in these fields.
9564	also don't use htmlentities i suggest you to use htmlpurifer to santize inputs from malicious inputs.
9566	third way is a most efficient because in this case php sees single quotes and do not spend resources to analyse string.
9567	strictly answering your question with the information you provided: if you're falling under else clause, it obviously means your if clause wasn't fulfilled.
9568	in your case, $author_output &lt;= 0 , which lead us to believe 1) your query is returning no results and therefore you must review your table contents, select parameters and etc or 2) your query is returning error and you're not dealing with it as you should.
9569	use php sessions instead of cookies.
9570	php will automatically handle the session management.
9571	you can also overload its functionality if you want more control.
9572	with php-sessions, only a session identifier is stored in the browser cookies.
9573	you can store any information in the superglobal variable $_session , and the browser will not be able to see or tamper with these variables.
9575	this is to make sure that nobody hijacked the session id and is pretending to be logged in from another location.
9576	not sure why you need explode here.
9577	you can find the position of the last period using the strrpos function and get everything after that pos:
9578	there are no difference for any sensible amount of data.
9579	that's not a thing you have to be concerned too much of.
9580	just use whatever you like more - for readability or other subjective reasons
9581	whenever your page is opened, you check if there's set cookie_name cookie through isset($_cookie[$cookie_name]) .
9582	if isset returns false, you set a cookie through setcookie(cookie_name, value, expire); , maybe setting expire time to 24h (you have to set it in seconds, so 24h is 84600).
9583	also, you trigger your counting systems with a +1 to your visitor counter.
9584	you also have a authentication bypass issue because you don't exit() after the redirect.
9585	if you don't exit() after the redirect, the user can choose to ignore the redirect and thus bypass your login system and receive the protected page contents.
9586	as @jim pointed out, you are calling session_destroy, why?
9587	even though it won't be destroyed until the end of the script this will still produce a bug in your system when the user tries to advance to another protected page (they will be logged out).
9588	use if ($_server['request_method'] == 'post') .
9589	what if you rename the submit button?
9590	if(isset($_post['submit'])) checks if the variable exists or in this case if the key exists under the array and is not null.
9591	if($_post['submit']) will check if the value of $_post['submit'] is equal to true (or some other value that evaluates to true).
9592	the second method there, will throw a notice error if the variable is not set.
9594	if they're related to the html code you've got name="a' .
9595	'_post" then you could change this code to post variables instead -- something like this:
9596	then instead of having post variables named a1_post and a2_post , etc, you will have ones named a_post[1] and a_post[2] etc.
9597	it then becomes very easy to loop through them because they're an array.
9598	you can access any $_get values by using this code $_get['sub1'] which will return sub-1
9599	if you are using php, add [] to the input names, and you'll receive an array of values.
9600	that's because + (applied to the arrays) appends the data from the right array that is not exists in the left array.
9601	you've used var_dump($reals + $dummy); which means: take $reals which consists of 1 item (today as the first and the only element) and append everything from $dummy that has another keys.
9602	as a workaround, you could use string keys in the format of yyyy-mm-dd to prevent array_merge() from re-indexing.
9603	it's also more descriptive than timestamps.
9604	you could use dateperiod to easily create the keys.
9605	if you are looking for an optimal solution, i would do something like this:
9606	this just does one iteration over the data from the database and inserts missing keys with values of 0. it only works if $values is already sorted, and it depends on days being exactly 86400 seconds apart (as does your original solution).
9607	as soon as you'll create an object, the constructor will be called and the things will work as expected-
9609	anything set to $segments will appear in the url.
9610	so this $segments[] = $query['view']; adds the view to the url.
9611	since your parser automatically sets the view, still unset the view in the build function, but don't push it into $segments :
9612	naturally, you may have to adjust your parser, since now the number of segments will be different, so you will need different index values.
9613	it's just pure logic - it'll be a lot clearer if you make your forms use method="get" instead of post.
9614	when you load it in the beginning you click on the button named "test" and so you have a $_post['test'] value when you load the next time.
9615	once again your logic at the top of index.php is this:
9616	and since there is no value in $_post['test'] your test() function never gets called and you never see the button you're expecting.
9617	really - change your forms to get (you'll have to use $_get or $_request instead of $_post) so you can see exactly what is set each time without having to resort to all the fancy file reading and i think it'll be really clear.
9618	nl2br() will not replace the newlines, but will additionally put in the &lt;br /&gt; .
9619	so you need to simply remove the &lt;br /&gt; , not replace it with a newline: str_replace('&lt;br /&gt;','',"$abme");
9620	since $s2 is an array i think you want to use in_array() function, cause strstr() is font string only, not array
9621	i think you can var_dump($_files) to see,and check you html form is have enctype="multipart/form-data"
9622	puting it in file may cause problem because you need some kind of delimiter, you could encode it with base64 and append \n in the end of an entry
9623	you should consider using at least simplexml if you don't want to use db.
9624	this is essentially example 1 here: http://www.php.net/manual/en/function.array-multisort.php but our $ar2 is an array of arrays instead of an array of single values.
9625	also if you need more control over the sort you'll see examples of options you can use at that url: just add them to the list of arguments for array_multisort .
9626	take this any way you'd like: your sample code is very messy.
9627	if i caught one of my colleagues writing code like this i would give them a week to improve themselves or have them fired.
9628	you very likely just made an error somewhere but it's probably not in the code samples you provided.
9629	if anything, i would advise you to adopt a more robust programming style.
9631	it should be in one place in your whole application).
9632	make sure you're setting the session value before you check it.
9633	abstract away anything to do with sessions.
9634	don't check the session variables yourself, write a class that does it for you.
9636	you can also connect two stored procedures into one.
9637	just join the two tables in one select on userid and query using parameter you're providing.also i can see useridparam in your stored procedure but can't see it used in your code.
9638	anyway, remember to prevent yourself from sql injection .stored procedures don't always protect you from such: http://blogs.msdn.com/b/brian_swan/archive/2011/02/16/do-stored-procedures-protect-against-sql-injection.aspx
9639	this isn't really an answer to your question directly, but it's worth pointing out because it's an extremely serious security issue.
9640	the way you are constructing your queries opens you up to sql injection .
9641	the reason is that you are directly interpolating user-provided input (in this case, title ) directly into a database query.
9642	someone could use that to interpolate and execute their own, malicious sql within your query.
9644	notice how i have removed the variable $title from the query itself, and i am instead binding it to a placeholder :title inside a prepared statement .
9645	now, php will construct the actual "code" portion of the query separately, an introduce the variable :title later.
9646	even if the variable $title contains malicious sql code, it won't be treated as sql code - it will be treated as simple text, just like anything else.
9648	you pass it the array you want part of and the position you want to start it (minus one since arrays are zero-based keys).
9650	this will help prevent xss attacks.
9652	this will protect you from sql injection attacks.
9653	only use variables that exist -- which is what you should probably do.
9654	or test if they exist (with isset ) before trying to use them.
9655	in a case such as the one you presented, for a variable that's used lots of times, i would make sure it exists, and, if not, set it to '', for instance, at the beginning of my script.
9656	that's not really looking great, but it'll work -- and, this way, you won't have to go through your whole application, patching everything.
9657	(or i might also disable the e_notice error_reporting level -- i don't like that idea, but, sometimes, it's really the only way to deal with some code base)
9658	according to your code, you should use $_session['usr_permission'] instead of $_session['permission']
9659	you should be running your $_get['tutorialblock'] against a whitelist.
9660	here is an example for you.
9661	the above is only pseudo code (example), you still need to ensure user input is vaid.
9662	you can store in $_session a value that represents the user's home.
9663	if a user is outside his home directory, he will be redirected into his home.
9664	the value `$_session['home'] can be a value stored in the database or it can be the username itself.
9665	i have tried again to edit your code, you don't need to use global variable, because you instantiate the pdo class directly and use it on the fly.
9667	so you should not test if it is set with &lt;?php if (isset($_session['fail'])): ?&gt;
9668	so, you can get the question id in pagesubmit.php using $_post['questionid']
9669	it is because you are accessing the $_post array without checking that the key exists.
9670	you must check that the key exists before accessing it:
9671	if you do not check if it is set then you will get errors, if the form is not submitted:
9672	your monthly traffic is any data going in and/or out.
9673	* it does not matter how that traffic is generated, it counts either way.
9674	think of it as bits traveling through the network cable, that's what counts.
9675	in your case, it will certainly add download traffic.
9676	if $_request['file'] points to another server, so your server has to download the file first, it will also add upload traffic.
9677	on the 3rd line, you are searching for the string "1".
9678	since your first call replaced "7" with "1mbps...", the 3rd line will replace the "1" in that sentence as well.
9679	i would recommend iterating over the array, or use some regex.
9680	you can use implode and explode function to do this
9681	there is no setting, neither in php, pdo or mysql, that will tell mysql to return all dates as timestamps.
9682	just select your data in the format you need.
9683	do not optimize stuff that works all right.
9684	do not solve problems that don't exist.
9686	however, if you were to omit it, a user could enter a string into the name field that looks something like:
9687	the goal is to end the current statement, and then execute your own.
9688	-- is a comment and is used to make sure nothing that would normally come after the injected string is processed.
9689	however (again), it is my understanding that mysql by default automatically closes the db connection at the end of a single statement's execution.
9690	so even if i did get so far as to try and drop a table, mysql would cause that second statement to fail.
9691	depending on what happens to the data once it goes to the database, i may not want to inject any sql at all.
9692	i may want to inject some html/javascript that gets run when you post the data back out to a webpage in a cross-site scripting (xss) attack.
9693	which is also something to be aware of.
9694	add error reporting to the top of your file(s), which is not present query code.
9696	use mysqli with prepared statements , or pdo with prepared statements .
9697	sidenote: it appears as if you have spaces before your opening &lt;?php tag in your form; you may be outputting before header .
9698	using error_reporting(e_all ^ e_deprecated); isn't enough, you need to display them.
9699	you can use array_walk_recursive function, to go throw all leaves of the array, and escape values:
9700	also, it is good to follow data consistency rules, and do not use !is_array() , but is_string() , because mysql_real_escape_string takes string params, not !string .
9702	if you need edit keys, you may want to write your own recursive function.
9703	i don't want to copy answer, you can find it here
9704	and move the header() calls to the top of the script.
9707	you need to declare your array in php before you try and append a value to it:
9708	if you do this, the error will disappear and the output will no longer be invalid json.
9709	however, note that you should disable display_errors in production anyway, as errors can expose information about you application that may in turn expose an attack vector to a malicious user.
9710	you also set the request content type to application/json , but the actual type of the data you passed is application/x-www-form-urlencoded .
9711	php will not decode the data you sent and $_post will not be populated.
9712	yes of course you can, all you need to do is create another pdo connection to the other database.
9713	then its just a f.l.o.c to make sure you use the correct connection object in whichever query you are execution.
9714	this will verify (using ternary expressions) if the get variable is set, if it is, then it will apply the value to the textbox.
9715	also, as mentioned below by mopo, this is a new feature in php7 that will also work, a simpler way.
9716	also, you shouldn't check if the submit button is set using post... it shouldn't work.
9717	so what's going on with the yahoo login form is that, when the user click on the next button, the page does not do a full form post to the "consultation page" (page does not reload).
9718	what it does is that the page itself is using javascript, and made an xmlhttprequest to the "consultation page", with the details provided, and gets only the result from the "consultation page".
9719	this technique is called " ajax ", and it's around for more than 2 decades.
9720	take a look here for the very simple tutorial provided by w3school: http://www.w3schools.com/ajax/ .
9721	xmlhttprequest may be too simple for the real world usage.
9722	so plenty javascript frameworks out there have provided wrappers for developers to use this technique without the hassles of browser compatibilities.
9723	such wrappers are like the famous jquery.ajax , can do a lot of cool things that you can leverage with.
9724	for your problem, you will need to do something like this:
9725	when user click on a button to submit a form, instead of submitting the form, you call an javascript function to post to your second "page" the page that's responsible to it should receive all the parameters you have submitted in the call as per normal.
9726	if you do a post , you should get it via $_post .
9727	the page then is responsible in checking the data, do the task, and send a response back to the callee.
9728	the original page that does the post, will receive the response, and you can act accordingly, such as show an alert, or do whatever related actions on the page itself.
9729	pls consult documentation, what does mysql_query() return when there is an error?
9730	you will probably find it useful to run mysql_error() for more detail.
9732	for example, name like '%%%s%%' would become ifnull(name, '') like '%%%s%%' .
9733	like your current code, it assumes your various $_get parameters are set - it won't match the -1 you're using if the parameter isn't set.
9735	it is only pseudocode because your button is not part of form and there is no $_post in your code and there is no info (in your code) what to add in query after and (column_name = value)
9737	according to the php docs , lastinsertid is a method of the pdo object, not the stmt object (which you are referencing via $this->_query).
9738	@collind was almost correct, you do need to use an "arrow operator", but you should do that on the 0th element of the array.
9739	what this means is that your $page is actually an array of size one, and the 0th element is the object of stdclass , and it is that class that has two fields.
9740	the fields are named access_token and id .
9741	in order to access access_token you would write:
9742	php has a global variable that may help you with this.
9743	i think that what you want is http_referer .
9744	the best thing to do would be to print_r the php $_server variable at the top of the page http://mysite.net/aname/bname/cname/ename and then use the variable that contains the url that you want.
9745	so at the top of the page paste this code:
9746	come to think of it request_uri might be what you want.
9747	again, the best thing would be to print out $_server and see what variable has what you want.
9748	this has been reported as a bug a long time ago and it is not a bug, it is expected behavior, as stated by johannes in the comment.
9749	so, i guess, you have to use mysqli_ping after all.
9750	two corrections before going on: 1) in your script $mysqli = new mysqli(... implies that if valid, $mysqli is an object, not a resource.
9751	that's also true if it is created via $mysqli = mysqli_connect(... , though it might also be null to indicate an error.
9752	use $mysqli instanceof mysqli to check that, not is_resource() .
9753	2) don't mix mysql_* functions with the mysqli api.
9754	so, it would be mysql i _ping instead of mysql_ping .
9755	a) use $mysqli instanceof mysqli to check whether the script got an instance of a mysqli connection, regardless of whether the connection is still usable or not.
9756	if $mysqli is not an instance of mysqli, the script can't use the mysqli_* functions or mysqli::* methods, including mysqli_ping.
9757	when using $mysqli=mysqli_connect() instead of $mysqli = new mysqli(...) $mysqli might be null.
9758	instanceof will "return" false in that case.
9759	same if $mysqli for some reason is false or a string or a number or ....something else other than an instance of mysqli.
9760	b) if you have an instance of mysqli, you can use mysqli_ping($mysqli) or $mysqli-&gt;ping() to check whether the connection can still be used or needs to be re-established.
9761	there are operations on the mysqli instance that do work without a valid connection, though those are probably not of interest to you.
9762	you have a number of major problems in your code.
9763	before you continue, you need to read about the following topics:
9764	1) the php mysql_ functions have been deprecated.
9765	that means the functions will be removed in future versions of php.
9766	you should use pdo or mysqli instead
9767	regarding your question, i think you are asking how to change the metadata (such as a firstname) without unsetting the photo url.
9768	you could also use this conditional for a post request
9769	and check the input with a var_dump($_post); to see if the value exists in the array.
9770	this is only if you're expecting one form.
9771	if you want multiple forms on the page you could make use of naming your submit button in the html code
9772	you could also use this if you set an name on the submit button
9773	as far i understood from your description is you have want to add marks details in table mark_list which has the following columns with i uses bootstrap,php ,mysqli.
9774	if you need the second way i can even help you with that.
9775	it looks like to previous server was set with register global on
9776	note: this feature has been deprecated as of php 5.3.0 and removed as of php 5.4.0.
9777	it once defaulted to on , but was changed to off in php 4.2. you could still enable it in php.ini.
9778	it's been deprecated as of php5.3, and removed in php 5.4.
9779	i think a html_entity_decode() followed by a htmlspecialchars() is the easiest way to go.
9780	you could assign the array directly to the session using zend_session_namespace:
9781	you can use the array any way you choose.
9782	you can pass it to the view... $this-&gt;view-&gt;checkboxvalues = $session-&gt;checkbox_values;
9783	or you can pass it to your favorite model, what ever you need to do you can do.
9784	the session will remain until you unset it or overwrite it.
9785	as you can see from the output of var_dump , your required value is being stored as a member count(distinct writing.id) of the object.
9786	there are a few workarounds you can follow.
9787	first, you are trying to use sqlite_num_rows on a pdo handle.
9788	pdo is a database abstraction layer that works with many underlying database systems.
9789	sqlite_num_rows only works with handles from the native sqlite extension in php.
9790	so you can't use sqlite_num_rows here.
9791	will return a result set that looks something like this:
9792	assuming you have a row in the users table that has the value jeff in the name column.
9793	so you would still have 1 row, but the value of the mycount column in the result set would tell you if a match was found or not.
9794	so even if you could use sqlite_num_rows here, it wouldn't help you because it would always return 1 .
9795	what you really want to do is check the value of mycount in the result set, and if it is 1 then there was a match, and if it is a 0 there was not a match.
9796	keep in mind that if there were multiple rows in your users table that had the same name and password then count(*) would return something the number of rows where that match occurred.
9797	the following code should get you what you are looking for:
9798	the side effect of this approach is that you are protected from sql injection .
9799	next take a look here: how to change the session timeout in php?
9800	you are using hashing, but that is not needed here.
9801	you're better off not building a string, but building an array.
9802	the way you build the string you have a dangling comma, which you do not want.
9803	it shouldn't fail on htmlspecialchars() output, ever.
9804	&amp;amp; is a predefined entity in xml and &amp;#39; is a character reference which is always allowed.
9805	htmlspecialchars() should produce xml-compatible output, unlike the usually-a-mistake htmlentities() .
9806	what is the error you are seeing?
9807	if you have to allow users to input arbitrary html, it's going to need some processing.
9808	unless you really trust those users, you'll need a purifier (to stop them using dangerous scripting elements and xss-ing each other), and a tidier (to remove malformed markup either due to crap rich-text-editor output or deliberate sabotage).
9809	if you intend to put the content directly into xml you will also need it to convert to xhtml output and replace html entity references.
9810	a simple way to do this in php would be domdocument-&gt;loadhtml followed by a walk of the dom tree removing all but known-good elements/attributes/url-schemes, followed by domdocument-&gt;savexml .
9811	there is no reason for something called db_connect to ever extend something called model .
9812	not to mention there is no reason to call something model which doesn't tell anybody anything and as such is a pretty crappy name for anything.
9813	secondly as far as i can see there is no reason for you to wrap mysqli to begin with.
9814	what do you gain by wrapping an object like that.
9816	finally when you get rid of that odd inheritance tree you have going on you should inject the database connection into the classes that need it.
9817	also note that your code is most likely vulnerable to sql injection.
9818	isset is redundant to boolean checking, you don't have to use if you want shorter lines.
9819	(updated to use non-depreciated functions as suggested by andufo; i chose explode , but you could use preg_split if you wanted.
9820	as a side note if anyone still reads down this far, the accepted answer fails - try it with my first and last test case.)
9821	it needed some adjustment (his function didn't set the right scale, and failed on regular decimals, and as pointed out it did not account for the length of decimal places in the scale)
9822	a / was missing at the end of the uploads folder name, and should have read:
9824	just as a little nugget, if you want to preserve &lt;br&gt; as standard carrage returns, you could do this:
9825	notice how you were using backticks instead of single quotes?
9826	also for some reason you closed your query quotes randomly in the middle of the query.
9828	you can also use or die(mysql_error()); to see what errors are occurring.
9829	based upon your comment, you're checking for $_post['campo'] despite the fact that your &lt;form&gt; tag's method is a get request.
9830	you should instead check the value of $_get['campo'] (or $_request['campo'] ).
9831	your method is get , which won't give you what you're after if you're looking for the values in the post collection, which $_post does.
9832	just change the method on your form to method="post" to get this working correctly, otherwise use $_get on the php side, if a get is what you're actually after.
9833	for a good discussion of get vs post, take a look here: when do you use post and when do you use get?
9834	notice how you are only applying :email in your query paramaters, but your query is expecting both :email and :picture.
9835	you either need to remove picture = :picture from the $query or add ':picture' =&gt; $_post['picture'] to $query_params
9836	note: no need to check if (isset($_post['submit'])) { ... } here, because index.php send data to networkonline.php .
9837	because your array keys were not wrapped in quotes they were assumed (by the php parser) to be constants.
9838	since they are not constants, defined within your application, they are not valid array keys.
9839	however, this would only throw a notice which was why your script continued to execute.
9840	this is because your query is not getting prepared because of wrong syntax and invalid use of placeholder.
9841	this function will get the integer value out of the string.
9842	(use the equivalent functions such as floatval() if they are not integers)
9843	as fas as i can see, you can leave these be:
9844	(technically, those if's aren't necessary, but they're nice if you want a default "not set" value in the variables)
9845	i'm not sure exactly what you're trying to do, but the first php part of your question can be greatly simplified:
9847	i don't see where you create $to or $body , though, so that's a problem.
9848	this is not possible because the underlying mysql driver won't allow it:
9849	since every user has a role or type it means that the ability of viewing or editing content in your application is solidly connected to this factor.
9850	this means that the 2 basic things that your session variables should have are userid and usertype which you should also store in your database
9851	these pieces of information can be passed to $_session['user'] for example as a small array where your array key can be the userid and the usertype the value.
9852	once a user login your initial values are stored to session .
9853	in order for your application to know what usera can view or edit in your application, you basically run a comparison in your script against the usertype that usera has.
9854	but to achieve what you want you basically need to re-fetch the piece of information in the beginning of every view/page of your application.
9855	if new usertype has been assigned to usera simply show a message that he/she will log out automatically in 15 seconds (give time to read the message itself) in order for the changes to take effect.
9856	while your user sees this message you take the current session data he/she may have and save it in database, since some session variables might be (or not) available in a upgrade or downgrade of usertype .
9857	by placing the comparison of the usertype in the beginning of each view/page of your application you save yourself of the headache that a user can loose data.
9858	when your form is submitted, the &lt;select&gt; names are getting evaluated like &lt;select name="raj"&gt;, &lt;select name="kiran"&gt;, ..........&lt;select name="sameer"&gt; etc depending on the values of $name=$row1['name']; from your query on 'student' table.
9859	also you should pay consideration to the fact that your query $query2="select * from student where ssap='$ssap'"; might return more than one rows, it seems you are assuming only one row will be returned.
9860	so you can not use a variable as the key in your super global $post like this $_post[$name]; when $name is undefined on your action script.
9861	i would suggest you use an named array in your multiple &lt;select&gt; .
9862	do a var_dump($_post) on your action script.
9863	that may reveal most of the stuffs for you.
9864	i think you would need to use an extension like runkit if you wanted to redefine a class.
9865	but, you could also just give the new class some form of serial name like myclassversion56.
9866	use a factory to instantitate the class, and the factory knows the name of the most recent class because you set a variable somewhere.
9867	you could even str_replace the source code to make the serial naming automatic.
9868	there's ways to define program behavior dynamically, but at some point you start to recreate a programming language, when you're already using a dynamic one like php.
9869	but if the variations in behavior are of limited scope, consider it over dynamic code execution like what you're trying to do.
9870	since you're using php, you could use sessions to see if they have permission to be at level 2 or above.
9871	here's a quick tutorial i found to get you started if you don't know about sessions.
9872	$_files['file']['name'] the original name of the file on the client machine.
9873	upload_err_ok – value: 0; there is no error, the file uploaded withsuccess.
9874	upload_err_ini_size value: 1; the uploaded file exceeds theupload_max_filesize directive in php.ini.
9875	upload_err_form_size value: 2; the uploaded file exceeds themax_file_size directive that was specified in the html form.
9876	upload_err_partial value: 3; the uploaded file was only partiallyuploaded.
9877	upload_err_no_file value: 4; no file was uploaded.
9878	uploaded files will by default be stored in the server’s default temporary directory.
9879	variable $_files['file']['tmp_name'] will hold the info about where it is stored.
9880	the move_uploaded_file function needs to be used to store the uploaded file to the correct location
9881	ok...you also need to set up the "selected" attribute base on $_post['select_city'] on the option tag and remove the value="&lt;?php if(isset($_post['city_name'])) echo $_post['city_name']; ?&gt;" on the select tag....and like @dan revah suggested, use mysqli instead since mysql is deprecated as of php 5.5.0
9882	and then treat the data like any other form post to php (i.e.
9883	it can be you even hadn't make some operation like that: json.stringify(jsondata); may be will work something like this: $.ajax({..., data: jsondata, ...});
9884	you should try to start some traffic analyzer, for example press f12 in google chrome (tab network), or select opera dragonfly in opera, or another trafic analyzer and resolve some question:1. is request send to right script and response not an 404 error2.
9885	is received data has right format?
9886	(in google chrome on network tab, click on request for more info)
9891	read more at how can i prevent sql injection in php?
9892	that said, using mysql_* here is a way to pass the artist into your query:
9893	strip_tags() removes html from the value of a variable.
9894	the second parameter is useful if you would like to make exceptions, and leave certain tags in, like the p aragraph tag.
9895	if you want to stay away from regular expressions, you could use phpquery to handle the value, and then use jquery-style selectors and methods to get your value:
9896	i first set up an associative array for the default values.
9897	i then merge it with the $_get array using array_merge .
9898	since i mention $_get as the second parameter, it will override the values if they exist.
9899	that way, you get an associative array of parameters.
9900	if you want to use them as local variables, you can use extract .
9901	you could always just do $_server['request_uri'].
9902	'&amp;yourstuff=whateves'; i guess you could wrap that in a function if you really wanted to.
9903	the above includes everything before the file name.
9904	if you want only the get requests you can do:
9905	you can use this service, array visualizer , this will help you target and extract only what you need.
9906	just past the print_r output in it.
9907	you're trying to do everything in on big statement.
9908	why not build your imploded array-strings before you include them in the sql?
9909	you need to make use of the isset construct first.
9910	obiously the if(isset($_post["json"])) statement is not invoked, so neither of both echos is executed.the fact that the function specified in .ajax success is invoked, only tells you that the http connection to the url was successful, it does not indicate successful processing of the data.
9912	first of all you call this right at the top of your php file:
9913	to start the session, then you can set $_session variables.
9914	when the user logs in you can set (for example):
9915	sessions aren't complicated at all, but its worth looking into them.
9916	this is a very basic way of using sessions, but it isn't very secure at all.
9917	to be honest, i'm surprised you've managed to create a whole user login/authentication script without using sessions yet.
9918	for a bit more information and some examples/tutorials have a look here: http://www.w3schools.com/php/php_sessions.asp
9919	the single quotes are delimiters for the sql statement, and have nothing to do with php.
9920	they tell mysql where the value for the field starts, and where it stops.
9921	should the query restrict where field = "new order by name desc" or should it restrict where field = "new" and then order the results by the "name" field in descending order?
9922	which is valid sql and will select all users in your table (because the input from $_post['username'] has made the rest of the query commented out.
9923	however, if you properly escape values, you end up with:
9924	you're reading the result set twice.
9925	this will work for the first loop, but won't execute the second because you've already reached the end.
9926	if you need to read the results twice, use this:
9927	immediately before the second loop to set the pointer to the beginning again.
9928	you are sending the data via post and checking the $_get php variable which is empty because you are not sending via get .
9929	one possibility is to use a filter function to access the get parameter.
9930	with this approach, $page will always be set, so you won't need to worry about undefined index warnings.
9931	(if 'page' is not a key in $_get , filter_input will return null .)
9932	then, when you need to use $page later, checking it is simpler:
9934	you can use an if statement, or shorten it with a ternary.
9935	do not use the @ error suppression operator.
9936	it is a bad practice to get into, 99.99% of the time you want to see all errors in all situations.
9937	the "best way" in coding is a combination of opinion, established code style, and industry best practices.
9938	generally speaking, one should use the right functions for the job (in this case, array_key_exists or filter_input as indicated in another answer), not use error handling, suppression, or exceptions for normal code flow, and be explicit/verbose rather than trying for the shortest code.
9939	you might be able to condense something into 1 line rather than 3, but to what end?
9940	all it does is increase the specific complexity of any given part of your code, making it harder for others (and yourself!)
9941	to understand and maintain in the future.
9942	you can set the search input value with the $_post array (or $_get if you used get method).
9943	then you will have to use the standard method to do it : &lt;?php echo $search; ?&gt; rather than short one : &lt;?= $search ?&gt;
9944	by the way, if you want to be able to not keep the value :
9945	you could also use a checkbox or something ... :)
9946	i am doing the same thing as the op and ran into the same issue.
9947	some of these answers don't understand how eventsource should work.
9948	my code is identical to yours and uses a session variable to know what view the user is on which drives what data to return in the event of a server trigger.
9949	it's part of a realtime collaboration app.
9950	i simply prepended an @ to the session_start() to suppress the warnings in the log.
9951	not really a fix, but it keeps the log from filling up.
9952	alternatively, not sure how well it would work for your application, but you could use ajax to write the session variable you are monitoring to the database, then your eventsource script can monitor for a change in the db instead of having to start sessions.
9953	you need to work on the checkbox-html-code and the checkbox-array:
9954	not sure what you're trying to do with !$_get['action'] == 'reply'
9955	to solve your overall issue of wanting to update some values, without knowing which values and which conditions you want to preserve, we're reduced to simply not overwriting values with empty ones, so :
9956	and if you want to remove first name if its blank, why don't you just add it to the key => replacement array with a value of '' ?
9957	sidenote: i noticed that you are using the word key in $_get['key'] etc.
9961	filter_var is new as of php 5.2. you've run into a known bug: https://bugs.php.net/bug.php?id=49510 feel free to vote on or comment on that bug.
9962	cookies are sent from the browser to the server as part of the http request for the page, and then php puts them into the $_cookie array.
9963	that happens just before the start of the script.
9965	during the script, any changes to the cookies are invisible.
9967	use the php function in_array() to skip a certain set of properties.
9968	or use it to define keys you do not want to skip:
9969	if you open the source code of your html page, you'll see the same text, you see in django unchained.php :
9970	if you want to output to file the unquoted text, do this:
9972	( overview of the mysql php drivers > choosing an api )
9973	as much as i understand, you are trying to implement something like pagination?
9974	you should put current, previous, and next pages in the session variable, so in every request you can check whether the user is in the session['current'] page, and tries to go to the session['previous'] or the session['next'] page, also you should send a 'hiddenfield' value to the server in order to check if the user 'submitted' the page(but of course, one can simply read your html and find the 'hidden' field).
9975	or you can simply check whether the submit button's 'name' is in the post(or get)?
9976	( if($_post['name_of_submit']){} ) - but again it is simple to falsify, too.
9977	if you won't have a query string, you can explode on /.
9978	if you will have a query string, you need to remove that first, such as...
9979	if you have http:// or https:// at the front of your url, that can mess it up also.
9980	the size of $a will be 1 more than what you want.
9981	so, you need to subtract one:
9982	new problem... i just counted the file itself, such as example.com/links.html will come up as 1, not just 0. so, before the explode i need to get rid of the file name.
9983	but... how do i know if it is a file or a directory?
9984	that isn't built into the url specification.
9985	for example, example.com/test could be a file or it could be a directory (and then it automatically goes to example.com/test/index.html).
9986	you need to assume what file extensions you will have and remove those files before you explode, such as:
9987	and it should be called on every page where $_session is to be called ..otherwise session will not be properly accessible
9988	note: you can also optionally make sure certain tags do not get stripped by passing those tags as a second parameter
9989	then you can retrive it with $_get['search'] instead of $_post['search'] .
9990	this class manages file uploads for you.
9991	in short, it manages the uploaded file, and allows you to do whatever you want with the file, especially if it is an image, and as many times as you want.
9992	it is the ideal class to quickly integrate file upload in your site.
9993	if the file is an image, you can convert, resize, crop it in many ways.
9994	you can also apply filters, add borders, text, watermarks, etc... that's all you need for a gallery script for instance.
9995	supported formats are png, jpg, gif and bmp.
9996	if you are seeing an error/warning/notice in your text box, try changing:
9997	if you are actually seeing &lt;?php echo $_get["sb"]; ?&gt; inside your text box, then you are having problems running php.
9998	check that your script file name ends with .php and check php is working on your system.
9999	you need to specify your method type so in your php code you can get it using that method.
10000	if you leave out the method part it by default uses $_get .
10001	seeing as your code is pointing to $_post then you set it to method="post" .
10002	you also need to set action="" this can be set to # for same page or leave it blank or using a file name.
10003	this will redirect the form to that page.
10004	basically you want to implement a variation of array_unique that does what you want:
10005	the problem is not with "empty lines" or spaces : it is with output ; and html is output ;-)
10007	so, here, in the block at the "top" of your index.php .
10008	i'm not sure you actually need to call session_write_close ; i've probably never used that function, i believe... and, quoting the doc :
10009	the only case you might need to call this function yourself is if you are doing long calculations :
10010	but this doesn't seem to be your case, as you are calling this at the end of your script.
10011	and, about session_regenerate_id : do you really need to call this function on each page ?
10012	i suppose never calling it would be enough for your site to work... even if you might want to call it when the user logs in, for security precautions (if i remember correctly, it's nice to call this function whenever the privileges level of a user changes)
10013	same about session_id , btw : do you really need to call this function on each page ?
10014	i think it happens because you are trying to check url-encoded string.
10015	the apostrophe at this stage looks like %27 , so o'brien in $_post['name'] is o%27brien and it will not pass your regular expression.
10016	edit: also, maybe it is another type of apostrophe you have entered in the form: ’ .
10017	before trying to learn oop programming you have to learn basic oop syntax.
10018	in order to do so forget for a while about creating your own classes and learn how to use already made ones.
10019	so, first of all learn how to use mysqli.
10021	you aren't unsettling the value from the array, you are just unsetting a local variable within the loop.
10022	you can use $key=>$value to obtain a reference back to the looped array like so:
10024	to test this yourself you could output print_r($_post); once, as you'll never forget it again then.
10025	make sure you call your setcookie function before any output happens on your site.
10027	when you change the name of your cookies, you may also want to delete all cookies but preserve one:
10028	all previous answers have overlooked that the setcookie could have been used with an explicit domain.
10029	furthermore, the cookie might have been set on a higher subdomain, e.g.
10030	if you were on a foo.bar.tar.com domain, there might be a cookie set on tar.com .
10031	therefore, you want to unset cookies for all domains that might have dropped the cookie:
10032	you can have an array of possible url's and you can check the value of $_get['url'] against these values, then redirect the user accodingly.
10033	this can be a manually written array inside this php file or an array the values of which have been gathered from a database.
10034	you can also use the if/else consitions or a switch condition but that will make your code longer.
10035	it's not a bad option although it's less practical.
10039	you want to execute the php, so include it and capture the output:
10040	if you want the html to be rendered as html then don't use htmlentities() .
10041	try checking to see if the variable has been set with isset($select).
10042	in the example from your original question (that "works"), you are using get to retrieve the value regid .
10043	when you go to send the value from your code above, it is using post to send regid .
10044	using the following should work in your script:
10045	also, add this to you try statement to get the server response:
10046	this is a very bad way of doing it, but this is a cleaned up version of your deprecated code so that it should work.
10047	name1 in your original code needed to be $name1 .
10048	you also had redundant and useless if statements.
10049	the echo statements will be returned to your device as httpentity if you followed my last above tip:
10050	this will work, granted you use the correct credentials to connect to your database and you copy and paste this in correctly.
10052	you can use trim function instead of using str_replace to do that.
10053	also, very important, be sure to put the \r\n before the \n in the regex!
10054	second, make sure your form tag has said multi-part form encoding:
10056	in fact, it makes things easier later if you don't.
10058	you don't need to apply stripslashes to data after you fetch it from the database.
10059	the database has not stored the extra escaping characters -- unless you applied double-escaping by mistake.
10060	maybe you can answer the question on your own if you know what these functions are intended to be used for:
10062	you could also use prepared statements or parameterized query builder (see sql syntax for prepared statements , pdo – prepared statements und stored procedures , mysqli::prepare , et al.
10063	the result of query isn't the data itself, it's a mysql_result object.
10064	you can use its fetch_all method:
10066	well, anyway, something along those lines.
10068	assuming you have control over how $xxx is used, you may want to consider using it to hold the key in the array, instead of a reference to the element at the key.
10069	that way you wouldn't need to search the array when you wanted to unset the element.
10070	but you would have to replace all sites that use $xxx with an array dereference:
10072	this does not mean that variable content will be destroyed.
10073	however, the format that you have breaks when you have "at" in the string, and that's why we use str_replace to get rid of it.
10074	this is a minor gotcha, if 'jpg' happens to occur at the start of the string being searched.
10075	strpos will properly return 0 for the hit, but 0 evaluates to false in a standard equality test.
10076	you'll end up with (false != false).
10079	you have to use the function unset on your array.
10080	remember, your array will have odd indexes after that and you must (if you want) reindex it.
10081	first of all, if($row['name'] == $_session['name']) // instead of $row use $rec,because you used in mysql_fetch_array.
10082	you probably mean, if you submit the form but an error is on the inputs you want to keep the selected option.
10083	in the event that you are trying to remove an array element based on the key and not the value you don't need to make a loop if statement.
10084	you can just unset that key explicitly like in your example it would look as if you were trying to do:
10085	first, what loushou mentioned was correct, however, there is a little bit more to it.
10086	without the array shift, it was putting the photograph object in an array, therefore resulting in that "fatal error: call to a member function comments() on a non-object" error.
10087	once i added the array shift, it seemed to fix everything!
10088	normally the load balancer forwards the real client ip in the $_server array under a new key, in most cases $_server['http_x_forwarded_for']
10089	if you're just setting the text for a textarea, then it doesn't support nested html, and you're not going to be able to do the smilies this way.
10090	things like gmail and facebook, that do support these, have basically re-implemented rendering of the content.
10091	to correctly set the text, you want to use the innerhtml property of some particular div element to get the html correctly set.
10092	if you escape the text using htmlspecialchars before putting it in the html, then you'll see what you're seeing above.
10093	the fix is easy: don't ^_^.
10094	no, sql injections are widely misunderstood, mainly because they actually have nothing to do with sql as they are just string manipulation.
10095	you don't need to alter the data you insert into the database, you only have to alter the string you send to the database server as query (unless you do the wise choice and use prepared statements instead of escaping the query string).
10096	the data, once stored, should be in its original state.
10098	in php, change the minus sign to equal sign when setting the value from the $_post variable.
10100	so, in order to pass the value after the submission, the html code like below:
10101	if a value says object(stdclass) in a var_dump , you access its properties with the -&gt; notation.
10102	so the first step in your case is:
10103	this now is an array, so you access its keys using [..] notation.
10104	remember that print_r() 's output will be viewed in the browser.
10105	unless you take special steps to handle the html, the browser's going to see html and render it as such.
10106	unless you view the source of the page, all you'll see is the text content.
10107	as well, unless you have a special need for it, there's no reason to retrieve form submission data from php://input .
10108	that's the raw data, and most likely you'd just be parseing it anyways, which php has already done for you with the _get/_post arrays.
10109	on top of that, if the submission includes a file upload, you'll be slurping that entire file into memory, which could very well exceed your script's memory_limit and kill things right there.
10110	aren't you trying to see if the key exists at all?
10111	if so, you may want to use array_key_exists , like this:
10112	you can cast the get parameter to int, which will just use the numeric part and strip off anything else.
10113	leave a placeholder in the query where you want to substitute the dynamic value.
10114	you can use either positional parameters with the ?
10115	symbol, or named parameters with the colon-prefix syntax.
10116	pass an array of parameter values to substitute as an argument to execute().
10117	in the case of named parameters, it's an associative array.
10118	in the case of positional parameters, use a simple ordinal array.
10119	then you can fetch an associative array per row from the statement's result set:
10120	note i showed the use of extract() , which is a php builtin function that creates variables $title, $url, etc.
10121	based on the keys of the associative array $row.
10122	but i did this only to match your code; ordinarily i would just reference these fields as $row["title"] and so on.
10123	you need to use data option in your ajax request to send your id first:
10124	now you will be able to get it in php with what you are doing eg $_post['msg_id']
10125	and, as you specified by datatype: "json" , you are expecting an json object in success section, so you only need to access this object's vote attribute here:
10126	use unserialize($serializedoptions) to convert it back into an array.
10127	if you want to view it, use var_dump($unserialized)
10130	you are creating an infinite loop saying : you come on sign_up ?
10131	if $_session['user_login'] doesnt exist, go to sign_up.and it repeats over and over again.
10132	because $_session['user_login'] cant exist first time you come on sign_up.
10134	there is no reason for it to support arrays, since a single regular expression pattern can be made to match all those characters.
10135	the second parameter can also only be a string.
10136	in this specific case you can just concatenate the strings to test them all, since you are looking for individual characters:
10137	but normally you would have to iterate through the subjects and test them individually:
10138	$_server['remote_addr'] cannot be modified by the user or via http so you can trust it.
10139	and the variable itself isn't surrounded by quotes.it should be:
10140	the error suggests that select() is called on a null object.
10142	the cookie is sent before your code is running.
10143	php reads the header, fills the global variable $_cookie[] and then executes your code.
10144	so if somebody makes a request with http, he will get the cookie unencrypted.
10145	when you create the cookie, you can define, that the cookie is only sent to pages requested with https.
10146	you do this with the functions session_set_cookie_params() or setcookie() with the $secure parameter.
10147	such cookies won't be sent, if a page is requested with http.
10148	it is bad practice to use it generally, but especially on a _get variable...it opens you up to a dos attack where someone can flood your query string with hundreds of unneeded variables.
10149	in order to access your pdo object, you must make it public and access like:
10150	the best way would be to extend the pdo class.
10151	and call it when you create the constructor in the file user.php
10152	if you use '.yourdomain.ext' (note the .
10153	before your domain) the cookie will be accessible through all subdomains on your site, so www.yourdomain.ext or badger.yourdomain.ext and so on.
10154	you say that str_replace is not an option but if you pair it with replace , you can effectively ignore dashes in your comparison by removing them from both your needle and haystack
10155	keep in mind that this will prevent the db from taking advantage of any indexes you have on the name column, which may result in slow queries.
10156	ok, now echo $errormessage right below or above the form, to inform the user that the email, or username is taken.
10157	i'm pretty sure i have a duplicate function in here for the email, but this code does work; disregard if somebody says it's vulnerable to sql injection; this is a working example!
10158	if you want to do mysql real escape string, just google it.
10159	i had to rewrite a couple things because i don't want my full code on a public board, if for some odd reason this doesn't work; send me an email(canadezo121@gmail.com) and i'll send you the full page code.
10160	this code will probably raise some concerns with other more professional coders, this example gives you a good logical viewpoint of what goes on and how it works.
10161	you can adjust it to mysqli, pdo, etc as you get more familiar with php and mysql.
10162	since you are sending the data with content-type: application/json you would need to read the raw input as php does not know how to read json into their globals like _get and _post unless you have some php extension that does it.
10163	you can use the querystring library to parse a object into a name-value pair query string that you could than transmit with content-type:application/x-www-form-urlencoded so that the data will be parsed into the globals
10165	as mentioned in the comments, you're trying to access properties of $check_box_values as if it were an array, when in fact, it's a string.
10166	as a result, php will return the character at the position specified between the square brackets, as this is also a string, it tries to cast it as integer, resulting in 0 (so it's basically returning the character at position 0 in $check_box_values which is c ).
10167	also, you don't need to loop to build the string of values, you can use implode() :
10168	you can use explode to split the input on each ; , loop over the results and then split over each .
10169	if , is the delimiter that you want to split the string then try with explode in php
10170	notes: * maybe a join query instead of nested queries would be a good idea.
10171	* the data/parameters for a delete operation should not be transfered via get, but rather via post .
10172	first, you can reduce the array that comes from the database to a single value like this:
10173	if you have an older php version, it may need to be done in two statements:
10174	it looks like this could be avoided if you changed the query that produces this array to only get the selected value from the database, but i am just working with what you have here.
10175	if you need to handle multiple selections, you can just skip the array_filter and use in_array to check your selections like this:
10176	a third party could link (or submit a hidden form with js (since you are using $_post they would have to use this approach)) to your site sending whatever data they liked (including "&gt;&lt;script... ) as the user who visited their attack site.
10177	if the user enters a " in their data (either because it is a typo or because their data really does include a " character), it will break when you display it back to them.
10178	so on your advanced search page, you are looking at doing the following:
10179	the echo is actually a ternary.
10180	i believe isset() is probably the equivalent you are looking for.
10181	basically, it checks if $_post['searchtext'] is set, and either echoes the contents of that, or nothing at all.
10182	$_post and $_get are global variables, so you can get away with just checking them with isset() .
10183	however, for your own arrays, you need to check with array_key_exists('key', $array) before checking with isset($array['key']) .
10184	if it's on the same domain you can add it to a cookie, like so
10185	and then on the non wp page you have something like
10186	if you are redirecting them to another domain it's best that you put the username in the get parameters.
10187	like when you do the redirect to the new page you just add the username
10188	while vladimir gets some credit - since he pointed me to setcookie() - a major problem is the need to place setcookie before the html line in a file; not so easy in wp.
10189	one of the few places to do this in wordpress is in the functions.php file; e.g.
10190	mysql_real_escape_string() is a quick and easy way to achieve this (or, if the id is always numeric, you could just use intval() ).
10191	don't be like the school who fell for bobby tables .
10192	if you're not sure which request method was used, use the $_request superglobal, which contains both get and post variables (example: $_request['id'] ).
10193	i normally don't use $_request , since i like to be clear about where my data comes from, but this would be a perfect situation to use it.
10195	* — the ordering is configurable via the variables_order configuration directive, as stewart mentioned in the comments.
10196	you don't assign the path parameter of the cookie, so it gets the path of the page it's assigning it and results to be /login or something similar and it won't be sent to other parts of your page like /home , or simply the root.
10197	change the setcookie() like to somethig like this:
10198	this way you can set your data type in your string template.
10199	attributes are accessed using the syntax $element['attribute_name'] , so in your case, you need $row['name'] .
10200	as such, the print_r output will not give you a "real" view of the object, so should be used with care.
10201	there are a couple of alternative debug functions i've written here which give a more accurate idea of how the object will behave.
10203	here you can read about mysqli prepared statements and parameter binding http://php.net/manual/en/mysqli.quickstart.prepared-statements.php
10204	your cookie will only be accessible when you refresh the page or navigate to a new one.
10205	when your script loads, the html header fields for that page have already been set.
10206	the page will need to be rendered again (another http transaction) before your cookie is available for use.
10207	the variable $_cookie[] representates the state at the start of the script.
10208	that means that you have to wait on the next page request to see the variable.
10209	you could also add your variable manually to the global cookie variable $_cookie['user] = 'alex porter'; but the problem is that you are not sure that the browser really accepted the cookie.
10210	as alternative to michael post you can use sscanf method instead of list and explode
10211	in your case, that could e.g.
10212	looking at your page source code, it looks like you are echoing style sheets outside of the &lt;head&gt;&lt;/head&gt; tags, and before the &lt;!doctype ...&gt; tag - index page source code -
10213	it does not look like your language sessions are setting correctly.
10214	why also have 3 $_session variables?
10215	you could do it with 1 - $_session['lang'] and simplify your code -
10216	as you said, assigning the function like window.onload = displaygallery; works.
10217	when assigning it like window.onload = displaygallery('red'); , what is happening is that the function is not being attached to window.onload , but what it returns is.
10218	and the function returns nothing, so window.onload = undefined; .
10219	this also explains why nothing happens, because the function is not being called on onload, but as soon as the browser executes the script.
10220	in my experience a lot of the problems boil down to the locale settings on the server.
10221	this is just a quick hack to see if it's the case.
10222	if not, then i'd recommend at the very least putting in var_dumps along the way to check that the date is properly formatted along the way.
10223	the problem is that print_r doesn't do well at displaying the output of simplexml parsing.
10224	full credit to @josh davis and @hakre, who discuss this at this answer .
10225	and you should get the contents of the &lt;estado&gt; tag.
10226	see examples from the php manual for more ways to retrieve the content.
10227	it is because your field name is favsport[] and it give you array in php $_post["favsport"] you are doing echo $sportstr variable it will give you notice: array to string conversion thats why you have to use print_r() function to print array.
10228	use below code it might be your solution.
10229	to fix the problem in the comment below swap the fwrite peramaters around
10230	you are not creating the $hits variable that is used later in your display the first time a visit is made to a site.
10231	yes, you should be using the php function htmlspecialchars http://php.net/manual/en/function.htmlspecialchars.php
10233	there is a simple workaround to what you are doing, let's say you have 10 checkboxes.
10234	you know the names and you know the values because you created them.
10235	go to your page where you process the form submission and tell all the names to your code.
10236	then the code checks which one has a value in $_post and which one does not.
10237	but for not checked ones you will have to run a loop to match from database if its checked or not.
10238	$products is an object you first need to fetch the cart value in a variable and pass that to unserialize method, assuming you are using mysqli you can try like this
10239	you can check what is the returned value of $products by using print_r or var_dump to confirm that it is an object and not a string.
10240	i dont see the point of using unserialize since in the code you posted you haven't use serialize .
10241	means that you should have used serialize before using unserialize to convert it back in a php value.
10242	simply change the name of your multiple select list from train_name to train_name[] as follows:
10243	by using print_r($user); you should see to what public-profile-url and others are mapped to.
10244	your example code is a little confusing, as you are simply overwriting $query and only running a single query.
10245	i think you approach to using pdo prepared statements is largely correct, however i would point out that you may consider using different variable names for the statment object if you need to work with them both simultaneously.
10246	there is not a single problem with having multiple queries prepared.
10247	while speaking of getting results from a prepared query, there is indeed a problem caused by the result buffering.
10248	in order to be able to execute another query, you have to call store_result()/get_result() right after execute.
10249	to get errors you have to ask php for them .
10250	there is absolutely no point in making three queries, you have to make just one.
10251	if you have a trouble making one, ask another question marking it with mysql tag and bringing your 3 queries along.
10252	even for multiple queries it's just wrong idea to do multiple fetches in a single loop.
10253	fetch your query results one by one.
10254	your mysqli syntax even for a single query is incomplete.
10255	you need to re-read your tutorial and practice on a single query first.
10256	i know it's complicated but should do the job you want.
10257	it does not look like you need to be using regular expressions.
10258	here's an example using explode() and list() :
10259	the problem is apparently that with ajax you are not going to be sent to another php page, so i couldn't see the echo $_post['work_id']; .
10260	but now it works, it was the data problem…
10261	since you're expecting multiple rows you need to loop them using while:
10262	its simple to use mysqli just try the following once
10263	the answer is that you can't.
10264	at least not without some additional web server configuration.
10265	typically to achieve "clean url's" like this in php, there is a url rewrite that is performed in the webserver ( mod_rewrite for example on apache).
10266	what this does is silently redirect requests for
10267	from php, you can consult the $_server['request_uri"] value, and apply some text transformation (substrings, regexp) if needed, but in your case using the value directly should work.
10268	if this is a mysqli api, then you'll need multiple invocations of fetch_assoc() in order to get those multiple rows.
10269	you have only invoked -&gt;fetch_assoc() once:
10271	ok, try to do it has to do with the top that says if (isset($_post['submit'])) try and give it a default value if it isn't set.
10272	(isset($_post['submit']))) i'm referrin to the $customoptions variable $primarycolor and $adminbg
10273	you can check this code i used it yesterday.
10274	you just have to change the name of sql part according to your goal
10275	also what i give you is jquery ui you have to add
10276	$_post[68] and $_post[28] will return the values you need.
10277	you should use alpha keys (country_code) instead.
10278	if for some reason those numeric ids in your database change, you'll run into trouble maintaining your code.
10279	html also requires you to use unique element ids for a document to be valid.
10281	so you create a function that returns true or false, and test each element of the array against it.
10282	your function will always return true, since every array has a first element in it, so the array is unchanged.
10285	therefore, if the file was created on windows and you run your code on linux, it could try to find linux's end-of-line and fail to explode the file correctly and vice-versa.
10286	the index is_ajax does not exist in the array $_request .
10287	your logic is wrong, you are setting a variable and getting a warning and after that you are using isset to check if the variable you just set, is set.
10288	check the size to see if there is actually a file:
10289	if you do a var_dump($_files); you will get a better understanding of the data you're receiving.
10291	the reason i've come to that conclusion is that i uploaded your code to my own website.
10292	if you are the owner of salesgenie.com then i think you have a problem with the server, since sometimes the responses i got was either a timeout (code 0), code 200 (with result) or code 320. so the problem might be a problem within the server itself.
10293	try removing the setcookie to spare some processing.
10294	also try using http instead of https since https requires some more processing to use.
10296	as for your solution to storing database information into a user's session, you can use a couple of functions that i wrote up for just that very reason.
10297	note : these use the unsupported mysql_* functions, and should not be copy/pasted without updating to a supported alternative like mysqli_*.
10299	on a side note, in fact the general rules of thumb is that, you shouldn't alter user input at all.
10300	you should store whatever user input as it is, into your database, so that you can retain user input as original as possible, and only escape it when you need to display or use it.
10301	in your case, yes you are right you have to prevent it from being injected, but you are altering the original input by adding slashes into the original input, which is not very favoured.
10302	what if my title contains a string like this &lt;my 21st birthday party!&gt; and you stripped it away?
10303	try using prepared statements instead so you can insert any data into your database, without the worries of injection.
10304	and only when you need the data to be displayed on a html page or console, you escape them accordingly such as htmlentities .
10307	you should learn either one that suits.
10308	with your existing setup of mysql extension the best approach to follow is at least passing the strings through mysql_real_escape_string .
10309	if you can move to mysqli or pdo based setup that would be ideal.
10310	the reason your script is dying is because you have a large number of variables, and each of them likely have many child objects (possibly even recursively).
10312	so for those who have a problem with $_server['php_auth_user'] they first need to check their serverapi from phpinfo(); if it is cgi there is no way to use $_server['php_auth_user'] you need to recompile php.
10313	are you sure that your variable $username in your query is what you expect it to be?
10314	your select could be returning 0 rows.
10315	you are using $username twice in your code.
10316	try this in a .htaccess file in the root of the site
10317	as a side note, the $mysqli-&gt;query code you posted is vulnerable to sql injection because it doesn't call addslashes or mysql_real_escape_string on $_get['id'] .
10318	you have form with method=post and in php you are using $_get .
10319	first of all, $_get does not include the values of posted form parameters.
10321	second, $query is not valid sql.
10323	also, the column names have to match the rest of your code if you use the mysql_assoc option:
10326	you may be using your html form and php/sql inside the same file too which will cause empty values to be inserted in your database as soon as the page is loaded.
10327	you also need to remove these as there is no point to using them:
10328	from then on, your attempted solution seems to rely in converting that array into a query string you will pass with a get request to another page.
10329	for that matter, you can implode the array using &amp; as the glue.
10330	however you also said that you need to convert array items into variables.
10331	for that purpose, you can create a new array in the form
10332	note that i'm validating the size of the $keyvalue array, because some not every value will have the name=value pattern.
10333	since each $subarray represents a different user, you need to store the parsed key/value pair in a subarray too.
10334	this assumes your $user matches the user_id you need to set.
10335	otherwise, you'll have to go a bit backwards to where you give form to the $myarray variable.
10336	i'm afraid you'll need to, because your example starts with zero and i bet your user_id doesn't.
10337	to answer your question, you need to have slashes around your pattern
10338	also, asterisk means none or more, so even if you had no text, you it would still match it.
10339	the same would hold true for explode (but you can see if there was an empty string in the last element and return that as false).
10340	i am the author of the seostats package and highly recommend to not use the reference on code.google.com.
10341	as stated on the project's start page, you should use the github pages instead.
10342	my 2nd recommendation is that you should use the dev branch code (which is actually stable - but not yet declared as such): https://github.com/eyecatchup/seostats/tree/dev
10343	this is at least, what your question suggests.
10344	and if that is the case, you should better start here: http://php.net/manual/en/reserved.variables.get.php to understand the example codes of seostats.
10345	number array serialization is very easy.
10346	use join(',', $board) to form a comma-separated id string, use explode(',', $_get["board"]) to get the array back.
10347	i would just do a manual loop and output to a new variable.you cant use array_map or array_walk to change the structure of an array.
10348	there are a couple potential "gotcha"s in the solution for your case.
10349	since your two arrays might not have equal size, you will have to use array_search() inside a loop.
10350	also, though it seems unlikely for your case, i would like to mention that if $dictionary has the keys: "0" or 0 then array_search() 's return value must be strictly checked for false .
10351	here is the method that i recommend:
10352	as far as i know, mysql server does not have any charset command either.
10353	you specify the charset with set names , which is a short-cut to set several related variables (all of which can be set with the set command anyway).
10354	you're probably confused with the command of the official command-line client:
10355	since you are using php, not the command-line client, it doesn't exist.
10356	of course, the mysqli way to set the encoding is mysqli::set_charset() .
10357	note: i use stdclass here, so everbody can see directly what it will become in json (an object too) and should not used with index keys.
10358	print_r(json_encode([1,'foo'=&gt;'sadsd'])); will become {"0":1,"foo":"sadsd"} , what isnt that nice.
10359	you need to learn how to read php and mysqli errors you need to learn how to use mysqli properly you don't heed this function at all
10360	how to get mysqli error in different environments?
10361	for the first and how can i prevent sql injection in php?
10362	for the second just fetch your data and use it as a flag for the last
10363	firstly, $_post['image'] suggests that we are dealing with files and if so, your form requires a valid enctype, a post method, plus you would need to use $_files rather than $_post if that is the case.
10364	if your form and php/mysql are inside the same file, you will need to use isset() or !empty() for your variables.
10365	you may be getting undefined index notices, but they're not being displayed.
10366	what you also need to do is to have a primary key; that usually fixes things.
10367	plus, you are also using the mysql reserved word timestamp , and it should be wrapped in ticks.
10370	i guess you want to access mysql database installed on different computers on same network as your computer and also on some remote server.
10371	what you need is ip addresses of all the computers on which the mysql server is installed including the remote server.
10372	and on each such computer mysql server remote access should be enabled for your computer's ip address and mysql user you are using in 'new mysqli_connect()'.
10396	right now you seem to be mixing object-oriented and procedural approaches.
10397	if you want to use object-orented approach, mysqli object should be instantiated as follows:
10398	if you want to use procedural approach, mysqli connection resource should be created as follows:
10399	please update your code to use pdo.
10401	you can use just a link with get variables instead of a form.
10402	here's an example for your case:
10403	as mentioned in comments (and the error message), you cannot pass the result of an expression to isset.
10404	you can use multiple isset calls, or reverse the logic of your if/else block and pass multiple parameters to isset, which i think is the cleanest solution:
10405	you can clean this up a little further by setting the default value first, thus avoiding the need for an else section:
10406	you can iterate through the lines, and then use explode() to separate the line by a delimiter (comma, in this case), and store the values in variables.
10407	once that's done, you can simply use if statements with your logic to compare them and do whatever you want with it.
10408	if you want to use foreach loop, you have to use a new array to store the results.
10409	this possibility has already been covered by jszobody’s answer .
10410	there are a few solutions here.
10412	another is to use your $x variable, instead of $index in bindvalue :
10413	you'll have to ask the developer who wrote it.
10414	the $_session array stores everything you throw at it.
10415	you use it like any other php array and it will be stored for following page loads.
10417	yes, you can mix as you wish.
10418	"arrays" in php are actually hash maps, and each element may be any other php datastructure (including other arrays/hashmaps).
10419	so it's not really a multidimensional array, it's a hashmap storing other hashmaps.
10420	well let's say you have a bunch of possible messages, not just alogin error.
10421	then you would want an array of messages to iteratethrough.
10424	i don'tknow of any pre-defined variables, although i don't see why you'dreally need them.
10425	can you clarify this question a little more?
10426	$_session is a dictionary, not an array.
10427	while the syntax may look similar, you can insert as many things you want in a dictionary without having to redeclare it.
10428	$_session has a another dictionary variable stored in its 'msg' slot, so when you access $_session['msg'] it returns another dictionary, which you can then add a 'login-err' slot in which points to implode('&lt;br /&gt;',$err); .
10429	i guess whoever wrote the code wanted to organize all the messages together as one slot in the $_session dictionary.
10430	if you look at the documentation for strip_tags , it shows that the second parameter is "allowed tags", so an example of how to allow br, p and strong is like so:
10431	try using $getitem-&gt;closecursor() before each recursive call to pullitem or else you will have a multitude of unfetched rows from the prepared results.
10432	if you still need to fetch items from $getitem , you should instead populate them into an array using fetchall rather than burdening pdo with a multitude of unfetched results.
10433	you should be aware of memory limits at that point, however.
10435	note : you should not rely on $_server['http_referer'] for the back value.
10436	i'm not sure how you manage your app, but a success should go to a success page, unless you explicitly set a forward url.
10438	this means you can iterate it directly:
10439	i think the $subject of your str_replace should be $time, otherwise you're doing a search and replace on the string 'august'
10440	however, you probably want to use empty() instead of isset() .
10441	if a variable exists and contains an empty string, isset() will still return true, which probably isn't what you want.
10443	try moving all echo lines somewhere below the setcookie call.
10444	you could do something like this:
10445	setting all the parameters in the setcookie function fixed it.
10446	add extra fields for the text and fileupload use php pick up all the submitted data use sql statements to insert the data
10455	update: now that your code is posted; you need to modify the code so that it will insert the file name in the database.
10456	that is not a difficult change.
10457	to handle the text fields, there are a few ways.
10458	you could make sure that they are numbered starting with text0 .
10459	then, looping to go through the files, you can obtain the corresponding text field with $_post['text'.$i] ( $i being the loop counter).
10460	alternatively, you could build up an array of text values first, then process text values and file uploads together.
10461	however, mysql maintains the state of the database connection, which won't survive the process.
10462	each new page requires a new connection to be built, so you can't store a mysql connection in $_session .
10463	your solution is to store the database connection parameters and recreate the connection at the top of every page.
10464	you shouldn't use $model-&gt;attributes=$_post['users'] after a manual attribution, your field might be re-attributed if they are in the model rules.
10465	note that you can use $model-&gt;save(false) to override the model validation.
10466	i think that your check if there is a _post value is wrong.
10467	you need to give the submit button a name, if that's what you're using to check if the form is submitted...
10468	or if you dont want to change the submit button, you can check isset on the category input instead
10469	the problem is that php does not automatically know that you want to compare to strtolower(substr($file, -3)) in each "or" section.
10470	you need to explicitly state this:
10471	the way you tried it does not work because the comparison operator == is a binary operator and expects two operands, i.e.
10472	the same applies to the logical or operator that is also a binary operator, i.e.
10473	that means you would need to write something like this:
10474	here $ext is just used to avoid repeated call of strtolower(substr($file, -3)) .
10475	in this case each binary operator has two operands:
10476	so this is how you would have to write it.
10478	if you want to compare using || , here's the syntax:
10480	one last thing, if you have simple strings like those, ones who you don't want php to expand variables and stuff inside, use single qutations instead of doubles , that is a good practice and saves some execution time (of course barely noticed with a string or two, but it's a good practice on the long range).
10481	one solution would be to explode those strings by comma and verify if the resulted arrays intersection count is the same as your search:
10482	also, we increment $cntneeded variable if value if found.
10483	at the end of foreach loop compare value of $cntneeded &amp; $arrneeded are same then all values are found into $mainstring else not.
10484	i think you just need to loop in your exploded array and then replace - with :
10485	yes, you do have to worry about sql injection attacks.
10491	instead of using preg_split, i needed to use explode and convert the comma delimited string to an array of id's that could be passed to the where in clause.
10492	you have a problem with reading the contents of the file and transfer back.
10493	it looks like the content of file is not placed in a database field.
10494	check lenght of this field, the content can be very long (mediumtext or longtext).also you need to check the type of uploading file, you can do it by function "mime_content_type".
10495	and if user will upload gif.
10496	or .png file header("content-type: image/jpeg") would set wrong information, you can use more versatile header header("content-type: image/*").and use for the live sites pdo or other orm, because your method have many vulnerabilities.
10497	if removing specific values from get is what you want, use is my little beast (this code allows you to do something before removing):
10498	all theses tests seem to work as expected.
10499	if you see any mistakes, let me know, please.
10500	the condition you are testing for to see if the form has been submitted is no longer true.
10501	additionally, your button has no value attribute, you'll need to add one (since otherwise $_post['submit'] still isn't true)
10502	you should also add some content to the button so that people know what it does.
10503	if you want to use a button instead of input type submit replace $_post["submit"] with your button name $_post["wizard-submit"] .
10504	then if you want your form be single page, change the form file extension to php and include your form process code in it.
10505	you shouldn't use anything to load non-lowercase urls because of the duplicate content, and that's a good thing you're doing.
10506	the wrong urls should fail automatically in such cases.
10507	however, since you didn't show how are you making those calls, then only thing i can suggest at this point is to check if the called method exists (case-sensitive), and if not, throw/redirect to a 404 page ( header($_server["server_protocol"]."
10508	after all the chat in the comments, seems like file_exists is not case-sensitive in your case, which is really weird.
10509	hopefully someone will be able to figure it out so i can delete this (keeping it because of the info in the comments).
10510	then from there you can implode those arrays if you need them as strings.
10511	you can also achieve it by using preg_match in cases when your image name contain other characters like extra - or numbers, here is example:
10512	the key in the $_post superglobal will not be the " type " attribute of the input of the form, but it's " name " attribute -- or something based on its name, depending on the input's type (for an image input, there should be image_x and image_y , if i remember correctly) .
10513	to get a dump of what is posted, you can use, for instance :
10514	this will show you which variables you can use on the php side.
10515	this has the added bonus of still working just fine if the user hits the back button and resubmits an earlier part of the form (it will overwrite the previously saved values)
10516	you have a syntax error in your query which causes you to not have a valid mysqli statement object.
10517	should be (you don't need the quotes around your parameter)
10519	echoing php into a script is considered bad practice...but if you really can't avoid it, and think of a better way to do it...then here you go....
10520	it was because you have to open the php tags and echo those str_replaces...
10521	either you need to check every time they load a page, or possibly look at an ajax call at set intervals to check their status from the db.
10523	this will destroy their entire session.
10525	ajax calls in an interval will put extra load on server.
10526	if you want real-time response to your actions(e.g.
10527	the user will be signed out right when you ban them from your system backend), then you should look into something like server push .
10528	the idea is to keep a tunnel open from server to browser whenever a user is browsing your website, so that you can communicate with them from server-side too.
10529	if you want them to be banned, push a logout request and the process that in your page(i.e.
10530	also, in your server-side, you'll better decode the input $_post['data'] with json_decode() (see documentaion )
10531	i think problem with your code is in the line where you set data: '{....}' .
10532	it should be in json format in order to be passed properly (though it also could be in string format but you'll need to parse it on the server side)
10533	if you need it accessible on the same page, use sessions instead, or do a redirect to the same url after the setcookie call.
10534	cookies do not work that way.
10535	when a cookie is set, it is not available (i.e.
10536	a corresponding $_cookie key exists) until the next request.
10538	below i have created a blank array.
10539	to add values in an array, you use the array_push method.
10540	you have to use delimiters when you are using the perl compatible regular expressions (pcre) functions in php (to which preg_match() belongs).
10541	the reason for using delimiters is that you can add pattern modifiers after the last delimiter, e.g.
10542	in your case, php thinks the brackets () are your delimiters (yes, opening and closing brackets are valid delimiters, see the documentation ) and ?&lt;=open urn: is your pattern .
10543	then it encounters [ and treats it as pattern modifier , but it is not a valid one.
10544	there are a lot examples in the documentation of preg_match()
10545	the only thing i found regarding regular expressions in python is, that perl syntax is used but i don't know if the full syntax is supported.
10546	as already mentioned, php uses pcre.
10547	description of the differences between pcre and perl regex.
10548	by looking at your json i think json_decode($_post['data'], true); will return array of array, so you should use:
10549	also you can print your $info object using print_r($info); and see the output of json_decode($_post['data'], true);
10550	if you are having trouble getting non-ascii characters into the database, that's a different problem which you should solve first instead of going for unsustainable workarounds like storing html-encoded data.
10551	there are a number of posts here all about getting php and databases to talk proper utf-8, but the main thing is to make sure your html output pages themselves are correctly served as utf-8 using the content-type header/meta.
10552	then check your mysql connection is set to utf-8, eg using mysql_set_charset() .
10553	as long as you do this you are not vulnerable to sql injection.
10554	you might be vulnerabile to html-injection (causing xss) if you are html-escaping at the database end instead of the template output end.
10555	because any string that hasn't gone through the database (eg.
10556	fetched directly from $_get ) won't have been html-escaped.
10557	in the code you shown, this is the check login step in login process.
10558	in login process, there is two step we need to do:
10559	you can write apostrophe ( ' ) or double quote ( " ) to save string variables.more informations here: http://php.net/manual/de/reserved.variables.session.php
10560	most likely you need to strip off the padding from your decrypted data.
10561	there are 124 visible characters in your string but var_dump reports 144. which means 20 characters of padding needs to be removed (a series of "\0" bytes at the end of your string).
10562	probably that's 4 "\0" bytes at the end of a block + an empty 16-bytes block (to mark the end of the data).
10563	you need to add this to trim the zero bytes at the end of the string:
10564	in that case, comparing the beginning portion of that value to the www.example.com address where you expect visitors to originate with pre-filled-out signup information, would be the best way to go.
10565	if you don't know if it sounds right, you'll have a hard time implementing it.
10566	it's inside the variable $_server['http_referer'] , but you don't need a mysql_real_escape string around that just to check if the user comes from a particular site.
10567	note that the referer is basically "user-defined", so you can neither rely on it nor trust it.
10568	if they have to fill out a form anyway just add a &lt;input type="hidden" .. .
10569	note that this can be faked too.
10570	add a get parameter and check it with if( isset($_get['ref']) ) the form would look like this &lt;form action="http://yoursite/register.php?ref" method="post"&gt; .
10572	so if you have a textbox with a name of "age" and a user submits it with a value of "20" you will see this url:
10573	this value will be accessible using $_get['age'] in php.
10574	to pass this value to mysql you then would incorporate the value into the query, but only after doing some basic security and sanitizing !
10575	you so don't want to have this code on your server.
10576	in your loop, you assign the return value from str_replace() to this variable.
10577	after that, you cannot expect it to contain the original template upon a next iteration.
10578	you'll have to use a temporary variable for this:
10579	if it's just a matter of seeing if the checkbox is checked or not, just use isset() and don't worry about checking the value.
10580	instead of immediately returning the key, collect all matching keys into an array and return this array at the end of the function.
10581	this should return an array of all the found keys.
10582	even though you did enter your own answer as i mentioned in comments that you could, am submitting the following in order to show where the mistake was made from your posted code.
10583	here is a mysqli method which you should have used, and passing db connection to your query.
10584	$row[0] should be an int type in order to get proper results.
10585	str_replace can take array arguments as well, so you can do this:
10586	try with this, $page is assigning after this, so you need to either assign first or user $_get['page'] .
10587	now our data is safe, we're only allowing columns that we have predetermined should be available, so there is no chance of sql injection.
10588	now we can implode the array on ", " and we'll have a proper list of column names the user wants to see.
10589	the only way to get that print_r() output is with an empty string as key [''] , so you need to find where you do that and fix it.
10594	since php 5.4 it is removed from the language .
10595	especially, when writing new scripts you should avoid this abandoned feature.
10596	instead of the general-use text manipulating function addslashes you should use the escaping function matching your database system.
10597	in this case it is mysqli_real_escape_string .as pdf files contain binary data and no text, you shouldn't add and remove slashes on saving and after reading (text processing).
10598	just escape the binary content blob using the adequate mysql function when inserting the data into the database.a suitable column type for entire files is mediumblob .
10599	it allows a data length of up to ~16 mb.
10600	after having talked about the php side, a few more hints concerning mysql.
10601	mysql limits the length of data packets being sent to it.
10602	if you use a shared hosting platform (and no dedicated server), chances are high of being limited to only 1 mb.
10603	the relevant configuration option is max_allowed_packet .
10604	this setting will limit the ability to store documents in the database.
10605	see this thread for ideas on how to resolve this problem.
10606	you are not sending json to the server, just a normal query string (both before and after the edit), nor are you processing json on the server side; you access your variables via the super-global $_request .
10607	now you don't have to parse the json manually in your success handler.
10608	use fetch as you may guess it fetches the next row from a result setthe fetch_style parameter determines how pdo returns the row, in your case fetch_assoc would be a good one since it returns an array indexed by column name as returned in your result set.
10609	you read $_session['clientnamefour'] but never write to it... i think you're confusing $_session with $_post .
10610	if you used $_post instead, $_post['clientnamefour'] would be the value of the &lt;select&gt; as the &lt;select&gt; has a name attribute of 'clientnamefour'.
10611	the issue you are experiencing at work is probably caused by the persistent connect frature, which is not however specific for pdo, but available for all the drivers via mysql api.
10612	its the only purpose to keep the connection opened, regardless of the lifetime of the script.
10613	however, one have not to be mistaken on the nature of the feature: from the script point of view it's always brand new connection.
10614	in your example $p is your query.
10615	the query is an array of the result items.
10616	when you want to access the property teamname you therefore need to access the item and not the query as a whole.
10617	but because it could be the case that there was not a single player in one team, a much cleaner solution would be to start a whole new query just for the teamname.
10618	furthermore it would be helpful to see the exception that came up in your example.
10619	so $p is your pdo statement.
10620	you just need to fetch all rows at once:
10621	so, just as the error message says, $currentname is not an object.
10622	it's the string you're looking for.
10623	you don't need to do -&gt;name on it, you can just use it as is.
10624	in your while loop each iteration overwrite $_session['session_patientid'] and $_session['session_patientname'] , only the last value will be saved.
10625	pass the patientid and patientname in url , then in your second page you can use $_get to get the id and name of the patient.
10628	so just use urlencode($_post['itemwanted']) instead of $_post['itemwanted'] and any spaces the user entered will be converted to + for when you create $url .
10629	$_post['myform'] will never be present, only $_post['id'] will be.
10630	unless you defined $id that we can't see, that will be null so use $_post['id'] instead.
10631	probably just a typo in the question but the string with the query is not closed.
10632	in the form html you use &lt;?php echo $id; ?&gt; , so again you need to verify that $id holds some data and is not null/undefined.
10634	and even if you do unset it, you still have references to the values that it contained in $this-&gt;id and $this-&gt;name , so their memory won't be reclaimed.
10635	the only memory you'll reclaim is the tiny array object that points to them.
10636	php doesn't make copies when you do assignments.
10637	strings and numbers are immutable, so there's no need to copy them.
10638	and arrays use copy-on-write technology, so it only copies them later if the old reference still exists and you then modify the copy.
10639	it looks like you should either use [$loopcounter] or [] , but not both.
10640	you also should drop the quotes.
10641	they're unnecessary and in the case of "$myrow[3]" they interfere with the variable interpolation.
10643	these will display arrays within arrays while a simple echo will not.
10644	i assume you don't want to have the $rowdata[] parts written in the query, but the actual value of that array-entry?
10645	so, you should simple nest your loops, like so.
10646	remember, you are looping every field, which means, you dont need to do any implode on the data.
10647	i assume that your data sets are inside the array $data and $field_names is just a list of fieldnames.
10648	you have to create two separated connections for that.but you can also change that class to use pdo or find another one.
10649	the efficient way is to program against interfaces .
10650	the zebra_mptt library should define an interface for the database adapter it uses so that you can replace it with one that is re-using your database connection.
10651	as it currently doesn't, you would need to refactor it, encapsulate the database interaction calls into the standard database connection object for that library, then extract the interface of that connection object and then create your pdo variant and inject it instead.
10652	i just took a brief look, the class is rather straight forward so this should be merely straight forward.
10653	all it does is firering some sql queries and in the very beginning checking if the database is online which you can easily map and defer.
10654	in case you don't want to do that, you can take a pre-existing wrapper for the mysql_* interface, either replace the prefix in the existing library or just disable the mysql extension and then let it create the functions based on pdo.
10656	use htmlspecialchars() instead of htmlentities() if this is all you are worried about.
10657	if you have encoding mismatches between the representation of your data and the encoding of your xml document, htmlentities() may serve to work around/cover them up (it will bloat your xml size in doing so).
10658	i believe it's better to get your encodings consistent and just use htmlspecialchars() .
10659	also, be aware that if you pump the return value of htmlspecialchars() inside xml attributes delimited with single quotes, you will need to pass the ent_quotes flag as well so that any single quotes in your source string are properly encoded as well.
10660	i suggest doing this anyway, as it makes your code immune to bugs resulting from someone using single quotes for xml attributes in the future.
10661	htmlentities() will convert a number of non-ansi characters (i assume this is what you mean by utf-8 data) to entities (which are represented with just ansi characters).
10662	however, it cannot do so for any characters which do not have a corresponding entity, and so cannot guarantee that its return value consists only of ansi characters.
10663	that's why i 'm suggesting to not use it.
10664	only 3 or 4 characters need to be escaped in a string of xml content: &gt; , &lt; , &amp; , and optional " .
10665	please read http://www.w3.org/tr/rec-xml/ "2.4 character data and markup" and "4.6 predefined entities".
10666	then you can use ' htmlentities '
10668	you will need to change your code to something like this:
10669	more information about try &amp; catch and how to work with exceptions can be found in the php documentation .
10671	nb : you need to check if the username does not exist before inserting it.
10672	they have error_reporting turned down, which is nice because it means you can do things like
10673	you can add the accepted tags to strip_tags as second parameter
10674	if you want to send email on $_post['mail'] then use following.
10675	the issue wasn't with the variables themselves, as they were echoing out correctly in every loop i attempted the check with.
10676	the issue was actually with the strpos .
10677	as you can see, i've inserted the strpos within the loop itself and it works like a peach.
10678	maybe not the most elegant solution.
10679	however unfortunately the search was not working for us, as implode() was not able to split the strings for our japanese customers.
10680	as per your array, i think there is no need to use array_search() , you can also concatenate the $key with product value as:
10681	as you can see, there is no id value (or any other value).
10682	that would look something like this instead:
10683	now, the page you're currently viewing may have that value in the url you previously requested .
10684	but the server-side code isn't looking at your screen or interacting with your web browser.
10685	all it knows is the request that you send it.
10686	and that request doesn't contain that value.
10687	you can, when loading the page, put that value on the request.
10688	in index.php read the $_get['id'] value and output it to the javascript code which is making that ajax request.
10689	technically it could be something as simple as this, just to demonstrate:
10690	however , be aware of the dangers of outputting raw user input to the page.
10691	this results in things like xss vulnerabilities .
10692	be mindful of what you're outputting to the page, but ultimately you need to output that value somewhere in order for that javascript code to send it to the next (ajax) request.
10693	(or, alternatively, you could store the file server-side in session state or something similar.
10694	thereby removing the url from the equation entirely.
10695	there are pros and cons either way.)
10696	in short, you need to include the value on the url being requested if the page at that url is going to read the value.
10697	the code can only read values which are there.
10699	these functions are marked as deprecated and will be removed in the next major php release.
10700	so if $_post['cbox'] is an array, you must handle it as an array.
10701	just have a look at the php manual for pdo or the mysqli extension.
10702	you stored the element of your array inside another array while looping.
10704	you won't be able to do unset only certain values in an array.
10705	rather, just save the values of those variables, unset the entire array and then reset the values.
10707	i believe there is a different pdo for php 5.on my system (centos 6) i have php70u-pdo.i686 .
10708	i checked by using yum list installed |grep pdo .
10709	i can't guide you to install on osx, i suspect you need to use brew , but check to see if you can install pdo for php7 and enable it in your php.ini file.
10710	$_post['q'] is an array, so your $query8 will fail as you use:
10711	edit: by the way, you always need to prepare your data for use in a database.
10712	i prefer prepared statements / pdo but if you use regular mysql you need to escape your variables before you insert them using something like mysql_real_escape_string .
10713	always use $var = mysql_real_escape_string($_post['var'') ; always surround your $vars used for values in a query with ' single quotes.
10714	if you use dynamic database, table or fieldnames mysql_real_escape_string will not work nor will any other escape function.
10715	you will need to check all table names and field names against a list of pre-approved table and field names.
10716	if you must use dynamic field and/or column names, escape them with ```; this is not for security but to prevent syntax errors in your query when using reserved words or numbers as column/table names.
10717	see this question for more details: how to prevent sql injection with dynamic tablenames?
10718	in your loop you need to add a counter to identify whether you're currently on an 'even' or an 'odd' iteration, and then add either class 'odd' or 'even' into the as you output it.
10719	the other parts should be fairly easy by using if statements to check if the relevant data exists or not.
10720	for example, strlen will tell you whether a variable has length or not (to put out 'gradex'), and strpos will allow you to check if a varibale contains a string (for 'gradec').
10721	easiest way i have found to do this using a httpurlconnection is via putting the additional info directly onto the url.
10722	once you append these arguments onto your url, you can access them via $_get['name1'] and $_get['name2'] etc.
10723	then to construct your query string, you can use implode which will "glue" together the variables with &amp;
10724	it is because you didnt unset it, but you told it to be [empty string]
10725	you are setting the session variable as a empty string.
10726	you should use unset() to unset the variable.
10727	you can get the last inserted id by using this: pdo::lastinsertid();
10728	i think you are currently return the array from fetchall , which i don't think includes the id: http://php.net/manual/en/pdostatement.fetchall.php
10729	it's not really replacing anything in the html, it's just echoing the return value of str_replace("%body%", "khanqah", "&lt;body id='%body%'&gt;") which happens to be the string &lt;body id="khanqah"&gt; .
10730	you can only replace the html's body element with php if you are outputting the html with php (changing it before outputting it).
10732	you can use javascript, which works client-side, to do this.
10736	for integers and floats you should use intval() and floatval() for the same reason.
10737	lastly, you should also length cut a string to the text length of the string field, in php use substr() .
10738	this prevents an error if the string length is longer than the field allows (some older browsers don't support lengthcut).
10741	you just need to replace $_session['user_id'] with the user id you are storing while user gets logged in.
10743	you can't rely on getting substrings in fixed positions and lengths like in your code as they will change each time.
10744	without using any api or ai, the best you can do is create an array with road types (and their abbreviations) and check if any of that words is in the string.
10745	for that you can use strpos for each word or regular expressions matching.
10746	then you can remove that word from the string, and get the position of the first space using strpos again.
10747	then use that position to get the substring before the space (street number) and the substring after the space (street name).
10748	you need to use the $_session variable.
10749	it allows you to pass data between pages.
10750	then on any other page you can call it by using:
10752	otherwise you will cause a headers error.
10753	on your login page, add this code at the top of the page :
10755	for more persistant, "long-lived" variables use $_cookie variables or store values in db and access the variables from there.
10756	do not forget to reopen session_start after calling "file_get_contents" if you want to use sessions after that calling.
10760	2) your php file is simply echo 'ing a string, images/someimagename.jpg ; this is not what an image file is, you need to output the contents of this filename string.
10761	3) your current sql is prone to sql injection and is currently extremely insecure.
10762	your database can be easily corrupted/abused by nefarious web page visitors.
10763	4) your mysqli_fetch_array needs to be assigned to a variable for the values in the array to be used.
10764	if you do not have the php exif extension enabled there are various other (possibly more verbose) ways of ouputting the image type using fileinfo or mime_content_type .
10765	yes, it seems to be correct.
10767	i prefer a simplistic approach described here .
10768	this should be considered valid for security purposes.
10769	although make sure you get it from $_server['remote_addr'] , any other http header can be spoofed.
10770	$number is not automatically set to the value the &lt;input&gt; field has.
10771	(it was in early versions of php).
10772	you now have to use $_post['number'] and $_post['num'] for this.
10773	register_globals in your php.ini is probably off (and that's a good thing) and therefore you can only access those variables through $_post['num'] and $_post['number'] (you can just assign $number=$_post['number'] at the beggining of your script)
10775	you're wide open to sql injection, as i stated before.
10776	i think you want to use a comma instead of the and :
10778	learn to do it right, just from the beginning.
10780	here's a function that will recursively perform an "asymmetric" slicing of an array of n length:
10782	so, for each recursion, we want to:
10783	slice out the element(s) that we want to $keep create a $tail - this is a subset of the array that excludes the elements that we both want to ignore and keep in the current scope ( $exclude + $include ).
10784	if the $tail is not empty, create a new level of recursion.
10785	otherwise stop recursion and merge all current $keep elements with the result of the next level of recursion.
10786	if you are using php version 5.5 or above, this is also a good use case for a generator .
10787	so, you would not have to pre-create an array of sequential values:
10788	or use iterator_to_array() to generate the whole range as an array:
10791	if you want to make use of checkboxes, you may exchange
10792	assuming that you have a sub called mysub , later on you may check if the this sub selected by $_post['mysub'] .
10793	if your subs are not uniquely named, but you want to use the genre's id instead, i would recommend using
10794	on posting back, $_post['sub'] then will be an array (see print_r($_post['sub']) ), where the id is the key.
10795	the value of the array will be "true" (string - not a boolean!)
10796	in case the checkbox has been checked.
10797	i really like this answer from number 2 , and am inclined to believe it seems indeed one of the most efficient way to filter out an integer.
10798	your first method looks ok but i think it may fail in some odd cases.
10799	maybe not, i have not tested your code but i'm thinking if $_get['uid'] has a value of .+1234.56 or some other similar weird cases of the likes you may get unexpected results.
10800	you could easily slap up a couple of tests and a script with the code you you have, each method in their own function, and benchmark this by calling each function 1000 times, you will right away have an idea of the optimal solution 'perfomance-wise'.
10801	i can assure sure the prettiest code is not always the best!
10802	i have had to push out some ugly hacks for the sake of performance myself.
10803	as long as your tests are rigourous, and updated as needed (very important) to reflect whatever the requirements of the code it is testing, you can use whatever implementation you like that passes the tests i keep talking about .
10804	in this case the requirements are quite minimal, it is quite easy to test .
10805	you could also invoke array_shift() twice on the array.
10806	this might be more optimal since it shouldn't need to make a copy of the array.
10807	you have to remove the quotes around the variables.
10810	take a look here reload mysql data inside a div using ajax
10811	the problem is that many rss or atom feeds have namespaces defined which don't play nicely with simplexml.
10812	in the example below, i'm using str_replace to replace xmlns= to ns= .
10813	i'm then using the name of the root element to determine the type of feed (whether it's rss or atom).
10814	the array_push call takes care of adding all of the entries to the $entries array which you can then use later.
10815	there is no vulnerability as long as the logfile is treated by its consumers as plain text (which it should always be).
10816	if you decide to output the unprocessed contents of the logfile as part of some html, then it would be a real vulnerability (probably of not very severe practical impact, but still).
10817	but the issue would be with the "other" code that displays text inside html without calling htmlspecialchars , not with this code here that simply writes the log.
10818	that would depend on what $fh is.
10819	if $fh is a html file, you can be in trouble.
10820	not really if it is some text file or is inaccessible by any browser outside.
10821	one is the mysqli_connect() and the other is your basic query.
10822	the error: " mysqli_query() expects parameter 1 to be mysqli, null given " means either you are not connected to your mysql database or there is an error in your $query = mysqli_connect() script.
10823	try checking your database connection using the mysqli_error() method.
10824	as you might fairly be a newcomer to php, on one hand it is great to follow tutorials,however chosing a right source might be a frequent disasterous problem.
10826	if you go to official php documentation and search for mysql method, it is going to tell you about its deprecation.
10827	problem here, though, is not a way you interact with database, your style of coding still works and many people still do it just like that.
10828	if it is not a case and you still get a 'fail' error statement, you will need to do a very little debugging and people here will be able to help you out
10829	so, you will need to use following instead of what you have now
10831	edit - if you really want to use mysql_* calls then try this, which will at least let you know what the errors are:-
10832	if you want to get the checkboxes that have been ticked then something like this would do it:-
10833	put out the checkbox with a value of the price, and a hidden field containing the item_name.
10834	the index of these arrays should match.
10835	when you process the form you loop through the checkboxes you get the index of each checkbox array item and use that as the index to access the item_name field.
10836	used a sequence number to force the index of the arrays of form elements (probably should be necessary, but i prefer to force things) rather than using a field from the table.
10840	this helps should one of your clients request a port of your application to a different database.
10841	prepared statements in pdo support named placeholders in addition to the positional ( ? )
10842	pdo supports binding a single parameter at a time instead of all parameters at once.
10843	this allows stepping through an array of arguments and binding each, instead of having to construct a type string and then use call_user_func_array() black magic.
10844	pdo supports a convenient shortcut by passing an array to $stmt-&gt;execute() , where each key's value is bound to the placeholder as the key.
10845	(caveat: it casts each value to a string, so you have to bind one at a time if your statement has a variable limit .
10846	this is documented , and there's a feature request to change this casting to string .)
10847	items 2 through 4 combine to make it much easier to express the right side of operator in in a provably injection-safe manner.
10848	with pdo, you can build an associative array with sequential names (such as [':likeval0'=&gt;$val0, ':likeval1'=&gt;$val1, ':likeval2'=&gt;$val2]) and then safely build a placeholder list on the right side out of that array.
10849	therefore you need to apply neither file_get_contents nor json_decode on the $result variable.
10850	it's a plain array at this point, so just [] accesses, no -&gt; property traversal.
10851	i'm not sure it's wrapped in ["attachments"] anyway.
10852	see var_dump($array) for the actual structure.
10853	if you want to store it into an file (you may wish to elaborate on the format), then append it likewise:
10855	reason is, sometimes you might want to have the string in its original format so you can, for example, just strip some tags, not all of them - or you might want to just use htmlspecialchars without stripping any tags.
10856	the key is in being able to easily transform the string in what you need it to be when you are showing it.that means, you need to keep the string in its original format.
10857	in order to do that - you don't strip_tags or htmlspecialchars-it.
10858	the other thing is, everyone and their grandparents are using pdo, you might want to start playing with it because it really does make you immune against sql injection.
10859	it will be stripped and anyone will be able to login as me.
10861	for coding comfortability, you may want to create a function to to this for you:
10862	this approach has some issues though.
10863	it just works for data you are sending to the database, and more important, you are saving data html-encoded.
10864	if in the future, you want to generate pdf's from the data you saved in the database, you'd need to htmlspecialchars_decode() first, so it may be a bit inconvenient (but easily solvable).
10865	if you do the looping anyways and if you don't need more than 600000 why would you check them at all, why not just append $i to $random.
10866	i, too, am in the process of building a lamp mvc system from scratch.
10867	having created a bash shell script to compile apache 2.4.x from source, you notice that a perl compatible regular expression library is baked into the process.
10868	anytime the regular expression code must be used, the response of the http server will be slower.
10869	hence, option number one is a no go if performance is your concern.
10870	there is a cost to the analytics involved with regular expressions.
10871	the apache web server is borrowing the logic for regular expressions.
10872	it's not apaches home grown code.
10873	firstly, nothing about rewriting urls makes them secure.
10874	it is simple security through obscurity and making things look pretty on the client side.
10875	from time to time, security holes are found in the regular expression engine code.
10876	thus, in terms of true security, you are left in the same basic position you would be in without any rewriting: people, or bots, can send bad stuff your server and you need a way to filter and validate input in a systematic way.
10877	be sure to filter and validate all input, especially any part of the rewritten query string you intend to use.
10878	thus, option number one presents a cleaner interface ( input_get / $_get ) for kicking off your security duties.
10879	option number two requires (if you are trying to be thorough) you to filter and validate the entire string as a first step.
10880	the second step (generally) will be to break up and extract what you hope to gather from the larger string.
10881	again, you should be filtering and validating each piece of the string.
10882	hence, while perhaps it is more manageable (easier, convenient) to filter/validate/breakup/extract/ the larger string in php (say, with a method in security class of some kind), you still need to do work for each piece, for every request.
10883	option number one saves you the trouble of having to break up the larger string for the cost of executing the regex engine on every request.
10884	but, for the most part, you can just start filtering and validating the elements you expect to receive in input_get or $_get .
10885	note, however, that option one is mainly for people that truly understand how regular expressions work and how this applies to potential urls your server may receive.
10886	if you need more than one rewriterule , it could be so that you can have something like this (or other reasons) come into the server.
10887	this makes it easier to filter and validate your inputs.
10888	notice, though, that the last line implies you may still need to do some line splitting and further filtering/validating (but that may not have to happen on every request, like it does in option number 1).
10889	note : these are just some things to consider, not "the" way to do it.
10890	if security is your primary concern (that is, your interface into your security scheme), bite the bullet and use option number one.
10891	learning mod_rewrite and url rewriting makes you pretty powerful.
10892	why leave that power on the table?
10893	apache is a strange animal when it comes to configuring it.
10894	but, if you understand urls and regular expressions, i say man/woman up and go for it.
10895	:-) if speed, comprehension, and ease of use are your primary concerns, go for option number one.
10896	there are zealots that want everything to be coded in php, but you have to judge for yourself what the pros and cons are of both situations.
10897	this code would actually work better for option number 1. in option number 2, 1=blah, where blah would be something like /trt/43ff/3335/f/3/fr3r/ or whatever.
10898	you won't have to look for ampersands.
10899	you read every line of the data file.
10900	when you have a blank line you have no data in your $result .
10901	try to check if the array is not empty perhaps with
10902	some things to consider: a blank line at the end of the file could cause this if it only happens once (not each line).
10903	if you want to have default values in case your data is missing seperators you can add
10904	it looks to me like the problem is that your form is post, or that your form isn't submitting correctly.
10905	try to echo out $_get['categoryid'] and see what you get.
10906	check to make sure that $_get["categoryid"] is set before you try to initialize $id with it:
10907	have a look at $_session .
10908	it's a super global array which stores values of a browser session.
10909	an alternative is creating hidden form elements which contain the values of the previously submitted pages.
10910	you could verify that $_server['server_addr'] == $_server['remote_addr'] to check if the request is from the same server.
10911	don't trust $_server['http_x_forwarded_for'] as it could be easily modified.
10912	referrer is only set if you have one.
10913	if you are calling the page directly (curl or typing the url in the browser) or if you have the referrer-header disabled in your browser it won't be sent to the server.
10914	besides that, you should really think through the design.
10915	why can't you access the data directly from the first php-script (now containing the curl)?
10916	how is json.php generating it's output, can you replace/include that logic to your first php-script?
10919	in your case, you need to access your element via:
10920	each method of mysqli can fail.
10921	you should test each return value.
10922	if one fails, think about whether it makes sense to continue with an object that is not in the state you expect it to be.
10923	(potentially not in a "safe" state, but i think that's not an issue here.)
10924	since only the error message for the last operation is stored per connection/statement you might lose information about what caused the error if you continue after something went wrong.
10925	you might want to use that information to let the script decide whether to try again (only a temporary issue), change something or to bail out completely (and report a bug).
10926	and it makes debugging a lot easier.
10927	edit: just a few notes six years later.... the mysqli extension is perfectly capable of reporting operations that result in an (mysqli) error code other than 0 via exceptions, see mysqli_driver::$report_mode .
10928	die() is really, really crude and i wouldn't use it even for examples like this one anymore.
10929	so please, only take away the fact that each and every (mysql) operation can fail for a number of reasons; even if the exact same thing went well a thousand times before....
10930	you need to check both $mysqli and $statement .
10931	if they are false, you need to output $mysqli-&gt;error or $statement-&gt;error respectively.
10932	your $stmt-&gt;fetchall(pdo::fetch_class); is returning a array of objects.to access properties of objects you should use -&gt; , so try this:
10933	rather than passing $result in to mysqli_affected_rows you actually want to pass the db link (returned by mysqli_connect ) which will give you the number of rows affected by the previous query.
10934	the mysqli object contains the count of the affected rows not the result set.i recommend you to use mysqli with oo style or try pdo.
10935	you probably use somewhere in your code session_cache_limiter function.
10936	and in documentation there's info you need to use it before session_start and not after.
10937	no warning is displayed so something wrong must be in other parts of your code.
10938	what happens when you launch the above code?
10939	are there any errors or warnings?
10941	that applies whether the text you are using comes from a submitted parameter, or from the database, or somewhere else completely.
10943	it's tempting to shove all that escaping stuff in its own box at the top of the script and then forget about it.
10944	but text preparation really doesn't work like that , and if you pretend it does you'll find your database irreparably full of double-encoded crud, backslashes on your html page and security holes you didn't spot because you were taking data from a source other than the (encoded) parameters.
10945	you can make the burden of remembering to mysql_real_escape_string go away by using mysqli's parameterised queries or another higher-level data access layer.
10946	you can make the burden of typing htmlspecialchars every time less bothersome by defining a shorter-named function for it, eg.
10947	htmlspecialchars would work in both cases.
10948	have a look at the different flag options to avoid quotation marks being a problem in the input case.
10949	just do a single isset($a['container']['level']['item1']) .
10950	it'll check all of the keys in-order, and bail if any don't exist.
10951	there's no need to test your way "down" the tree.
10952	most likly ifttt can't access your nas from the internet due to home router firewall etc.
10953	also the ip address used in ifttt shouldn't be a local ip like 192.168.
10954	* but your public ip address.
10955	you can figure this out by googling for "whats my ip ".
10956	best way to test your setup using your laptop is to disconnect from local wifi network, tether your phone to your laptop and try visiting the nas ip url to see if it still works.
10957	you can use chrome postman app to send out post requests.
10959	it defines the path to a file and 'document_root' the document root directory under which the current script is executing, as defined in the server's configuration file.detail here afterthat you have added the path to your folder
10961	this is using procedural style and the mysqli extension.
10963	if you want to have a 'less complicated' array, you have a two arrays, one fore place a and one for place b and then merge them using array_merger() http://www.php.net/manual/en/function.array-merge.php .
10964	it appears that you are trying to do a dom descendant search on the data that the smartystreets api is returning.
10965	what is returned from the api is raw json data.
10966	as you can see, this is not something that you can use the jquery .find() function on.
10967	your code is already working properly for what you are asking.
10968	your form posts to the php script and returns a response from the smartystreets api.
10969	now you just need to handle the data that is returned.
10970	stab into the dark: some of your database rows contain non-ascii characters (e.g.
10971	your database connection is set to latin1 , so the data is not utf-8 encoded.
10972	if you fetch enough rows, there will be rows with such non-utf-8 data in there, and json_encode fails.
10973	with few enough rows you happen to not hit those problematic rows.
10974	the reason why your browser complains about invalid json when you include a print_r is simple: because then php outputs a lot of garbage which isn't json, which the browser can't decode as json.
10975	when you call $this-&gt;asset-&gt;saveall($this-&gt;request-&gt;data) you are telling cake to take the post data and try to save it.
10976	it does not look at $this-&gt;asset where you set the id to 62 at all.
10977	you can verify that by inspecting the output of var_dump($this-&gt;request-&gt;data) .
10978	try something like $this-&gt;request-&gt;data['asset']['id'] = 62 instead.
10981	however, you could use the session to store these values.
10982	call session_start(); on both pages and use the superglobal array $_session instead of $_post .
10983	i believe this is what you need to send post values from one php script to another, without using js, if you absolutely don't want to use $_session though that is what you should be using.
10984	nope, not as far as i know.
10985	mbstring.internal_encoding will define a default encoding for the mb_* family of functions only.
10986	i'm not sure whether such a list exists - if in doubt, just walk through the manual and look out for any charset parameters.
10987	just use htmlspecialchars() instead of htmlentities() .
10988	because it doesn't touch the non-ascii characters, it doesn't matter whether you use 'utf8' charset or the default 'latin1' (*), the results are the same.
10989	as a bonus your output is smaller.
10990	(though it does mean you have to ensure you're actually serving your page with the correct encoding.)
10991	(*: there are a few east asian multibyte charsets which can differ in their use of ascii code points, so if you're using those you would still need to pass a $charset argument to htmlspecialchars() .
10992	but certainly no such problem for utf-8.)
10993	i'm assuming here that the url in your question is an api that is guaranteed to return json strings.
10994	i didn't understand the purpose of the str_replace in your first code sample.
10995	but why not simplify it and just concatenate the results you want for each array?
10996	updating based on your output with lots of this: ,,,,,, - chances are you have blank fields in your database.
10997	you're still adding those to the array and they're still being comma seperated.
10998	... or the better way (structurally) would be to create a multi dimensional array and implode it at the end;
11000	don't expect it to modify the code, or add backslashes.
11001	it just escapes chars when adding to the database.
11002	if you have not manually coded in a script to escape with backslash, such as using the function addslashes() , then as @zerkms suggested, it could be you have magic quotes turned on, which "does" escape by adding a backslash automatically.
11003	if you have magic quotes enabled, read this: why not to use magic quotes
11004	the suggestion to use stripslashes() may well make this problem "go out of sight", but it does not fix the underlying problem, nor does it attempt to address a potential issue of you using magic quotes, again why not to use magic quotes .
11005	just turn off magic quotes , for fixing this issue, other security concerns, and the fact it is depreciated and you shouldn't be using it in code which may not work on a newer server or from an server update.
11006	if you have magic quotes enabled, you are now wasting resources from magic quotes adding slashes and stripslashes() removing them.
11007	this is not a fix, it is a "bodge".
11008	if you're happy with that then no worries, at all, but just fyi in my opinion this approach is not good practice at all.
11009	well...if you have your search result(s), loop through them and output the table row.
11010	maybe the code snippet below can help you.
11011	i use explode to get the values.
11013	this call will restore the $_session array to what it was after the previous request.
11014	php resources are freed after the php script is executed, so it makes no sense to store them in a session.
11015	i suspect you want $cookiesession to be the record in the databases.
11016	use mysql_fetch_array($cookiesession) to retrieve the database record.
11018	firstly, you could disable strict errors to get rid of this error like so:
11019	however, if you want to keep the strict errors you could get rid of them by changing the code.
11020	you will need to ensure the classes overriding have the correct prototype/definition to get rid of the error.
11022	this is not the same as null and will cause pdo to convert it to the given type pdo::param_int
11024	for moving $_get variables from one page to other using php,you can use htt_build_query function as
11025	your session data is stored inside your $_session-array and not outside as a common php variable.
11026	so if you want to - for example - print "choise_1" later, you will need to echo $_session['choise_1']; .
11027	nothing to do with the mail code you can use a simple str_replace() on $name
11028	you can get the keys from the first child array with array_keys , and then use array_sum and array_column to generate the array of sums.
11029	it should be good to go.
11030	what you had before was repeatedly summing the entire sub-array and assigning it to each letter key, but you just needed to add the current value to that letter key.
11031	i would say modifying your original code to work this way would probably be better than redefining array_column if you can't use it.
11032	unless you're using eval(), you don't need to fear about php code being evaluated.
11035	you're quoting $data , which prevents the variable from being expanded.
11036	you're also not putting the user input parameters into the array, you're trying to put the array into itself by using $data .
11038	see what is the difference between single-quoted and double-quoted strings in php?
11039	i don't see the point of the code that calls json_encode($_post) .
11040	that doesn't perform any useful validation of the post data, since anything that can be posted can be encoded.
11041	there's also no need to use formdata in the javascript.
11042	that's generally only needed if you're uploading a file.
11043	for other inputs, you can use the .serialize() method:
11044	you can do this with an array, but first of all do not build queries this way since you'll be vulnerable to sql injection.
11045	a shorter way, mysql only (since it does not distinguish between keys and values) would be
11046	this approach has the additional advantage that you can have the 'and' parameterized - the user can choose whether have the conditions anded or ored via a radiobutton:
11047	note that the actual value of 'andor' is not used -- if it is an or, all well and good, ' or ' is used.
11048	anything else that might be accidentally sent in a post by a customer, such as " --; drop table students; " , is considered to mean ' and '.
11049	note: calling header() shouldn't work if you have already done any output with echo , so you must have some sort of output buffering going on.
11050	but the point is that you don't see your echo output because of the immediate redirect.
11051	you should save them in $_session , $_cookie , or a database if you need them later.
11052	otherwise, they disappear when the script ends.
11053	you use session variables to store variables across pages.
11054	at the top of each page add session_start()....to decare the session variable then do this:
11056	firstly, check whether you really have any errors in php - it's notoriously crap at telling you.
11057	there is an option you can set on pdo objects to throw an exception on database error - i recommend you set it.
11058	in that case you need to re-examine how your application uses transactions and try to see if you can get it properly consistent.
11059	using transactions is nontrivial; it needs either a lot of code to get things right, or some well thought out wrapper code or something.
11060	if you don't understand any of that, leave autocommit on.
11061	php interprets this as an array of arrays, which looks like this:
11062	you seem to be expecting $_post to contain simple objects (aka stdclass ) and it simply doesn't.
11063	most soap helpers in php will give you simple object responses (which is a typical blending of behaviors from php).
11064	see this question for some ideas if you really want to translate every $_post["data"] field into an object.
11065	but that would be expensive and unnecessary.
11066	assuming your code is correct and not just what you provided, disabled form inputs are not submitted by browsers, that's why $_post['type'] is undefined .
11067	you can change the sql query as $sql="update user set age='".$_post[fundage]."'
11068	where id='2'"; mysql_query($sql); i guess this will do the trick
11069	here you will have the benefit of validation where false is returned when someone passes a value that is not an integer.
11070	if it is instead a float use filter_validate_float instead.
11071	there is also room for improvements, that is the code can be further reduced.
11072	you can simply set the option value to the text you want to recieve:
11073	or you can get the option text and value like this:
11074	and later send it to the server via jquery.ajax() request:
11075	if you want static method to get instance - all right, have it.
11076	but leave the rest for raw pdo.
11077	saving yourself one function call doesn't worth struggling against fallacies of your own wrapper.
11078	all right, i can understand a programmer's desire to avoid repetitions.
11079	here is a solution that solves this problem without drawbacks :
11080	$current is the name of the current file, without the .php extension.
11081	check the result of strpos() with !== false .
11082	use $_server['request_uri'] rather than $_server['php_self'] .
11083	wrap the code inside a function.
11084	if the form is not being printed to the html, it means that:
11086	the submit button is also missing a / at the end, but that is not certainly the reason.
11088	it depends on what do you want to use for.
11089	if you want to display it, use htmlspecialchars.
11090	if you want to use as a database query, you might use mysql_real_escape_string in case of mysql.
11091	different escaping functions should be used for different situations, for example:
11092	urlencode for items that will be dropped in a query string in an &lt;a&gt; tag, ie.
11093	'"&gt;'; (see also http_build_query ) mysql_real_escape_string for variables going in a sql statement (though i prefer bind variable) htmlentities for strings you want to display to the user, that may possibly have html within (see also strip_tags )
11094	if you worry about csrf-type attacks, then just make protection against them.
11095	to the persons who thinks it is a vulnerable and who downvotes me (thank for the downvote for the truth, you just confirmed you have nothing to say, just downvote):
11096	take this code http://pastebin.com/jw4zp3f5 and prove it is a vulnerable.
11097	i've got a lot of links to security articles and have read a lot of loud words that it is a vulnerability.
11098	but noone has proven that it really is.
11099	so, misters experts, if it is vulnerability, why noone proved that based on my script with vulnerable line ?
11100	or everything you can only do - is just point to the article and nothing more, huh?
11101	your error had to do with the spaces that existed in the string inside:
11102	as far as i can see $logged could be whatever and thus you get the error.
11103	starting the session in logging.php also should be fixed if not in global.php.
11104	ok. take everything out of global.php.
11105	if you want leave only session_start() but remove it from login.php and profile.php.
11106	then you have to move the sql query that checks the password and the username against the database to login.php instead of global.php and have it like this.
11107	you do not need these in login.php (replace them with the code above)
11108	that way you will see the error:array to string conversion on line 24 (line 19 if you don't put the 5 new lines)
11109	using str_replace is a little tricky.
11110	trying to find and remove a removes all the "a" in the text even in "animal".
11111	(str_replace("a","animal") => nmal)this link should be usefull : link
11112	will sort the values in alphabetical order.
11113	$frq returns the result of array_count_values --> $frq = array($word1=>word1_count , ...)the value here is the number of times the word is used so when later you have :
11114	the result will be empty since the index of this array are the words and the values the number of time the words appear in the text.
11115	also with str_word_count you must be really careful, since you are reading hispanic text and text can have numbers you shoudl use this
11116	you declare a variable vipemail , but you send member : email , email is not defined.
11117	then you look for $_post['email'] instead of $_post['member'] .
11118	i don't know what is exactly the problem.
11119	but i think the encoding is caused by the "htmlentities()" function.
11120	recommend using the correct api endpoint ( https://api.twitter.com/1/statuses/user_timeline.json ), using json instead of rss, and not bothering with htmlentities until you're actually showing the data.
11121	oh, btw, you're using an url regex on a tweet, but since all urls are now t.co urls, there's no need to bother with looking for urls that don't start with http://
11122	but my link to favicon.ico was relative, not absolute, i.e.
11123	so apache was looking for /county/favicon.ico instead of /favicon.ico .
11124	and the rewriterule was sending it to county.php.
11125	the problem is probably caused by your method of assigning a new id (number of rows + 1).
11126	if you have holes in your id list, you would be (could be...) trying to insert a row with an already existing id.
11127	that would lead to an error but as you are not checking for / handling errors, you will not see that.
11130	sometimes you output something by mistake, like having a space at the start of your php file.
11131	check demo1.php on line 2 , it produces some output.
11132	$_cookie will not be modified during the execution of the script.
11133	any cookies you set with setcookie() will only show up in $_cookie on the next request from the client.
11134	you can't set a default in the call of a function only the declaration.
11135	also if $link is null and $_post['ajaxfeedback'] is not set your code just sets session values.
11136	however i don't see where you are using session_start()
11137	if you have all of your downloads go through a single php script:
11138	you can do pretty much whatever you want.
11139	that php file can deliver all of your files (keeping them out of the webroot), write to your _session, and it can perform your redirect.
11140	all you need to do is $_post[$i] since it is an integer and not a string.
11141	if it was a string, you would only have to do this: $_post["{$i}"]
11142	to use a prepared query with pdo, you can change this in one of two ways, positional or named placeholders.
11143	run the "prepare" , then add the value in the execute statement:
11144	were you able to get the names.
11145	i've been trying to deal with the same problem.
11146	i noticed you tried to echo $title-&gt;fullname , it won't be under $title because this is just the results of all the email addresses the were found, which only have and address and some other optional items (none of which is the name).
11147	if you print_r($xml) you should see the names there, but for me, no amount of xpath could retrieve them for me.
11148	this is happening because &lt;iframe is at the beginning of your $string meaning that strpos will return 0 cause the &lt;ifrma start from the position 0and because empty(0) will return true (meaning it is empty) which is not true in our cause because 0 in our case means something.
11149	to solve this problem just replace !empty($test) with $test &gt;= 0 something like this :
11151	so, if the value is not present in the array, that's because the box wasn't checked.
11152	you can simplify your logic by making the values the keys in your array:
11153	now, you don't have to loop over $_post['class'] .
11154	instead, you can take an array of the all the keys (which you should already know):
11155	and form an array with the default values (say 0):
11156	now, $results will contain an associative array, with the keys being the columns and the values being 1 or 0, depending on whether or not the checkbox was checked.
11157	be careful, as somebody can post and data they want to $_post , so it may not be only 1's and 0's.
11158	it looks like your query is returning false .
11159	i would imagine there's an error with your database connection.
11160	try printing your query and running it manually on your database to confirm it's running properly.
11161	you can also just try a simple:
11162	this is likely because desc is a mysql reserved keyword , and it must be enclosed in backquotes in your query statement.
11163	always check mysql_error() to find the cause of a failed query.
11166	the order of key values in an associative array don't matter.
11167	therefore you don't need to array_push or array_unshift .
11168	the only thing you need to do is associate a key to the value you want (or vice-versa).
11169	so you would write the following to dynamically add values to the $params array.
11170	erenon's answer is probably better, but if you really want to add the sub-array one element at a time:
11172	for performance reasons, you may wish to do this instead, so that the elements are not being constantly renumbered:
11173	what was happening is that you were pushing your a new array onto the current array instead of merging your new array into your old array.
11174	or even better yet you can just call array_merge once and pass it all the values
11175	in setcookie("abc", "xyz", time()-3600) the trick is that this references the time on the server while the cookie expiration is dependent on the time of the host running the browser.
11176	if there is a mismatch of time between the two hosts, it is possible that it a cookie may not expire.
11177	however, using a time of ’1′ indicates an expiration time of 1 second after midnight, january 1st, 1970 which is the earliest possible expiration time.
11178	you cannot read a cookie in the same page request that the cookie is set.
11179	the $_cookie super global array (use this instead of the deprecated $http_cookie_vars ) contains the cookies that the client has sent you.
11180	and in this page load you just sent the cookie to the client, so it will be in the next page load by the client that he/she will sent you the cookie and you will be able to read it.
11181	the description of mvc, provided by sharpums, was quite dreadful.
11182	and the effort required to get the source of sharpums makes me think that it is not an opensource project .. oh well.
11183	you should try to find out, at which point the signin() method gets terminated.
11184	free advice: do not use sharpums as the basis for you application or research in mvc as whole because of following reasons:
11187	this can be handled in a single query, so you probably don't need to ask this question in the context of using pdo.
11188	however, i'll present my answer as though it were a prepared statement.
11189	there are a few ways you can do what you're asking, but the simplest would be to just do a join with an or :
11190	you have to use mysqli here, because you used mysqli dor db connection
11192	you should read this: validating sanitizing and escaping user data .
11193	your select statement in the function soto_posts_filter_restrict_manage_posts is useless as you do not do anything with it.
11194	also, your &lt;select&gt; code suggests that only one value can be used so why use distinct ?
11195	also, shouldn't that statement link to the post id ?
11196	this is surely why you don't get the results you are expecting.
11197	i would suggest you add some var_dump here and there and validate each steps in your process to make sure you have the expected outcome all the way.
11198	if you haven't included jquery on your site, you can do it by adding this script to your page, just before closing &lt;/head&gt; tag
11199	add this javascript file to the bottom of your page, just before closing &lt;/body&gt;
11200	see full example of accepted solution with sample code for more details here : delete mysqli record without showing the id in the url then using jquery remove that record from the page which will give more good ui experience.
11201	directly - there is no way.
11202	but you may use a simple overlay class which will allow you to do so.
11203	although you will need some phpdoc to make code completion work.
11204	your ajax code is working fine, but your getinfo.php page has some errors.
11205	you have used mysql, but it's being deprecated.
11206	so you need to consider using mysqli or pdo.
11207	check if the query has executed properly.
11208	in your html(first code), the argument that you are the passing was "this" but in your showinformation() you are treating it as a string.
11209	you can directly pass the $seatid.
11210	if you're trying to determine the session timezone you can use this query:
11211	and in php:you can either use the $_server['request_time'] variable
11212	if you want to get simple answeryou can add
11214	if this is on the same page, you can just omit it or use $_server['php_self'] , then catch the form submission.
11215	inside that process, then invoke your custom function.
11216	an easy fix would be just to quote the string inside it:
11218	it turned out that while trying to load a url using curl, i had to include either the http:// and/or the www.
11219	without them, curl would not open the url.
11220	i eventually coded a script that would try the different combinations of these as not all sites responded to one particular combo.
11221	i see from your last comment that the url in your var_dump contains neither of these.
11222	if you add them then hopefully this will resolve your issue.
11223	you could use __construct() to initialize your mysqli.
11224	you can then access it around your class with $this .
11225	if you wanted to use it in your second class too, you could construct it in the same way or extend your first class.
11226	is what it have to be.
11227	you should create a mysqli instance somewhere outside the class and then pass it in coustructor.
11228	i don't know if it's applicable to you, but a solution that i came with was put a apostrophe in front of it!
11229	the excel itself omit the apostrophe and only show data as text, not as a excel timestamp.
11230	in that way you can explode the data by "/" and put it in the way you want.
11231	but, if is impossible to you put a apostrophe in front in every one of them, you can verifiy if is a number and try to convert the excel timestamp to unix timestamp , assuming you server a *nix like.
11232	i think you must allow access to both $_get and $_post at the same time.
11233	and i don't think you can just merge them together either.
11234	(you can have the option to, like php and the ill concieved $_request .)
11235	you could get a request like:
11236	note that the variable name type is used twice, but in different scopes!
11237	(once in the uri defining the resource that should handle the post, and then in the posted entity itself.)
11238	you are using explode() on an array.
11240	you do not have to do this, please refer to the manual http://php.net/explode to understand.
11241	based on your edit i would guess that your field names contain leading spaces.
11242	you should check that with a var_dump() of the $i variables and you can solve it by trimming it:
11243	first of all, correlating by timestamp is definitely not a good idea.
11244	first of all, it's possible for two people to use your web site at exactly the same time, and their submissions would get confused.
11245	second, the time could change between inserting into the application table and the clothes table (datetimes are precise to the second, and maybe the first insert was at time t.999 and the second at t+1.000; this second problem can be resolved by assigning a variable to the time at the beginning of the script, and using that in all your inserts.
11246	but because of the first problem, you should still not use timestamps for this.
11247	instead, you should assign a unique id to the application.
11248	this is easily done in mysql by having an id column with the auto-increment option.
11249	when you add a row to the table, you leave this column out (or give its value as null), and the server will automatically assign a value that's 1 higher than the last value assigned.
11250	the function mysql_insert_id() will return the value that was assigned in the last insertion you did.
11251	in the clothes table, you add an application_id column, which contains that id.
11252	you use this to correlate the two tables.
11253	the next thing you have to deal with is how to handle multiple clothes column in the form.
11254	in each row that you added, you gave the form elements the same names as in the previous row.
11255	when php is processing the form, $_post['kind'] can only get one of them.
11256	the way this is handled is by giving them named ending in [] , e.g.
11257	this tells php that it should create an array of these inputs.
11258	you can then get the kind of the first row as $_get['kind'][0] , the second row is $_get['kind'][1] , and so on.
11259	so when you're writing to the database, you can do:
11261	they have been superceded by mysqli_xxx and pdo.
11262	these allow you to create "prepared" statements, so you don't have to substitute variables into strings as above, which potentially allows sql-injection attacks unless you're careful to sanitize your data (i didn't do so above for expediency).
11263	if this solves your problem, then, as others have commented, your problem is that $data is not a string, and instead an array, or an object that got tostring ed when you print_r ed.
11264	first, use parse_url instead of explode to separate the hostname, path and query string.
11265	second, put to code for parsing the path before you decide if you have query string, since you parse the path either way.
11266	third, instead of the foreach loop to copy the parameters, use array_merge like this:
11267	the resulting array will also have the numeric indexes of the matches, but you can just ignore them or filter your wanted keys with array_intersect_keys .
11268	the \w+ pattern matches all "word" characters, you may replace it with character classes like [-a-za-z0-9_] or something similar.
11269	you have to echo inside if condition or you have to set variable globally
11270	make sure you have the correct "host name", its usually the ip address for your phpmyadmin,make sure you are using the correct user too, "username and password".
11271	you may need to configure php with the option: --with-mysql = path_to_mysql
11272	if you change the name of your inputs to something like userids[&lt;?
11273	echo $userid; ?&gt;] you will get the array $_post['userids'] on the receiving page, which is useful if you want to add more inputs with additional information.
11274	this array can be used like above:
11275	you seem to have ended a php code section with ?&gt; and not started a new one with &lt;?php - although i shall assume that this is simply a copy/paste error since you are not complaining that you can see your php source code in the browser.
11276	the actual problem you have here is that you are checking if $_post['submit'] is set, but it never will be because you didn't name any of your form controls submit , so none of the code in the if block will ever be executed.
11277	in general, session_start() will start a session that is not yet started or give you access to an existing session.
11278	when you navigate away from the cart page and back to the index page (which doesn't have session_start() ) you won't be able to see the session variable.
11279	the script you have creates the 'cart_x' element of the $_session array, where x is whatever is in $_get['add'] , corresponding to a product id.
11280	consider separating the cart from the objects contained in it as follows:
11283	instead of echo $_session['cart_1'] try print_r($_session['cart']) between &lt;pre&gt; tags to see what's in the cart, and put session_start() in your index page as well if you need access to the variable there.
11285	something i came across with pdo and blobs is that you can use that for encrypted data in mysql.
11286	a good example of using blobs with encryption (so information in the database itself is encrypted) can be seen in:
11287	i think the article why you should be using php's pdo for database access is great.
11288	it is simple, clear, and organized.
11289	if this doesn't work, then $row['typeofdog'] does not equal 'labrador' .
11290	in that case, try echoing $row['typeofdog'] just before the conditional so you can see what is being compared.
11291	also, yes, you are at risk for sql injection.
11295	secondly, the database isn't getting updated because you need to concatenate (again, don't do this, please!)
11296	also the syntax for mysqli_query is wrong as stated in the comments on your post.
11299	to quickly fix your problem, you are not telling it to connect to your db when passing query.
11300	to me there's no clear logic on how you want to sort the results, but in such case, if you want one to be very first, just add another column to your table, like priority and it to i.e.
11301	0 for all rows then set it to i.e.
11302	1 or higher for favorite row and then select with order by priority desc and voila.
11303	have you tried adding what you want after declaring $arr like follows:
11304	alternatively as other answerers have pointed out you can also use array_unshift like follows:
11305	this will leave 'field' elements inside an array.
11306	if you want to remove it you can use array_map :
11307	for the sake of simplicity i accessed keys directly, but in production you should always check whether this key is present inside the array.
11308	fetch_into is used for adding data into an already existing class, so in your case using fetch_class makes more sense.
11309	side note: since you are already using pdo, you might as well take advantage of prepared statements .
11310	this provides the benefit of not having to worry about sql injections.
11311	the only thing in your code that would change is:
11312	you have got a design flaw.a query has to be triggered by a repository/entity manager or by a controller if you are on really small-size application.
11313	i will give you the code as it has to be if it is in the controller:
11314	you forgot to put session_start() at the top of the page.
11315	you can check if $index is too big by comparing it to the number of items in your array:
11316	you need to define enctype,method type(get or post) in form and make html like this:
11317	you need to define php code in isset statement like this:
11318	outside of your using bind_result testing the query i return data fine, so if you are still having issues after changing this, i believe it would be something to do with the variable values.
11319	in order to identify the issue we would need an example of your table structure (columns and values) as close to actual values as possible, like in the sql fiddle i linked.
11320	unless you use $statement-&gt;store_result() you don't need to call $statement-&gt;free_result() http://php.net/manual/en/mysqli-stmt.free-result.php as opposed to freeing the memory allocated by $statement-&gt;get_result http://php.net/manual/en/mysqli-result.free.php
11321	you should send one curl request which includes an array of registration_ids .
11322	doing this will use less resources as it only has to connect to google's servers in one step rather than sending off several requests.
11323	you can just send one request to handle many notifications.
11325	foreach creates a copy of the array.
11326	your $value will not be changed in the original array.
11327	either change the value in the original array or assign $value by reference.
11328	either use ext/dom to only fetch the first text node or simply cut off everything after the first &lt; .
11329	the first approach takes more code.
11330	the latter is less reliable since the text could potentially contain a regular less than that is not a tag.
11331	a good trade-off between reliability and amount of code would be to compare the original string against the stripped string and then only return the substring from beginning to the first different character, e.g.
11332	note that none of these approaches take into account that there might be text outside tags, e.g.
11333	if you want "textmsg bar end" use dom like this:
11334	reaching the mysql database connection limit is hard in oop php because it destructs the connection object if the script is finished.
11335	just to be safe, have a destruct function in your class and unset the object at the end of the script.
11336	if you are really worried about reaching the connection cap you can go into mysql and modify the max_connection_limit from i think 1000 to higher and increase the buffer pool.
11337	additionally you might look into switching languages to like java which has a technique called "connection pooling."
11338	no this is not the same as p_connect or whatever it is in php.
11339	you can use the explode() function to separate the differents value by # , then apply filter_var() to extract only numeric values.
11342	the fact that those elements are themselves arrays is irrelevant.
11343	using an anonymous function as in the previous reply gave a 30-35% improvement over passing usort () the name of a defined function.
11344	it was never better than 8x slower and usually worse than 10x slower.
11345	often this won't matter, but when you start getting up into tenths of a second of cpu time just for sorting one array, it might.
11346	extracting the column without array_column () on a pre-5.5 server never quite halved the differential at best.
11347	check weather your file where you are writing the code have .balde.php extension, as {{ }} is only accessed through blade engine.
11348	your syntax for fetching the keywords is wrong {{php echo $_get['keyword']}} blade engine doesn't require php echo .
11349	you can fetch through database or request, for this you need to learn from database documentation or request documentation respectively.
11350	if you want exact matches, lose the % and the like :
11352	if you wanna then you can arrange whole array i.e.
11353	shifting following indexed data to previous index to decrease line counts but this will increase your programming complexity.
11354	those are the dangers when using input data from the user to operate with the database.
11355	some input might cause the sql-syntax to break, the database will get a badly formatted statement and run onto an error (if it was unintentionally) or even execute statements it was not supposed to (sql injection).
11356	a possibility for unintended syntax breaking would be to ask the user for his name and he inserts something like o'connor.
11357	way to treat them: how can i prevent sql injection in php?
11359	so if you want to let your users use html for a blogpost or whatever, you can a library like this which will allow certain elements and defuse the dangerous stuff.
11361	put the names of the user into the database, use the id or a hash or something you generated as the filename.
11362	remember : treat the data based on the context in which you are using it!
11363	there are different places for attacks and each one uses other weaknesses.
11364	so there is not the one solution to fix all the problems.
11365	you just have to consider the context in which you are handling the data - are you saving it or displaying it.
11366	when displaying it you want to take care of the javascript that might be hidden in the data so you want to escape the charakters which are special in html.
11367	when saving data you worry only about the charakters which might break the syntax of your sql.
11369	you don't check the validity of the data you put into your database.
11370	while it is not exactly required to do so but if i would submit this as an email address or phone number:
11371	and you echo this out on your website and visit it, you will be redirected sending me your login cookies and now i can use that data to login as you and if by any chance you're the site admin... the type of attack is called xss.
11372	and by not checking the validity of the data, there are many ways to do so but take this as an example:
11373	with this code, any data saved will be valid.
11374	it does not say that the email address exists noor the phone number.
11376	my advice, check if the data is what you expect it to be before saving it instead of storing it and fix the security issues later.
11377	if you don't have php 5.3 or greater you would have to use sarfraz's (or better, delphist's) suggestion.
11378	however, in larger applications i tend to have the request variables wrapped in a way that i can specify a default value in the argument to the function retrieving the request.
11379	this has the advantage that it is cleaner (easier to understand) and it doesn't generate warnings if the index doesn't exist in the $_get variable as i can use things like isset to check if the array index exists.
11380	i end up with something like:
11381	if you're cascading down a number of arrays, it would be faster to store the value in a temp variable:
11383	loop through the array and check to see if the value exists.
11384	use in_array() to check to see if the value exists.
11385	add the value to the array and then use array_unique() to eliminate duplicate values.
11386	first, initiate a session in php and output the swf flash object in html.
11387	in your case, i don't think it is necessary to pass session variable to the object.
11388	third, in speaking.php , output only string with containing the necessary name-value pairs.
11389	you might need to urlencode the value.
11390	i created a wordpress shortcode in which i was getting two things, an audio link and description for it.
11391	both of these two parameters would contain three comma separated parameters.
11392	so it would be something like:
11393	to get multiple parameters in one variable i had to use explode() so that it could be separated.
11394	now if one of the desc by any chance contains a comma , then it was processed as different parameter.
11395	so the following created problems for me
11396	the solution was not the perfect one but it got the job done.
11397	what i did was i replaced the ',' delimiter as '*' so now my shortcode looks something like this:
11398	that way you have a process to filter the $_get values and make the creation of the insert easier to understand irregardless of how many values you have.
11399	you're setting all your variables to the result of isset($_post['xxx']) , which is either true or false , not to the value of the input field itself.
11400	that's because you need to refresh the page yourself or use a redirection method.
11401	you're also open to an sql injection.
11403	a third (or fourth, depending on how you count) is to use strpos.
11404	it suppresses any and all error messages, warnings, or notifications caused by the expression you've prepended it to.
11405	in this case: if(@$_post['myvar']) it is probably being used because the original author did not want a notification to be emitted if $_post['myvar'] is unset.
11408	you either nee to use a strict comparison === , or better yet use empty() .
11409	i personally handle all such stuff up front when initializing the variable (including sanitizing the input value, as there is no sense in passing unsafe data further into your application.
11410	here is what i might suggest:
11412	note you also need to change your code to populate $mistake , as with a returned value of 'not specified' for $phone , you would not trigger that conditional.
11413	bound parameters cannot be used in this way.
11414	you have to input it as like :search_string in the prepared query, then add the percent signs in the bound value (i.e.
11415	you can pass the field "custom" to pyapal and it will pass it back to you when the transaction is completed.
11416	you may want to use your user id rather than an email address though.
11417	the way it works is: you use these hidden input values on for your paypal button.
11418	when the user is transferred to paypal all of these values are sent with it.
11419	one of the values you use is name="notify_url" when the user completes checkout paypal posts the checkout information to that url.
11420	in the case of php you do something like this:
11421	any custom information you want to have returned to you needs to go in the custom field.
11422	i use some kind of delimiter if i want more pieces of information returned, like this:
11423	whatever value is in the custom filed will be posted back to your notify_url exactly the same way you give it to paypal.
11424	if you must use preg_split only then you can do:
11425	data in your ajax function needs to be of the form 'id=xxx'.
11426	i see you have it in the variable id.
11427	try data: 'id=' + id .
11428	the explanation here is that post data should be of the form a=b,c=d,... et cetera.
11429	that way php will pick it up as a key/value pair in the $_post dictionary.
11430	now you have a variable id which you would like to send (value), and you also want this to be the name of the (key).
11431	hence you would need to do data: 'id=' + id .
11432	if id=2 , then that will evaluate to data: 'id=2' , which is correct.
11433	ultimately, as @stephen noted, it is better to use an object for the data field, as it is arguably more elegant.
11434	data: {'id': id} should work as well, and you can add more variables in the future.
11435	just test in the first line of the code if the $elements arrays already exist.
11436	then the second time the code runs, it just explodes the $elements array that was created at the top of the script.
11437	if parameters are hardcoded, there is no use for the placeholders at all.
11438	query caching is enabled by mysql by default, so, you have no worry about it.
11440	in terms of that clumsy pdo library, you have to use placeholders for data only.
11441	but in terms of creating sql queries dynamically, you have to use appropriate placeholders for every variable part of query.
11442	if you are using pdo, you could do something like:
11443	you could take the substitutions array and split it into two arrays, e.g.
11444	as i read your post, you want anyone from the preg_match to get the desired page regardless of sessionid status, so you don't want to test sessionid first.
11445	also when you get the variable, you must assign it's value.
11446	and not the value, returned by isset function:
11447	because you access $_get["page"] as query string in php file .
11448	so it should be set in link so that it doesnt become blank in php file.
11449	in your case $page is always blank as its not defined .
11450	turn error_reporting(e_all) always in development mode to see errors,warnings,notices.
11451	you explode the string based on the space character.you then "pop" the last element of the array into $last.the remaining members of the array are then imploded, using the space character as the "glue"
11452	you can learn a whole lot more from php.net .
11453	it has a lot of examples to go with it.
11454	you don't get what's in the url, you get what the server hands you.
11455	that includes parameters added by things such as mod_rewrite .
11456	if you need specific parameters then index $_get[] appropriately, otherwise live with it.
11457	i'm not sure what you mean, but if i have understood properly, both files are being called by an js script using ajax.
11458	if you could include the js code where the call is being done, that would be really helpful.
11459	anyway, i'm pretty sure that the second file is being downloaded before the first one.
11460	something you can do to workaround this is to abstract both session_start() and the $_session['myvar'] variable declaration in another file or in the top of your current file, for example in a file called 'session_init.php' it should look like this :
11461	your current file (the file where you are making the ajax request) :
11462	now $_session['myvar'] should be accessible in both files as long as you declare session_start() at the top of each file.
11463	remember that is not a good practice to nest ajax petitions.
11464	also you can take a different approach to send the data trough the files, for example, sending the value of 'myvar' as a parameter on the ajax request.
11467	the problem you're having is that when 0.01 is cast as an integer it is rounded (to 0), which is loosely equal to null , you need to use floatval() and use an exact-comparison using === like so: floatval($_get["nearkm"]) === 0 .
11472	when using two mysqli_query calls you should take a look at mysql transactions .
11474	this will help you to avoid sql injection.
11475	since the formsubmitted is not present inside the form the values is not set for $_post['formsubmitted'] , so the if part of your if statement is never executed.
11476	when passing data to the view (template) you pass it as an array.so you view should be:
11478	not transforming the array into an element of an other array in order to perform a print_r...
11479	contrary to other answers, i think you want to use "or" in your query, not "and":
11480	replace other_column with the name of a second column.
11481	you can keep repeating the part i added for each of your columns.
11482	note: this is assuming that your variable $searchterm has already been escaped for the database, for example with $mysqli-&gt;real_escape_string($searchterm); .
11483	always ensure that is the case, or better yet use parameterised queries.
11485	also, what is wrong with the line of code you mentioned?
11486	it should work as far as i can tell.
11487	you can find the invocations here and here .
11488	(and here the type is put into the extended_value of the opcode.)
11489	if you look at the full opcodes , you'll see those constants as 1 ( zend_isset = (1&lt;&lt;0) ) and 2 ( zend_isempty = (1&lt;&lt;1) ) in the ext column.
11490	before you do a preg_match, check if the input has the desired prefix and remove it.
11492	second, if you don't have anything in $_post['search'] , then $searchq is never initialized, and you have nothing for your foreach loop.
11493	second and a half, if you do pass in a $_post['search'] , but no results are found, you have $searchq as a string, so when it hits the foreach loop, it's not something foreach can use.
11494	(honestly, your variables shouldn't do double duty like that, where you have $searchq as a string in the preg_replace and then use it as an array if there are search results.)
11495	so, you're possibly not actually getting any results, so your while loop might never do anything, and therefore, $searchq is not an array that can be looped through with foreach.
11496	what you need to do is initialize $searchq before your query, so you have an empty array, so that when you get down to your foreach, you at least have an empty array there.
11497	however, if you have a logic to generate the groups, you should also be able to turn the value into the appropriate group again, using the very same logic, but reversed.
11498	edit: you could also pass the group as a prefix of the value.
11499	there is a problem that not in or in work without "" in bracket () so you have remove "" from query like implode before query and store it in variable and pass string in query (in not in bracket).
11500	i tried with your query it works fine,
11501	you ought to both specify a suitable html type, e.g.
11502	radio, and set appropriately the names (you have a duplicate id now):
11503	or you can use an array, but then you can't easily use implode since you will only gather the values , not where they come from, so you would need a cycle:
11504	it seems that your problem is you don't know what key the user is going to type in for the $_get parameter.
11505	so, you can directly loop through $_get like this:
11506	now, if you only want the first get parameter, you can use array_shift() , like this:
11507	both methods do not require you to know the key of the parameter beforehand.
11508	workaround :just edit the back-end and if there is no data for params or it is not an array (null, empty whatever ..) just assign an empty string to it:
11509	update: i did few tests and it seems there is no way to put "nothing" in the request ussing a form or ajax.
11510	0 , '' , null are valid values for the $_get but empty array is not even created.
11511	so to answer your question, it is not possible to get empty array value from the front-end.
11512	use !empty() instead of isset() .
11513	those fields will always be set, at least to an empty string.
11514	you could use empty() as well, but due to empty('0') yielding true you would need an extra condition leading to more cumbersome code.
11517	everything looks ok. check you form again, and make sure the name attribute is correct.
11518	also, if you are typing in the name on the search form, make sure you are taking care of the case sensitive.
11519	the name should match the name in the database.
11520	or if your $_session['cart'] is an associative array, you can use json_encode function.
11521	edit: for example, if your $_session['cart'] is an array like below:
11522	then in your php ajax part, you could get the data by $_post['id'] and $_post['num'] etc...
11523	i think the problem come from this line - $this-&gt;map = array_merge($this-&gt;map, $files) because you're passing $files to $autoload-&gt;map() as array , but you're trying to get the value as string in find() method.
11525	btw, you will not be able to associate user id back to session, so it is better to save whole cart in database or cookie
11527	you somewhere assign a variable by reference to your session, you can see this with the &amp; character in your var_dump :
11528	a reference in php means, that in your case $_session['email'] has become an alias for some other variable.
11529	if that other variable is changed, $_session['email'] will change as well as it's only an alias.
11530	2) another is you can use preg_match() you can achieve it.
11531	3) if you are getting it in url then get it using $_get['trackingid'] .
11532	read the whole file, then use the explode function as follows to split the results string on | characters.
11533	if then you need to find out whether the array contains a number -- e.g.
11534	whether radio button 1 was selected -- you can create a second array, like this:
11535	then, you should be able to check $results2[1] , and it will be true if radio button 1 was selected.
11536	(1) you are missing the name attribute in your checkboxes.
11537	(2) you are missing the closing &lt;/form&gt; tag.
11538	(3) your query is probably failing as you have values(name, $total) , and i assume name is a string so it needs to be in quotes values('name', $total) , or more likely values('$name', $total)
11539	also, i don't see why you are connecting to your database on the initial page load.
11540	i would move that inside your isset($_post['submit']) .
11542	instead, the mysqli or pdo_mysql extension should be used.
11543	see also mysql: choosing an api guide and related faq for more information.
11544	you can iterate the arrays and compare each 1 dimensional array.
11549	i think that you should first explode using '\t' as delimiter to get the substrings separated by \t (name|code|email|designation|number|salary|age)and then explode each substring using '|' as delimiter.i wish that can help you
11551	if you want only the last five, here's the modified statement
11552	you need to enable mysqli extension by removing the ;
11553	your php expects a parameter with a key jsonobj , but jsonobj is an array, so it doesn't have any named keys.
11554	and then in the php script you can access $_post['medicine_name'] , $_post['quantity'] , and $_post['price'] .
11556	this solution will work if you want to use the &lt;br&gt; whenever the key is divisible by 10.
11557	if i understand your question correctly, an array is not needed.
11558	you can simply use strpos twice with an or (in php, ||) operator
11559	you can't give strpos an array, so you will have to do it manually.
11560	if sometimes you want it to be an array, use a condition if (is_array($_get['prod_id'])) and use different set of validations.
11561	if an array was submitted in the url, then when retrieved via $_get , it will be a php array rather than a string that looks like a serialized array.
11562	you should be validating the contents of $id to be within the bounds you expect, and if you try to use it as a string when it is really an array, the functions acting on it will throw warnings or errors.
11564	on the other hand, if the value is expected to be an array:
11565	it's because you're not using the correct regular expression.
11566	is there a reason you can't use explode() ?
11567	regex is problematic, overly complicated at times, and much slower.
11568	if you know you'll always be splitting at the br tag, explode is much more efficient.
11569	your print_r($_get) is not querying / getting anything.
11570	you need to specify what $_get is looking for.
11571	in your case, your url has the token and tokenid parameters.
11572	so you would need to $_get['token']; and $_get['tokenid'];
11573	yeah user var_dump, it is always your fault , don't think that you have found php bug ( i always do )before your foreach statement put
11574	second, if you can prevent them from being in two different arrays, it will be cleaner and easier to work with:
11575	then, you can use something like this (to make each array comma-delimited with a new line in between,.
11576	whereas $loginrs is the name of your sql query and ['permission'] is the field in the database that stores user level permissions.
11577	then at the top of your page you can determine if the logged in user has permission to view this page...
11578	if you printed the mysqli response, "1" will mean that the command has been carried out but it does not necessarily mean that any rows have been deleted.
11579	"0" means the command has been incorrectly written.
11580	it must be an array as it is used as second parameter in where_in.
11581	to check whether $this->input->get('dept_id') is an array or not, use following :
11582	why are you using a $_get request in the action of a form that is $_post?
11583	since you aren't worried about your users seeing the value of q then why not just put a hidden input in the form with the results of q :
11585	try to remove the clear() all together and see what happens, the changed line should be
11586	executing two queries with one call is only allowed when you are using mysqlnd .
11587	even then, you must have pdo::attr_emulate_prepares set to 1 when using prepared statements.
11588	alternatively, you can use $conn-&gt;exec($sql) , which works regardless.
11590	on a side note:you should use php pdo class to connect and query the database.
11591	mysql_fetch_object returns an object, not an array.
11592	so, what are you doing by $arr[] = $obj; is just adding an object into an array.
11593	so, the actual structure of the $arr is something like
11594	the simpliest way to fix this is to add a field to an object.
11595	i haven't worked with php since 5.3, so can't be sure, but it's as simple as adding
11606	also, you are probably getting the division by zero warning because $count or $limit is returning 0.
11607	i have on some old sites still old mysql and is working, but i suggest you as @matu to start using mysqli or pdo.
11608	you can find an answer to this here: set theory union of arrays in php
11609	by expanding on your current method.
11610	you can call array_unique and sort on the resulting array.
11611	i note that most of the rest of your code uses the oo syntax for mysqli, which means that the connection variable is specified as the object name.
11612	in the case of mysqli_insert_id() here, you are calling it using the procedural syntax, in which case you must specify the connection var as the first parameter.
11613	not tested, but this is to give you an array where the key is the category and the value is an array of catgories under that category (which in turn could each be arrays, etc)
11614	edit - still not 100%, but doing this with a loop around but starting at the bottom of the tree, using array_unshift to prepend the sub categories to the array for each category.
11615	you don't need to use array_push, since you're only adding one element to the array.
11616	you can save the overhead of calling a function by using the syntax:
11617	my answer depends on the necessity of the variables saved from the database.
11618	in your supplied code, you're only using the id and tag values from the database in the nested foreach loops.
11619	if this is this case, then you can simplify your arrays so you can use implode() on a new tags array.
11620	i have not tested this since i do not have your database schema, but i believe it will work.
11621	i believe the problem is not what you're describing.
11622	so long as style.php is accessed via http, then the $_server variables will be set.
11623	there is , however, some syntax error in the code you described:
11624	it's clear that you aren't seeing notices and possibly warnings and errors.
11625	load http://example.com/include/version-3/css/style.php in your browser and see the generated code, rather than possibly relying on styles showing up in your html.
11626	you can use php's array_reverse to solve your problem.you can do it like this:
11627	by the way, storing the $id in $_session won't work - there is only one $_session per web session, and since you are listing different jobs, $_session['id'] will contain the last $id .
11628	anyway you have to write it somewhere in html, because server-side script need to know what id are you looking
11629	imo you don't really understand what's happening between client and server sides, but i cannot provide you a link to a tutorial, because it is a long time when i used them last time
11630	based on the error message(s) you are receiving, it's obvious that the totp is not being included in the url the script is referencing.
11632	also, not sure why you are making a global call, as you don't appear to be within a function.
11633	to remove the notice a check with isset($_get['totp'] would do.
11634	if it is in the url but not showing up in your page, make sure there is no rewriting happening.
11636	you are trying to use mysql_real_escape_string with a mysqli connection.
11637	instead it, you must use mysqli_real_escape_string
11638	since you're using mysqli, instead of trying to use escape string functions, use prepared statements .
11639	in your function portfolio_save_data before check permisions you can do this check:
11640	like i mentioned above sometimes sometimes there is no such key 'post_type' in $_post, so you can change this line for checking permissions:
11641	after some communication to find out what you want to achieve, here's my answer, which would be too long for a comment.
11642	you basically want to check if any item in your array in not yet stored in your db.
11643	if you would have been following psr-1/psr-2 code formatting you would have seen that all curly brackets match properly as @hannan said in the comments of your post.
11644	below is your code indented using phpstorm set to psr-1/psr-2 formatting.
11645	(note: i am not saying you must use psr-1/psr-2, just saying you could)
11647	furthermore, if you think you are missing one of ;:[]{}(),.
11648	in php, your code will throw a fatal error on execution.
11649	which looks something like this(removed a ; from working code, styling by xdebug ) this is of course only if they are part of the code, so when they appear in a string and one is missing, there will be no fatal error.
11650	otherwise you can keep it as a string, and explode it.
11651	with your given url and the parameter keywordbox=computing+finance , $_get['keywordbox'] will contain a single string, "computing finance" , not an array.
11652	if you want the parameter to contain an array, you need to use array notation, as in keywordbox[]=computing&amp;keywordbox[]=finance .
11653	the query would look something like select count(*) from dbname where username = $_post['username'] .
11654	of course there is some prep work to do to avoid sql injection, but that would be the basic process.
11655	this book has everything you need to know about the basics of web programming, and was the text for my web programming class.
11656	you can't just use explode() because it will also separate select from value .
11657	you could alter your output so that instead you have array keys like selectvalue_2_1 .
11660	then you can continue with your current code using the clean string:
11661	below is another one, which is more interesting, because in this case, strstr() is the winner:
11662	this means it can really depend on "environmental circumstances" , which are sometimes hard to influence, and can change the result of "micro optimization tasks" like this, in case you are just checking whether a string exists in another one or not.
11664	if you are not getting an appropriate warning from php, please tweak your error reporting settings until you do.
11665	i miss look on your code, since it is mess, but disregard the mysqli and mysql thing, you want to show how many student in the teacher's classes.
11666	the best way is to use a second element.
11667	your code would look like this:
11668	on the next page, you can now use $_post['ordernumber'] .
11670	uptdate instead of the for loop you can try and print_r($result['calls']['call']) .
11671	there you should see what your single call array looks like.
11672	well ... wi-34788 ticket looks very similar to what you are asking here.
11673	it was marked as duplicate of some other ticket ... which is now implemented in phpstorm 2017.1.
11674	possible issue is: that module declares not just $_request and alike but some other global variables as well which you may want to use in your project (check here what exactly is declared in that module: https://github.com/jetbrains/phpstorm-stubs/blob/master/superglobals/_superglobals.php ).
11675	but if anything -- simply clone phpstorm stubs repo , tell phpstorm to use it instead of bundled one (same page in settings/preferences -- look at the bottom under advanced settings ) and remove only those unwanted definitions from there (from your local copy) -- this will work for sure.